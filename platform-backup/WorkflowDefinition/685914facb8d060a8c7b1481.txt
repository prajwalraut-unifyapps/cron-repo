{
	"appsUsed":[
		
	],
	"createdTime":1755437781513,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1755437781738,
		"deployedBy":-1,
		"deployedDefinitionId":"68a1dad59d7d8d3f50462496",
		"status":"DEPLOYED",
		"version":1,
		"workflowVersion":107
	},
	"edges":[
		{
			"fromNodeId":"n_uadD3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_IRaHx",
			"type":"next"
		},
		{
			"fromNodeId":"n_IRaHx",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Ljvcq",
			"type":"next"
		},
		{
			"fromNodeId":"n_Ljvcq",
			"priority":0,
			"skip":false,
			"toNodeId":"n_95Cb9",
			"type":"next"
		},
		{
			"fromNodeId":"n_95Cb9",
			"name":"1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_95Cb9@1",
			"type":"branch"
		},
		{
			"fromNodeId":"n_95Cb9@1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_BOHLI",
			"type":"next"
		},
		{
			"fromNodeId":"n_BOHLI",
			"priority":0,
			"skip":false,
			"toNodeId":"n_o9tcr",
			"type":"loop"
		},
		{
			"fromNodeId":"n_o9tcr",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ifdq0",
			"type":"next"
		},
		{
			"fromNodeId":"n_ifdq0",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"n_BOHLI",
			"type":"next"
		},
		{
			"fromNodeId":"n_95Cb9",
			"name":"2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_95Cb9@2",
			"type":"branch"
		},
		{
			"fromNodeId":"n_95Cb9@2",
			"priority":0,
			"skip":false,
			"toNodeId":"_CG2CJ",
			"type":"next"
		},
		{
			"fromNodeId":"n_95Cb9",
			"name":"3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_95Cb9@3",
			"type":"branch"
		},
		{
			"fromNodeId":"n_95Cb9@3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_eszAx",
			"type":"next"
		},
		{
			"fromNodeId":"n_eszAx",
			"priority":0,
			"skip":false,
			"toNodeId":"uwUFu",
			"type":"loop"
		},
		{
			"fromNodeId":"uwUFu",
			"priority":0,
			"skip":false,
			"toNodeId":"_ji1qL",
			"type":"next"
		},
		{
			"fromNodeId":"_ji1qL",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"n_eszAx",
			"type":"next"
		},
		{
			"fromNodeId":"n_BOHLI",
			"priority":0,
			"skip":false,
			"toNodeId":"Oqpz0",
			"type":"next"
		},
		{
			"fromNodeId":"_CG2CJ",
			"priority":0,
			"skip":false,
			"toNodeId":"Oqpz0",
			"type":"next"
		},
		{
			"fromNodeId":"n_eszAx",
			"priority":0,
			"skip":false,
			"toNodeId":"Oqpz0",
			"type":"next"
		},
		{
			"fromNodeId":"n_95Cb9",
			"name":"default",
			"priority":0,
			"skip":false,
			"toNodeId":"Oqpz0",
			"type":"branch"
		},
		{
			"fromNodeId":"Oqpz0",
			"priority":0,
			"skip":false,
			"toNodeId":"w508p",
			"type":"next"
		},
		{
			"fromNodeId":"w508p",
			"priority":0,
			"skip":false,
			"toNodeId":"n_QCHOe",
			"type":"next"
		},
		{
			"fromNodeId":"n_QCHOe",
			"priority":0,
			"skip":false,
			"toNodeId":"_bdjM9",
			"type":"next"
		},
		{
			"fromNodeId":"_bdjM9",
			"priority":0,
			"skip":false,
			"toNodeId":"n_YNF6a",
			"type":"next"
		},
		{
			"fromNodeId":"n_YNF6a",
			"priority":0,
			"skip":false,
			"toNodeId":"n_s1wSX",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"685914facb8d060a8c7b1481",
	"lastModifiedBy":-1,
	"lcName":"generate citation data from chunk ids",
	"modifiedTime":1758530883882,
	"name":"Generate citation data from chunk IDs",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":444,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"n_uadD3",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"citationData":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Citation Data"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"type":"object",
					"properties":{
						"chunkIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Chunk Ids"
						},
						"chunkEnrichment":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Chunk Enrichment"
						},
						"chunkNo":{
							"type":"array",
							"items":{
								"type":"integer"
							},
							"title":"Chunk No",
							"help":"Pass case ID and chunk numbers to fetch from citationStore"
						},
						"chunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Chunks"
						},
						"caseId":{
							"type":"string",
							"title":"Case Id",
							"help":"Pass case ID and chunk numbers to fetch from citationStore"
						},
						"blockType":{
							"type":"string",
							"title":"Block Type",
							"help":"Give the blockType to make a citation block. Options are: \"Typography\", \"Citation\""
						},
						"formatAsKeyValue":{
							"type":"boolean",
							"title":"Format As Key Value",
							"help":"Format citations as key value pair, in \"chunkNumber\": \"citation\" format"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":452,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"n_IRaHx",
			"index":2,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"batchSize":{
							"type":"integer",
							"title":"Batch Size"
						}
					},
					"required":[]
				}
			},
			"inputs":{
				"batchSize":20
			},
			"outputSchema":{
				"type":"SCHEMA",
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"batchSize":{
							"type":"integer",
							"title":"Batch Size"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Pagination",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"n_Ljvcq",
			"index":3,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{},
									"required":[]
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"chunks",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"type":"SCHEMA",
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"chunks",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{},
								"required":[]
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Chunks",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"branch",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"n_95Cb9",
			"index":4,
			"inputs":{
				"branches":[
					{
						"id":"1",
						"inputs":{
							"name":"chunkID passed",
							"conditions":{
								"filters":[
									{
										"property":"=LEN({{ n_uadD3.outputs.chunkIds }})",
										"filter":{
											"operator":"GT",
											"value":"0"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"2",
						"inputs":{
							"name":"chunks passed",
							"conditions":{
								"filters":[
									{
										"property":"=LEN({{ n_uadD3.outputs.chunks }})",
										"filter":{
											"operator":"GT",
											"value":"0"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"3",
						"inputs":{
							"name":"chunk no passed",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_uadD3.outputs.caseId }}",
										"filter":{
											"operator":"EXISTS"
										}
									},
									{
										"property":"=LEN({{ n_uadD3.outputs.chunkNo }})",
										"filter":{
											"operator":"GT",
											"value":"0"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"default"
					}
				]
			},
			"skip":false,
			"subTitle":"Branch",
			"title":"",
			"type":"BRANCH"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_95Cb9@_FGHQa-1@1",
			"id":"n_95Cb9@1",
			"index":5,
			"inputs":{
				"name":"chunkID passed",
				"conditions":{
					"filters":[
						{
							"property":"=LEN({{ n_uadD3.outputs.chunkIds }})",
							"filter":{
								"operator":"GT",
								"value":"0"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":453,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_95Cb9@_FGHQa-1@1",
			"id":"n_BOHLI",
			"index":6,
			"inputs":{
				"repeatMode":"BATCH",
				"listSource":"{{ n_uadD3.outputs.chunkIds }}",
				"captureIterations":false,
				"batchSize":"{{ n_IRaHx.outputs.batchSize }}"
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":438,
				"resourceName":"storage_by_unifyapps_get_records_by_ids",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_BOHLI@n_95Cb9@_FGHQa-1@1@l",
			"id":"n_o9tcr",
			"index":7,
			"inputs":{
				"object_type":"knowledge_vector_store_open_ai_3072",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"ids":{
					"source":"{{ n_BOHLI.outputs.item }}",
					"ua:type":"mappedArray",
					"items":"{{ n_BOHLI.outputs.item[0] }}"
				},
				"readThroughSessionVariables":true
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Get records by IDs",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemsToAdd.items.properties"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":438,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_BOHLI@n_95Cb9@_FGHQa-1@1@l",
			"id":"n_ifdq0",
			"index":8,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ n_o9tcr.outputs.objects }}",
					"items":"{{ n_o9tcr.outputs.objects[0] }}"
				},
				"listName":"{{ n_Ljvcq.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_95Cb9@_FGHQa-1@2",
			"id":"n_95Cb9@2",
			"index":9,
			"inputs":{
				"name":"chunks passed",
				"conditions":{
					"filters":[
						{
							"property":"=LEN({{ n_uadD3.outputs.chunks }})",
							"filter":{
								"operator":"GT",
								"value":"0"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemsToAdd.items.properties"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":438,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_95Cb9@_FGHQa-1@2",
			"id":"_CG2CJ",
			"index":10,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ n_uadD3.outputs.chunks }}",
					"items":"{{ n_uadD3.outputs.chunks[0] }}"
				},
				"listName":"{{ n_Ljvcq.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_95Cb9@_FGHQa-1@3",
			"id":"n_95Cb9@3",
			"index":11,
			"inputs":{
				"name":"chunk no passed",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_uadD3.outputs.caseId }}",
							"filter":{
								"operator":"EXISTS"
							}
						},
						{
							"property":"=LEN({{ n_uadD3.outputs.chunkNo }})",
							"filter":{
								"operator":"GT",
								"value":"0"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":453,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_95Cb9@_FGHQa-1@3",
			"id":"n_eszAx",
			"index":12,
			"inputs":{
				"repeatMode":"BATCH",
				"listSource":"{{ n_uadD3.outputs.chunkNo }}",
				"captureIterations":false,
				"batchSize":"{{ n_IRaHx.outputs.batchSize }}"
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":72,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_eszAx@n_95Cb9@_FGHQa-1@3@l",
			"id":"uwUFu",
			"index":13,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"properties_chunkNumber",
							"filter":{
								"operator":"IN",
								"value":"{{ n_eszAx.outputs.item }}"
							}
						},
						{
							"property":"properties_caseId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ n_uadD3.outputs.caseId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"citation_store",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"page":{
					"paginateBy":"OFFSET",
					"limit":"{{ n_IRaHx.outputs.batchSize }}"
				},
				"numberOfRecordsToFetch":"MULTIPLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemsToAdd.items.properties"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":438,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_eszAx@n_95Cb9@_FGHQa-1@3@l",
			"id":"_ji1qL",
			"index":14,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ uwUFu.outputs.objects }}",
					"items":"{{ uwUFu.outputs.objects[0] }}"
				},
				"listName":"{{ n_Ljvcq.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":11,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"Oqpz0",
			"index":15,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"references"
					],
					"properties":{
						"references":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"References"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"chunks"
					],
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Chunks"
						}
					}
				},
				"code":"Map<String, Object> references = new HashMap<>()\nList<Object> finalReferenceList = new ArrayList<>()\n\n// Advanced trim function for zero-width characters\ndef advancedTrim = { text ->\n    if (!text) return \"\"\n    \n    return text\n        .replaceAll(/(?s)Chunk Document Topic:.*?Chunk Context:/, \"\")\n        .replaceAll(/(?m)^Chunk Context:.*\\n?/, \"\")\n        .replaceAll(/^[\\s\\u200B-\\u200D\\uFEFF]+|[\\s\\u200B-\\u200D\\uFEFF]+$/, \"\") \n}\n\ndef removeSymbols(String str) {\n    if (!str) return \"\"\n    return str.replaceAll(/[#\\-*%_]/, '')\n}\n\ndef removeChunk(String str){\n    return str?.replaceAll(\"chunk\", \"document\")\n}\n\ndef removeMetadata(String str) {\n    if (!str) return \"\"\n    return str.replaceAll(/(?s)<metadata>.*?<\\/metadata>/, \"\").trim()\n}\n\ndef stripDoubleCurlyBlocks(String text) {\n    if (!text) return text\n\n    def sb = new StringBuilder()\n    int i = 0\n    while (i < text.length()) {\n        char c = text.charAt(i)\n        if (c == '{' || c == '}') {\n            sb.append(c)\n            while (i + 1 < text.length() && text.charAt(i + 1) == c) {\n                i++\n            }\n        } else {\n            sb.append(c)\n        }\n        i++\n    }\n    return sb.toString()\n}\n\ndef cleanBraces = { String s ->\n    if (!s) return \"\"\n    def out = s\n    def outer = ~/(?s)^\\s*\\{+\\s*(.*?)\\s*\\}+\\s*$/\n    while (out ==~ outer) {\n        out = out.replaceAll(outer, '$1')\n    }\n    return out\n}\n\n// Check if chunks variable exists in binding\nif (!binding.hasVariable(\"chunks\")) {\n    return [:]\n}\n\nint ctr = 0\nfor (chunk in chunks) {\n    if (chunk == null) {\n        continue\n    }\n\n    if (!chunk.containsKey('properties')) {\n        def originalContentList = chunk.chunkContents ?: []\n        def cleanedContentList = originalContentList.collect { str ->\n            def trimmedContent = advancedTrim(str ?: \"\")\n            def noPlaceholders = stripDoubleCurlyBlocks(trimmedContent)\n            def symbolsRemoved = removeSymbols(noPlaceholders)\n            def chunkReplaced = removeChunk(symbolsRemoved)\n            def cleanedStr = cleanBraces(chunkReplaced).trim()\n            return removeMetadata(cleanedStr)\n        }\n        chunk[\"chunkContents\"] = cleanedContentList\n        finalReferenceList.add(chunk)\n        continue\n    }\n\n    ctr++\n    def metadata = chunk?.properties?.chunkMetadata ?: chunk?.properties?.metadata ?: [:]\n    def chunkContent = chunk?.properties?.content ?: chunk?.properties?.text\n    def trimmedContent = advancedTrim(chunkContent ?: \"\")\n    def noPlaceholders = stripDoubleCurlyBlocks(trimmedContent)\n    def symbolsRemoved = removeSymbols(noPlaceholders)\n    def chunkReplaced = removeChunk(symbolsRemoved)\n    def finalContent = removeMetadata(chunkReplaced)\n    finalContent = cleanBraces(finalContent)\n\n    def chunkIdentifier = metadata.get(\"name\") ?: \"CHUNK_${ctr}\"\n    def chunkNumber = chunk?.properties?.chunkNumber\n    def chunkId = chunk.properties?.chunkId\n\n    def chunkContents = []\n    def chunkDetails = []\n    def existingChunkMetadata = references.get(chunkIdentifier)\n\n    if (existingChunkMetadata != null) {\n        chunkContents.addAll(existingChunkMetadata[\"chunkContents\"] ?: [])\n        chunkDetails.addAll(existingChunkMetadata[\"chunkDetails\"] ?: [])\n    }\n\n    chunkContents.add(finalContent)\n    chunkDetails.add([\n        \"chunkNumber\": chunkNumber,\n        \"chunkContent\": finalContent,\n        \"chunkId\": chunkId\n    ])\n\n    metadata[\"chunkContents\"] = finalContent\n    metadata[\"chunkDetails\"] = chunkDetails\n    metadata[\"chunkNumber\"] = chunkNumber\n    metadata[\"knowledgeType\"] = chunk?.properties?.knowledgeType ?: \"chunk\"\n\n    references.put(chunkIdentifier, metadata)\n}\n\nfinalReferenceList.addAll(references.values())\n\nreturn [\"references\": finalReferenceList]",
				"compile_static":false,
				"parameters":{
					"chunks":{
						"source":"{{ n_Ljvcq.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ n_Ljvcq.outputs.items[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Get citations",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.chunkMetadata.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":78,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"w508p",
			"index":16,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"citations":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Citations"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"chunkMetadata":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Chunk Metadata"
						}
					}
				},
				"code":"return [citations: binding.hasVariable('chunkMetadata') ? getCitations(chunkMetadata): []]\n\ndef getCitations(def chunkMetadata) {\n    def citations = []\n    def seenEntityIds = new HashSet()\n    for(chunk in chunkMetadata) {\n        def citation = [:]\n        def uniqueEntityId = chunk.get(\"uniqueEntityId\")\n        if (uniqueEntityId != null) {\n            if (seenEntityIds.contains(uniqueEntityId)) {\n                continue // Skip this chunk as we've already processed one with this uniqueEntityId\n            }\n            seenEntityIds.add(uniqueEntityId)\n        }\n        if(chunk.get(\"channelName\")!= null) {\n            citation = [\"appName\": \"slack\", \"referenceUrl\": chunk.get(\"referenceUrl\"), \"knowledgeSourceType\": \"APPLICATION\", \"title\": chunk.get(\"channelName\")]\n        } else if(chunk.get(\"websiteUrl\") != null){\n            citation = [ \"referenceUrl\":chunk.get(\"websiteUrl\"), \"knowledgeSourceType\": \"WEBSITE\", \"title\": chunk.get(\"title\")]\n        } else if(chunk.get(\"webViewUrl\") != null){\n            citation = [ \"referenceUrl\":chunk.get(\"webViewUrl\"), \"knowledgeSourceType\": \"APPLICATION\", \"appName\": \"gdrive\"]\n        } else if(chunk.get(\"appName\") != null){\n            citation = [ \"knowledgeSourceType\": \"APPLICATION\", \"referenceUrl\":chunk.get(\"referenceUrl\"), \"name\" : chunk.get(\"name\"), \"appName\": chunk.get(\"appName\")]\n        }\n        else if(chunk.get(\"kind\") != null){\n            citation = [ \"knowledgeSourceType\": \"APPLICATION\", \"referenceUrl\":chunk.get(\"referenceUrl\"), \"name\" : chunk.get(\"name\"), \"appName\": \"gdrive\"]\n        }\n        else {\n            citation = [\"referenceUrl\":chunk.get(\"referenceUrl\"), \"name\" : chunk.get(\"name\"), \"source\": chunk.get(\"source\")]\n        }\n        \n        def date = chunk[\"date\"] // handling for different created date storage in chunk metadata for different applications\n        if(date == null){\n            date = chunk[\"createdAt\"]\n        }\n        if(date == null){\n            date = chunk[\"createdTime\"]\n        }\n        citation[\"fileType\"] = chunk[\"fileType\"]\n        citation[\"iconUrl\"]=chunk[\"iconUrl\"]\n        citation[\"chunkContents\"] = [chunk[\"chunkContents\"]]\n        citation[\"chunkDetails\"] = chunk[\"chunkDetails\"]\n        citation[\"author\"] = chunk.containsKey('author') ? chunk['author'] : chunk['authorEmail'] \n        if(chunk.containsKey('authorId')) citation['authorId'] = chunk[\"authorId\"]\n        citation[\"date\"] = date\n        citation[\"uniqueEntityId\"] = uniqueEntityId\n        citation[\"chunkNumber\"] = chunk[\"chunkNumber\"]\n        citation[\"knowledgeType\"] = chunk[\"knowledgeType\"]\n        citation[\"email\"] = chunk[\"email\"]\n        if(citation[\"knowledgeType\"] == \"people\") {\n            for (key in chunk.keySet()) {\n                citation[key] = chunk[key]\n            }\n        }\n\n        if(chunk.chunkDetails != null)\n        {\n            citation[\"chunkDetails\"] = chunk.chunkDetails\n        }\n        else\n        {\n            def firstContent = chunk[\"chunkContents\"]?.getAt(0)\n            def chunkDetails = [\n                [\n                    chunkId: chunk[\"chunkId\"],\n                    chunkContent: [firstContent]\n                ]\n            ] \n\n            citation[\"chunkDetails\"] = chunkDetails \n        }\n        \n\n        citations << citation\n    }\n\n    return citations\n}",
				"compile_static":false,
				"parameters":{
					"chunkMetadata":{
						"source":"{{ Oqpz0.outputs.result.references }}",
						"ua:type":"mappedArray",
						"items":"{{ Oqpz0.outputs.result.references[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"metadata to citations",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.chunkEnrichment.items",
					"root.parameters.citationData.items",
					"root.parameters.chunkId.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"n_QCHOe",
			"index":17,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"enrichedCitationData":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Enriched Citation Data"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"chunkEnrichment":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Chunk Enrichment"
						},
						"citationData":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Citation Data"
						},
						"chunkId":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Chunk Id"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"/*\nExpected format for enrichment\nArray of objects:\n[\n    {\n        \"chunkdId\": \"id123\",    (ID of the chunk you want to add the rest of they key-value pairs to)\n        \"k1\": \"v1\",     (Rest of the key value pairs, will be added as it is)\n        \"k2\": \"v2\"\n    }\n]\n*/\n\n\ndef enrichedCitationData\n\nif(binding.hasVariable('citationData')){\n    enrichedCitationData = citationData\n} else {\n    return []\n}\n\nif(binding.hasVariable('chunkEnrichment')){\n\n    // Create a lookup map for quick chunkId to enrichment info\n    def enrichmentMap = [:]\n    chunkEnrichment.each { enrichment ->\n        def chunkId = enrichment.chunkId\n        if (chunkId && !chunkId.isEmpty()){\n            enrichmentMap[chunkId] = enrichment.findAll { k, _ -> k != \"chunkId\" }\n        }\n    }\n\n    // Iterate over all citations and enrich them based on their chunkDetails\n    enrichedCitationData?.each { citation ->\n        citation?.chunkDetails?.each { chunk ->\n            def chunkId = chunk.chunkId\n            if (enrichmentMap.containsKey(chunkId)) {\n                // Add enrichment data to the citation itself, not the chunk\n                citation.putAll(enrichmentMap[chunkId])\n            }\n        }\n    }\n\n}\n// Reordering\nif (binding.hasVariable('chunkId')) {\n    def chunkIdList = chunkId\n    def reorderedList = []\n\n    chunkIdList.each { id ->\n        def foundCitation = enrichedCitationData.find { citation ->\n            citation?.chunkDetails?.any { chunk -> chunk.chunkId == id }\n        }\n        if (foundCitation && !reorderedList.contains(foundCitation)) {\n            reorderedList << foundCitation\n        }\n    }\n\n    enrichedCitationData = reorderedList\n}\nreturn [enrichedCitationData: enrichedCitationData]",
				"parameters":{
					"chunkEnrichment":{
						"source":"{{ n_uadD3.outputs.chunkEnrichment }}",
						"ua:type":"mappedArray",
						"items":"{{ n_uadD3.outputs.chunkEnrichment[0] }}"
					},
					"citationData":{
						"source":"{{ w508p.outputs.result.citations }}",
						"ua:type":"mappedArray",
						"items":"{{ w508p.outputs.result.citations[0] }}"
					},
					"chunkId":{
						"source":"{{ n_uadD3.outputs.chunkIds }}",
						"ua:type":"mappedArray",
						"items":"{{ n_uadD3.outputs.chunkIds[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Chunk enrichment",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.enrichedCitationData.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"_bdjM9",
			"index":18,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"enrichedCitationData":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Enriched Citation Data"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"enrichedCitationData":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Enriched Citation Data"
						},
						"formatAsKeyValue":{
							"type":"boolean",
							"title":"Format As Key Value"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"/* if true, we will format the chunks in the following format:\n[\n  {\n    \"chunkNumber\" : {\n      actual chunk\n    }\n  }\n]\n*/\n\ndef result\n\nif (formatAsKeyValue) {\n    def keyValueMap = enrichedCitationData.collectEntries { entry ->\n        entry.chunkDetails.collectEntries { cd ->\n            [ (cd.chunkNumber.toString()) : entry ]\n        }\n    }\n\n    result = [ keyValueMap ]\n} else {\n    result = enrichedCitationData\n}\n\nreturn [ enrichedCitationData: result ]\n\n\n",
				"parameters":{
					"formatAsKeyValue":"{{ n_uadD3.outputs.formatAsKeyValue }}",
					"enrichedCitationData":{
						"items":"{{ n_QCHOe.outputs.result.enrichedCitationData[0] }}",
						"ua:type":"mappedArray",
						"source":"{{ n_QCHOe.outputs.result.enrichedCitationData }}"
					}
				}
			},
			"skip":true,
			"subTitle":"Format as key value",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.enrichedCitationData.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"n_YNF6a",
			"index":19,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"coPilotBlocks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Co Pilot Blocks"
						}
					},
					"additionalProperties":false,
					"required":[
						"coPilotBlocks"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"blockType":{
							"type":"string",
							"title":"Block Type"
						},
						"enrichedCitationData":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Enriched Citation Data"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def enrichedCitationData = binding.hasVariable('enrichedCitationData') ? enrichedCitationData : []\n// code\nif(binding.hasVariable('blockType')){\n  if (binding.blockType.toLowerCase() == 'citation'){\n    return [coPilotBlocks: [['blockType': \"Citation\", 'data': ['citations': enrichedCitationData]]]]\n  }\n}\n\nreturn [coPilotBlocks: enrichedCitationData]",
				"parameters":{
					"blockType":"{{ n_uadD3.outputs.blockType }}",
					"enrichedCitationData":{
						"source":"{{ n_QCHOe.outputs.result.enrichedCitationData }}",
						"ua:type":"mappedArray",
						"items":"{{ n_QCHOe.outputs.result.enrichedCitationData[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Format as block",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":454,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_FGHQa-1",
			"id":"n_s1wSX",
			"index":20,
			"inputs":{
				"result":{
					"citationData":{
						"source":"{{ n_YNF6a.outputs.result.coPilotBlocks }}",
						"ua:type":"mappedArray",
						"items":"{{ n_YNF6a.outputs.result.coPilotBlocks[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":-1,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":115
}