{
	"appsUsed":[
		
	],
	"createdTime":1757344874449,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759615045090,
		"deployedBy":1,
		"deployedDefinitionId":"68e198455045f405579af365",
		"status":"DEPLOYED",
		"version":44,
		"workflowVersion":45
	},
	"edges":[
		{
			"fromNodeId":"_rkSkt",
			"priority":0,
			"skip":false,
			"toNodeId":"_vr3YW",
			"type":"next"
		},
		{
			"fromNodeId":"_vr3YW",
			"priority":0,
			"skip":false,
			"toNodeId":"_tmr0g",
			"type":"next"
		},
		{
			"fromNodeId":"_tmr0g",
			"priority":0,
			"skip":false,
			"toNodeId":"_BuGWa",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"68bc3aec00a55f66efe33ed8",
	"lastModifiedBy":1,
	"lcName":"excel file indexing for sql | insert records parallel",
	"modifiedTime":1759685522405,
	"name":"Excel File Indexing For SQL | Insert records parallel",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_PEgle@3S7qD@JvugK@whN5E@_DFiQo-1@n@2@l@l",
			"id":"_rkSkt",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"success":{
							"type":"boolean",
							"title":"Success"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"fieldTypeMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Field Type Map"
						},
						"row":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Row"
						},
						"entityId":{
							"type":"string",
							"title":"Entity Id"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":78,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"_PEgle@3S7qD@JvugK@whN5E@_DFiQo-1@n@2@l@l",
			"id":"_vr3YW",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"context":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Context"
						},
						"input":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Input"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"row":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Row"
						},
						"entityId":{
							"type":"string",
							"title":"Entity Id"
						},
						"fieldTypeMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Field Type Map"
						}
					}
				},
				"code":"import java.text.SimpleDateFormat\nimport java.text.ParseException\n\nclass ColumnNameGenerator {\n    def columnCounter = 0\n\n    def isAsciiLetterOrDigit(char c) {\n        (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')\n    }\n\n    def getSanitizedName(String header) {\n        if (header == null || header.trim().isEmpty()) {\n            String columnName = \"Column_\" + columnCounter\n            columnCounter++\n            return columnName\n        }\n\n        def sb = new StringBuilder()\n        header.toCharArray().eachWithIndex { c, idx ->\n            def k = c.toLowerCase()\n            if (idx == 0) {\n                sb.append(isAsciiLetterOrDigit(c) ? k : \"_\")\n            } else {\n                sb.append(isAsciiLetterOrDigit(c) ? k : \"_\")\n            }\n        }\n        return sanitizeReservedKeywords(sb.toString())\n    }\n\n    def sanitizeReservedKeywords(String fieldName) {\n        Set<String> keywords = [\"ADD\",\"ALL\",\"ALTER\",\"ANALYZE\",\"AND\",\"ARRAY\",\"AS\",\"ASC\",\"BETWEEN\",\"BIGINT\",\"BITMAP\",\"BOTH\",\"BY\",\"CASE\",\"CHAR\",\"CHARACTER\",\"CHECK\",\"COLLATE\",\"COLUMN\",\"COMPACTION\",\"CONVERT\",\"CREATE\",\"CROSS\",\"CUBE\",\"CURRENT_DATE\",\"CURRENT_ROLE\",\"CURRENT_TIME\",\"CURRENT_TIMESTAMP\",\"CURRENT_USER\",\"DATABASE\",\"DATABASES\",\"DECIMAL\",\"DECIMAL128\",\"DECIMAL32\",\"DECIMAL64\",\"DECIMALV2\",\"DEFAULT\",\"DELETE\",\"DENSE_RANK\",\"DESC\",\"DESCRIBE\",\"DISTINCT\",\"DOUBLE\",\"DROP\",\"DUAL\",\"DEFERRED\",\"ELSE\",\"EXCEPT\",\"EXISTS\",\"EXPLAIN\",\"FALSE\",\"FIRST_VALUE\",\"FLOAT\",\"FOR\",\"FORCE\",\"FROM\",\"FULL\",\"FUNCTION\",\"GRANT\",\"GROUP\",\"GROUPING\",\"GROUPING_ID\",\"HAVING\",\"HLL\",\"HOST\",\"IF\",\"IGNORE\",\"IMMEDIATE\",\"IN\",\"INDEX\",\"INFILE\",\"INNER\",\"INSERT\",\"INT\",\"INTEGER\",\"INTERSECT\",\"INTO\",\"IS\",\"JOIN\",\"JSON\",\"KEY\",\"KEYS\",\"KILL\",\"LAG\",\"LARGEINT\",\"LAST_VALUE\",\"LATERAL\",\"LEAD\",\"LEFT\",\"LIKE\",\"LIMIT\",\"LOAD\",\"LOCALTIME\",\"LOCALTIMESTAMP\",\"MAXVALUE\",\"MINUS\",\"MOD\",\"NOT\",\"NULL\",\"ON\",\"OR\",\"ORDER\",\"OUTER\",\"OUTFILE\",\"OVER\",\"PARTITION\",\"PERCENTILE\",\"PRIMARY\",\"PROCEDURE\",\"QUALIFY\",\"RANGE\",\"RANK\",\"READ\",\"REGEXP\",\"RELEASE\",\"RENAME\",\"REPLACE\",\"REVOKE\",\"RIGHT\",\"RLIKE\",\"ROW\",\"ROW_NUMBER\",\"ROWS\",\"SCHEMA\",\"SCHEMAS\",\"SELECT\",\"SET\",\"SET_VAR\",\"SHOW\",\"SMALLINT\",\"SYSTEM\",\"TABLE\",\"TERMINATED\",\"TEXT\",\"THEN\",\"TINYINT\",\"TO\",\"TRUE\",\"UNION\",\"UNIQUE\",\"UNSIGNED\",\"UPDATE\",\"USE\",\"USING\",\"VALUES\",\"VARCHAR\",\"WHEN\",\"WHERE\",\"WITH\",\"MONTH\",\"ABS\", \"ADD\", \"ALL\", \"ALTER\", \"AND\", \"ANY\", \"AS\", \"ASC\",\n        \"AVG\",\"BEGIN\", \"BETWEEN\", \"BIGINT\", \"BINARY\", \"BOOLEAN\", \"BY\",\"CASE\", \"CAST\", \"CHAR\", \"CHARACTER\", \"CHECK\", \"CLASSIFIER\", \"COALESCE\",\"COLLATE\", \"COLUMN\", \"CONSTRAINT\", \"CONVERT\", \"COUNT\", \"CREATE\",\"CURRENT\", \"CURRENT_DATE\", \"CURRENT_TIME\", \"CURRENT_TIMESTAMP\",\"CURRENT_USER\", \"DATE\", \"DATETIME\", \"DECIMAL\", \"DEFAULT\", \"DELETE\",\"DESC\", \"DISTINCT\", \"DOUBLE\", \"ELSE\", \"END\", \"EXISTS\", \"EXTRACT\",\"FALSE\", \"FETCH\", \"FIRST_VALUE\", \"FLOAT\", \"FLOOR\", \"FOLLOWING\", \"FOR\",\"FROM\", \"FULL\", \"FUNCTION\", \"GROUP\", \"GROUPING\", \"HAVING\", \"IF\", \"IN\",\"INNER\", \"INSERT\", \"INT\", \"INTEGER\", \"INTERSECT\", \"INTERVAL\", \"INTO\",\"IS\", \"JOIN\", \"JSON\", \"JSON_ARRAY\", \"JSON_OBJECT\", \"KEY\", \"LAG\",\"LAST_VALUE\", \"LEAD\", \"LEFT\", \"LIKE\", \"LIMIT\", \"MAX\", \"MERGE\", \"MIN\",\"MINUTE\", \"MOD\", \"MONTH\", \"NATIONAL\", \"NATURAL\", \"NEXT\", \"NOT\", \"NULL\",\"NULLIF\", \"NUMBER\", \"NUMERIC\", \"OFFSET\", \"ON\", \"OR\", \"ORDER\", \"OUTER\",\"OVER\", \"PARTITION\", \"PERCENTILE_CONT\", \"PERCENTILE_DISC\", \"POSITION\",\"POWER\", \"PRECEDING\", \"PRIMARY\", \"RANGE\", \"RANK\", \"RECURSIVE\", \"RIGHT\",\"ROLLUP\", \"ROW\", \"ROW_NUMBER\", \"ROWS\", \"SAVEPOINT\", \"SELECT\",\"SESSION_USER\", \"SET\", \"SOME\", \"SPECIFIC\", \"STDDEV_POP\", \"STDDEV_SAMP\",\"SUM\", \"SYSTEM_USER\", \"TABLE\", \"THEN\", \"TIME\", \"TIMESTAMP\", \"TO\",\"TRUE\", \"TRUNCATE\", \"UNION\", \"UNIQUE\", \"UNKNOWN\", \"UPDATE\", \"USER\",\"USING\", \"VALUES\", \"VAR_POP\", \"VAR_SAMP\", \"VARCHAR\", \"WHEN\", \"WHERE\",\"WITH\", \"WINDOW\", \"YEAR\" ]\n\n        if(keywords.contains(fieldName.toUpperCase())) {\n            return  \"_ua_\" + fieldName\n        }\n        return fieldName;\n    }\n\n}\n\n// Method to parse the value based on its type\ndef getParsedValue(String key, String value) {\n    String type = fieldTypeMap[key]\n    if (type == null) {\n        return value\n    }\n    switch (type) {\n        case \"INTEGER\":\n            if(value.trim().isEmpty())\n            {\n                return null\n            }\n            return Integer.parseInt(value)\n        case \"DOUBLE\":\n            if(value.trim().isEmpty())\n            {\n                return null\n            }\n            return Double.parseDouble(value.trim().replace(\",\", \"\"))\n        case \"BOOLEAN\":\n            return value.equalsIgnoreCase(\"true\") || value.equalsIgnoreCase(\"false\") ? Boolean.parseBoolean(value) : null\n        case \"DATE\":\n        case \"STRING\":\n        default:\n            return value\n    }\n}\n\ndef record = [:]\ndef generator = new ColumnNameGenerator()\n\nrow.each {key,value ->\n  record.put(generator.getSanitizedName(key), getParsedValue(key, value.toString()))\n}\ndef input = [\n  \"object_type\": entityId,\n  \"record\": com.unifyapps.infra.utils.JsonUtils.toJSON(record)\n]\n\ndef context = [\n  \"appName\": \"storage_by_unifyapps\",\n  \"resourceName\": \"storage_by_unifyapps_create_record\",\n  \"type\": \"APPLICATION\"\n]\n\nreturn [\n  \"context\" : com.unifyapps.infra.utils.JsonUtils.toJSON(context),\n  \"input\":com.unifyapps.infra.utils.JsonUtils.toJSON(input)\n]\n\n",
				"compile_static":false,
				"isAsync":false,
				"parameters":{
					"row":"{{ _rkSkt.outputs.row }}",
					"entityId":"{{ _rkSkt.outputs.entityId }}",
					"fieldTypeMap":"{{ _rkSkt.outputs.fieldTypeMap }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE"
			},
			"skip":false,
			"subTitle":"Construct row entity",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"custom_application",
				"resourceVersion":14,
				"resourceName":"custom_application_execute",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"_PEgle@3S7qD@JvugK@whN5E@_DFiQo-1@n@2@l@l",
			"id":"_tmr0g",
			"index":3,
			"inputs":{
				"input":"{{ _vr3YW.outputs.result.input }}",
				"context":"{{ _vr3YW.outputs.result.context }}"
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE"
			},
			"skip":false,
			"subTitle":"Insert new Record",
			"title":"Execute Custom Application Request",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_PEgle@3S7qD@JvugK@whN5E@_DFiQo-1@n@2@l@l",
			"id":"_BuGWa",
			"index":4,
			"inputs":{
				"result":{
					"success":true
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":0,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":46
}