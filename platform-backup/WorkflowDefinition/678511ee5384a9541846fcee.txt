{
	"appsUsed":[
		
	],
	"createdTime":1736864943149,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1757441854611,
		"deployedBy":0,
		"deployedDefinitionId":"68c06f3e6bc3be145d79414f",
		"status":"DEPLOYED",
		"version":74,
		"workflowVersion":94
	},
	"edges":[
		{
			"fromNodeId":"YtaWZ",
			"priority":0,
			"skip":false,
			"toNodeId":"XUiha",
			"type":"next"
		},
		{
			"fromNodeId":"XUiha",
			"priority":0,
			"skip":false,
			"toNodeId":"iw1RO",
			"type":"next"
		},
		{
			"fromNodeId":"iw1RO",
			"priority":0,
			"skip":false,
			"toNodeId":"h0Eep",
			"type":"next"
		},
		{
			"fromNodeId":"h0Eep",
			"priority":0,
			"skip":false,
			"toNodeId":"6qehR",
			"type":"next"
		},
		{
			"fromNodeId":"6qehR",
			"priority":0,
			"skip":false,
			"toNodeId":"_Rhwoj",
			"type":"next"
		},
		{
			"fromNodeId":"_Rhwoj",
			"priority":0,
			"skip":false,
			"toNodeId":"n_3fPGV",
			"type":"next"
		},
		{
			"fromNodeId":"n_3fPGV",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nB6K9",
			"type":"if"
		},
		{
			"fromNodeId":"n_nB6K9",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KCuYz",
			"type":"next"
		},
		{
			"fromNodeId":"n_KCuYz",
			"priority":0,
			"skip":false,
			"toNodeId":"n_QRxXn",
			"type":"next"
		},
		{
			"fromNodeId":"n_3fPGV",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_grBRf",
			"type":"next"
		},
		{
			"fromNodeId":"n_QRxXn",
			"priority":0,
			"skip":false,
			"toNodeId":"_vUw65",
			"type":"next"
		},
		{
			"fromNodeId":"_grBRf",
			"priority":0,
			"skip":false,
			"toNodeId":"_vUw65",
			"type":"next"
		},
		{
			"fromNodeId":"_vUw65",
			"priority":0,
			"skip":false,
			"toNodeId":"_7Xfi4",
			"type":"next"
		},
		{
			"fromNodeId":"_7Xfi4",
			"priority":0,
			"skip":false,
			"toNodeId":"5yZWr",
			"type":"next"
		},
		{
			"fromNodeId":"5yZWr",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"6PcYP",
			"type":"if"
		},
		{
			"fromNodeId":"6PcYP",
			"priority":0,
			"skip":false,
			"toNodeId":"cw2C4",
			"type":"next"
		},
		{
			"fromNodeId":"cw2C4",
			"priority":0,
			"skip":false,
			"toNodeId":"NIaSh",
			"type":"next"
		},
		{
			"fromNodeId":"5yZWr",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"NIaSh",
			"type":"next"
		},
		{
			"fromNodeId":"NIaSh",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"Ha7mh",
			"type":"if"
		},
		{
			"fromNodeId":"Ha7mh",
			"priority":0,
			"skip":false,
			"toNodeId":"rFaF6",
			"type":"next"
		},
		{
			"fromNodeId":"NIaSh",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"rFaF6",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"678511ee5384a9541846fcee",
	"lastModifiedBy":-1,
	"lcName":"validate and clean llm response ",
	"modifiedTime":1758530316204,
	"name":"Validate And Clean LLM response ",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root.result":{}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":7,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"YtaWZ",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"thought":{
							"type":"string",
							"title":"thought"
						},
						"publishThought":{
							"type":"boolean",
							"title":"publishThought"
						},
						"finalAnswer":{
							"type":"string",
							"title":"Final Answer"
						},
						"errorMessage":{
							"type":"string",
							"title":"Error Message"
						},
						"tools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									},
									"toolName":{
										"type":"string",
										"title":"Tool Name"
									},
									"toolInputs":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Inputs"
									},
									"actionId":{
										"type":"string",
										"title":"Action Id"
									},
									"toolAdditional":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Additional"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"type":"object",
					"properties":{
						"llmResponse":{
							"type":"string",
							"title":"llmResponse"
						},
						"caseId":{
							"type":"string",
							"title":"caseId"
						},
						"availableTools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Available Tools"
						},
						"agentId":{
							"type":"string",
							"title":"Agent Id"
						},
						"modelId":{
							"type":"string",
							"title":"modelId"
						},
						"errorMessage":{
							"type":"string",
							"title":"Error Message"
						},
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"name"
									},
									"arguments":{
										"type":"string",
										"title":"arguments"
									},
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"toolsToExecute"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2,
				"resourceName":"storage_by_unifyapps_get_record_by_id",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"XUiha",
			"index":2,
			"inputs":{
				"object_type":"e_ai_agent_conversation_state",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"id":"{{ YtaWZ.outputs.caseId }}",
				"readThroughSessionVariables":false
			},
			"skip":false,
			"subTitle":"conv state",
			"title":"Fetch record by ID",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":74,
				"resourceName":"variable_by_unifyapps_get_session_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"iw1RO",
			"index":3,
			"inputs":{
				"variableSchema":{
					"type":"object",
					"properties":{
						"collectSlotInputs":{
							"type":"object",
							"properties":{
								"status":{
									"type":"string",
									"title":"Status"
								}
							},
							"additionalProperties":false,
							"title":"Collect Slot Inputs",
							"required":[]
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Get Session Variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":173,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"h0Eep",
			"index":4,
			"inputs":{
				"automationId":"67e2d58d94875751e6bc1066",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"modelId":"{{ YtaWZ.outputs.modelId }}"
				}
			},
			"skip":false,
			"subTitle":"Get ModelName",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":157,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"6qehR",
			"index":5,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"finalAnswer":{
							"type":"string",
							"title":"Final Answer"
						},
						"thought":{
							"type":"string",
							"title":"thought"
						},
						"publishThoughts":{
							"type":"boolean",
							"title":"publishThoughts"
						},
						"errMsg":{
							"type":"string",
							"title":"errMsg"
						},
						"tools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									},
									"toolName":{
										"type":"string",
										"title":"Tool Name"
									},
									"toolInputs":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Inputs"
									},
									"actionId":{
										"type":"string",
										"title":"Action Id"
									},
									"toolAdditional":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Additional"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools"
						},
						"translatedThought":{
							"type":"string",
							"title":"Translated Thought"
						}
					},
					"required":[]
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"finalAnswer":{
							"type":"string",
							"title":"Final Answer"
						},
						"thought":{
							"type":"string",
							"title":"thought"
						},
						"publishThoughts":{
							"type":"boolean",
							"title":"publishThoughts"
						},
						"errMsg":{
							"type":"string",
							"title":"errMsg"
						},
						"tools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									},
									"toolName":{
										"type":"string",
										"title":"Tool Name"
									},
									"toolInputs":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Inputs"
									},
									"actionId":{
										"type":"string",
										"title":"Action Id"
									},
									"toolAdditional":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Additional"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools"
						},
						"translatedThought":{
							"type":"string",
							"title":"Translated Thought"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"finalAnswer",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.toolsToExecute.items.name",
					"root.parameters.toolsToExecute.items.arguments",
					"root.parameters.availableTools.items",
					"root.parameters.toolsToExecute.items.toolId"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":11,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"_Rhwoj",
			"index":6,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"publishThought",
						"errorMessage"
					],
					"properties":{
						"thought":{
							"type":"string",
							"title":"thought"
						},
						"finalAnswer":{
							"type":"string",
							"title":"finalAnswer"
						},
						"publishThought":{
							"type":"boolean",
							"title":"Publish Thought"
						},
						"errorMessage":{
							"type":"string",
							"title":"Error Message"
						},
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"id":{
										"type":"string",
										"title":"Id"
									},
									"name":{
										"type":"string",
										"title":"Name"
									},
									"toolInput":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Input"
									},
									"actionId":{
										"type":"string",
										"title":"Action Id"
									},
									"toolAdditional":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Additional"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools To Execute"
						},
						"thoughtMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Thought Map"
						},
						"isStaticThought":{
							"type":"boolean",
							"title":"Is Static Thought"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"llmResponse"
					],
					"properties":{
						"llmResponse":{
							"type":"string",
							"title":"Llm Response"
						},
						"availableTools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Available Tools"
						},
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"name"
									},
									"arguments":{
										"type":"string",
										"title":"arguments"
									},
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"toolsToExecute"
						},
						"agentId":{
							"type":"string",
							"title":"Agent Id"
						},
						"collectSlotStatus":{
							"type":"string",
							"title":"Collect Slot Status"
						},
						"triggeredByAgentWaitingInstanceId":{
							"type":"string",
							"title":"Triggered By Agent Waiting Instance Id"
						},
						"formatErrorMessage":{
							"type":"string",
							"title":"Format Error Message"
						}
					}
				},
				"code":"import java.util.regex.Matcher\nimport java.util.regex.Pattern\n\n// ---------- Central repository of templates with IDs ----------\nfinal Map<String,String> THOUGHT_TEMPLATES = [\n\n    // ---------- Generic ----------\n    \"GENERIC_1\": \"Executing the tool {1}.\",\n    \"GENERIC_2\": \"Let's use the tool {1} for this.\",\n    \"GENERIC_3\": \"Getting help from the tool {1}.\",\n    \"GENERIC_4\": \"Solving this with the tool {1}.\",\n    \"GENERIC_5\": \"Using {1} to solve your query.\",\n    \"GENERIC_6\": \"Let's make use of the tool {1}.\",\n    \"GENERIC_7\": \"Executing {1} to help you out.\",\n    \"GENERIC_8\": \"Let's solve this using the tool {1}.\",\n    \"GENERIC_9\": \"Executing {1} for your request.\",\n    \"GENERIC_10\": \"Executing the tool {1} to assist you.\",\n\n    // ---------- Generate_public_file_URL ----------\n    \"GENERATE_URL_1\": \"I'm generating a public URL for this file...\",\n    \"GENERATE_URL_2\": \"Creating a shareable link for your file...\",\n    \"GENERATE_URL_3\": \"Let me prepare a public URL for easy access...\",\n    \"GENERATE_URL_4\": \"Generating a public file link for you...\",\n    \"GENERATE_URL_5\": \"Setting up a shareable URL for this document...\",\n    \"GENERATE_URL_6\": \"I'll create a public access link for this file...\",\n\n    // ---------- SetTopic ----------\n    \"SETTOPIC_1\": \"I'm setting the task for this conversation to: {1}\",\n    \"SETTOPIC_2\": \"Establishing our focus on: {1}\",\n    \"SETTOPIC_3\": \"Let me define our conversation topic as: {1}\",\n    \"SETTOPIC_4\": \"Setting up the context for: {1}\",\n    \"SETTOPIC_5\": \"Defining our current task as: {1}\",\n\n    // ---------- SwitchTopic ----------\n    \"SWITCHTOPIC_1\": \"Let me switch our focus to: {1}\",\n    \"SWITCHTOPIC_2\": \"Transitioning to work on: {1}\",\n    \"SWITCHTOPIC_3\": \"Redirecting our discussion to: {1}\",\n    \"SWITCHTOPIC_4\": \"Let's shift our attention to: {1}\",\n    \"SWITCHTOPIC_5\": \"Moving to the new task: {1}\",\n\n    // ---------- IngestKnowledge ----------\n    \"INGEST_1\": \"Let me ingest these files into the knowledge base for future reference...\",\n    \"INGEST_2\": \"I'm adding this information to my knowledge repository...\",\n    \"INGEST_3\": \"Storing these documents in the knowledge base...\",\n    \"INGEST_4\": \"Processing and saving this content for later use...\",\n    \"INGEST_5\": \"I'll incorporate this into the knowledge system...\",\n\n    // ---------- AnalyseFile ----------\n    \"ANALYSE_1\": \"I'm analyzing the attachments to understand your request...\",\n    \"ANALYSE_2\": \"Let me examine these files to process your query...\",\n    \"ANALYSE_3\": \"Reviewing the attached documents...\",\n    \"ANALYSE_4\": \"I'll analyze this content to better assist you...\",\n    \"ANALYSE_5\": \"Scanning through the provided files...\",\n    \"ANALYSE_6\": \"Processing the attachments to extract relevant information...\",\n\n    // ---------- GenerateCharts ----------\n    \"CHARTS_1\": \"Let me generate charts to better visualize this data...\",\n    \"CHARTS_2\": \"I'm creating visual representations of your data...\",\n    \"CHARTS_3\": \"Preparing charts for clearer data presentation...\",\n    \"CHARTS_4\": \"Building visualizations to illustrate the insights...\",\n    \"CHARTS_5\": \"I'll create some graphs to make this data more accessible...\",\n    \"CHARTS_6\": \"Generating visual charts from the data...\",\n\n    // ---------- think ----------\n    \"THINK_1\": \"I'm thinking through this to provide a comprehensive solution...\",\n    \"THINK_2\": \"Let me consider all aspects of this problem...\",\n    \"THINK_3\": \"Taking a moment to formulate the best approach...\",\n    \"THINK_4\": \"I'm analyzing this deeply to give you a thorough answer...\",\n    \"THINK_5\": \"Processing this request to ensure accuracy...\",\n    \"THINK_6\": \"Let me work through this systematically...\",\n\n    // ---------- ClarifyFromUser ----------\n    \"CLARIFY_1\": \"Let me clarify a few details with you...\",\n    \"CLARIFY_2\": \"I need to ask for some clarification to proceed...\",\n    \"CLARIFY_3\": \"I'll need more information to give you the best answer...\",\n    \"CLARIFY_4\": \"Let me confirm some details before continuing...\",\n    \"CLARIFY_5\": \"I have a few questions to better understand your needs...\",\n    \"CLARIFY_6\": \"Requesting additional context to assist you better...\",\n\n    // ---------- PublishCitations ----------\n    \"CITATIONS_1\": \"Let me include citations for this answer...\",\n    \"CITATIONS_2\": \"I'm gathering relevant sources to support this response...\",\n    \"CITATIONS_3\": \"Adding references to validate the information...\",\n    \"CITATIONS_4\": \"I'll provide citations for transparency...\",\n    \"CITATIONS_5\": \"Compiling source materials for your reference...\",\n\n    // ---------- ReferFromKnowledge ----------\n    \"REFER_1\": \"Let me check the knowledge base to answer your query...\",\n    \"REFER_2\": \"I'm searching through stored information for relevant details...\",\n    \"REFER_3\": \"Consulting the knowledge repository...\",\n    \"REFER_4\": \"Looking up information from our knowledge base...\",\n    \"REFER_5\": \"I'll reference the stored materials to help you...\",\n    \"REFER_6\": \"Retrieving relevant information from knowledge ...\",\n\n    // ---------- WebSearch ----------\n    \"WEB_1\": \"I'm performing a web search to find current information...\",\n    \"WEB_2\": \"Let me search online for the latest details...\",\n    \"WEB_3\": \"Searching the web to answer your question...\",\n    \"WEB_4\": \"I'll look this up online for you...\",\n    \"WEB_5\": \"Conducting an internet search for relevant information...\",\n    \"WEB_6\": \"Fetching real-time information from the web...\",\n\n    // ---------- InvokeAgent ----------\n    \"AGENT_1\": \"I'm invoking {1} to handle this task...\",\n    \"AGENT_2\": \"Assigning this request to {1} for specialized handling...\",\n    \"AGENT_3\": \"Let me route this to {1} for further processing...\",\n    \"AGENT_4\": \"Engaging {1} to take care of this step...\",\n    \"AGENT_5\": \"Forwarding the task to {1} for execution...\",\n    \"AGENT_6\": \"I'll delegate this request to {1} to proceed...\",\n\n    // Fallback\n    \"FALLBACK_1\": \"Processing your query...\"\n]\n\nMap<String, Object> safeMap(Object obj) {\n    return (obj instanceof Map) ? (Map<String, Object>) obj : Collections.emptyMap()\n}\n\nString snakeToTitleCase(String snakeCase) {\n    if (snakeCase == null || snakeCase.isEmpty()) {\n        return \"\"\n    }\n    return snakeCase.split('_')\n            .collect { word ->\n                word.isEmpty() ? \"\" : word[0].toUpperCase() + word.substring(1).toLowerCase()\n            }\n            .join(' ')\n}\n\nMap<String,Object> getStaticThought(String toolName, Map<String, Object> toolInput, Map<String,String> templates) {\n    String tool = snakeToTitleCase(toolName) ?: \" \"\n\n    List<String> ids = [\n        \"GENERIC_1\",\"GENERIC_2\",\"GENERIC_3\",\"GENERIC_4\",\"GENERIC_5\",\n        \"GENERIC_6\",\"GENERIC_7\",\"GENERIC_8\",\"GENERIC_9\",\"GENERIC_10\"\n    ]\n\n    switch (toolName) {\n        case \"Generate_public_file_URL\": ids = [\"GENERATE_URL_1\",\"GENERATE_URL_2\",\"GENERATE_URL_3\",\"GENERATE_URL_4\",\"GENERATE_URL_5\",\"GENERATE_URL_6\"]; break\n        case \"SetTopic\": ids = [\"SETTOPIC_1\",\"SETTOPIC_2\",\"SETTOPIC_3\",\"SETTOPIC_4\",\"SETTOPIC_5\"]; break\n        case \"SwitchTopic\": ids = [\"SWITCHTOPIC_1\",\"SWITCHTOPIC_2\",\"SWITCHTOPIC_3\",\"SWITCHTOPIC_4\",\"SWITCHTOPIC_5\"]; break\n        case \"IngestKnowledge\": ids = [\"INGEST_1\",\"INGEST_2\",\"INGEST_3\",\"INGEST_4\",\"INGEST_5\"]; break\n        case \"AnalyseFile\": ids = [\"ANALYSE_1\",\"ANALYSE_2\",\"ANALYSE_3\",\"ANALYSE_4\",\"ANALYSE_5\",\"ANALYSE_6\"]; break\n        case \"GenerateCharts\": ids = [\"CHARTS_1\",\"CHARTS_2\",\"CHARTS_3\",\"CHARTS_4\",\"CHARTS_5\",\"CHARTS_6\"]; break\n        case \"think\": ids = [\"THINK_1\",\"THINK_2\",\"THINK_3\",\"THINK_4\",\"THINK_5\",\"THINK_6\"]; break\n        case \"ClarifyFromUser\": ids = [\"CLARIFY_1\",\"CLARIFY_2\",\"CLARIFY_3\",\"CLARIFY_4\",\"CLARIFY_5\",\"CLARIFY_6\"]; break\n        case \"PublishCitations\": ids = [\"CITATIONS_1\",\"CITATIONS_2\",\"CITATIONS_3\",\"CITATIONS_4\",\"CITATIONS_5\"]; break\n        case \"ReferFromKnowledge\": ids = [\"REFER_1\",\"REFER_2\",\"REFER_3\",\"REFER_4\",\"REFER_5\",\"REFER_6\"]; break\n        case \"WebSearch\": ids = [\"WEB_1\",\"WEB_2\",\"WEB_3\",\"WEB_4\",\"WEB_5\",\"WEB_6\"]; break\n        case \"InvokeAgent\": ids = [\"AGENT_1\",\"AGENT_2\",\"AGENT_3\",\"AGENT_4\",\"AGENT_5\",\"AGENT_6\"]; break\n    }\n\n    // Pick random template ID\n    String id = ids[new Random().nextInt(ids.size())]\n    String template = templates[id]\n\n    if (!ids) {\n        // no template found → fallback\n        return [\n            id        : \"FALLBACK_1\",\n            template  : templates[\"FALLBACK_1\"]\n        ]\n    }\n    \n    // Instead of replacing, just return structured info\n    return [\n        id        : id,\n        template  : template,\n        toolName  : tool,\n        topicName : toolInput.topicName ?: null,\n        agentName : toolInput.agentName ?: null\n    ]\n}\n\nString getThought(String llmResponse) {\n    Pattern thoughtPattern = ~/(?:Thought:)?([\\s\\S]*?)(?=\\n{1,}\\n{1,}Action:|\\n{1,}ActionInput:|\\n{0,}Final[\\s]*Answer:|\\n{1,}chunk[\\s]*Ids:|$)/\n    Pattern exactThoughtPattern = ~/Thought:([\\s\\S]*?)(?=\\n{1,}Thought:|\\n{1,}Action:|\\n{1,}ActionInput:|\\n{0,}Final[\\s]*Answer:|\\n{1,}chunk[\\s]*Ids:|$)/\n\n    Matcher thoughtMatch = thoughtPattern.matcher(llmResponse)\n    Matcher exactThoughtMatch = exactThoughtPattern.matcher(llmResponse)\n\n    String thought = null\n    String exactThought = null\n\n    if (thoughtMatch.find() && thoughtMatch.groupCount() >= 1) {\n        thought = thoughtMatch.group(1)?.trim()\n    }\n\n    if (exactThoughtMatch.find() && exactThoughtMatch.groupCount() >= 1) {\n        exactThought = exactThoughtMatch.group(1)?.trim()\n    }\n\n    if (exactThought != null && thought != null && thought.contains(\"Thought:\")) {\n        thought = exactThought\n    }\n    if(thought == \"\"){\n        thought = null\n    }\n    return thought\n}\n\nString getFinalAnswer(String llmResponse) {\n    Pattern finalAnswerPattern = ~/(?:Final[\\s]*Answer:)([\\s\\S]*?)(?=\\n{1,}Thought:|\\n{1,}Action:|\\n{1,}ActionInput:|\\n{1,}Final[\\s]*Answer:|\\n{1,}chunk[\\s]*Ids:|$)/\n    Matcher matcher = finalAnswerPattern.matcher(llmResponse)\n\n    if (matcher.find() && matcher.groupCount() >= 1) {\n        String ans = matcher.group(1).trim()\n        // cleanup dangling markdown bold markers\n        if (ans.indexOf(\"**\\n\") == 0)\n        ans = ans.replaceAll(/^\\*+/, \"\").replaceAll(/\\*+$/, \"\")\n        return ans\n    }\n\n    return null\n}\n\nList<Integer> parseCitations(String finalAnswer) {\n    if (!finalAnswer?.trim()) return []\n\n    List<Integer> chunkIds = []\n    Pattern pattern = Pattern.compile(/\\$\\$\\[(.*?)\\]\\$\\$/, Pattern.DOTALL)\n    Matcher matcher = pattern.matcher(finalAnswer)\n\n    while (matcher.find()) {\n        String matchContent = matcher.group(1)\n        for (String part : matchContent.split(',')) {\n            String trimmed = part.trim()\n            if (trimmed) {\n                try {\n                    chunkIds.add(Integer.parseInt(trimmed))\n                } catch (NumberFormatException ignore) {\n                    // skip unparsable numbers\n                }\n            }\n        }\n    }\n    return chunkIds.unique().sort()\n}\n\nList<Map<String, Object>> getToolsToExecute(Map<String, Object> toolMap,\n                                                   List<Object> requestedTools,\n                                                   String llmResponse,\n                                                   String agentId) {\n    List<Map<String, Object>> toExecute = []\n\n    for (Object r : requestedTools) {\n        Map<String, Object> req = safeMap(r)\n        String name = req[\"name\"]?.toString() ?: \"\"\n        Map<String, Object> selectedTool = safeMap(toolMap.get(name))\n\n        if (!selectedTool.isEmpty()) {\n            Object arguments = req[\"arguments\"]\n            Map<String, Object> parsedArgs = (arguments != null)\n                    ? (Map<String, Object>) com.unifyapps.infra.utils.JsonUtils.fromJson(arguments.toString(), Map.class)\n                    : new LinkedHashMap<String, Object>()\n\n            Map<String, Object> toolEntry = new LinkedHashMap<>()\n            toolEntry.put(\"name\", selectedTool[\"name\"])\n            toolEntry.put(\"id\", req[\"toolId\"] ?: UUID.randomUUID().toString()[0..22])\n            toolEntry.put(\"toolInput\", parsedArgs)\n            toolEntry.put(\"actionId\", selectedTool[\"id\"])\n            toolEntry.put(\"toolAdditional\", selectedTool[\"additional\"])\n            toExecute.add(toolEntry)\n        }\n    }\n\n    Pattern chunkIdsPattern = ~/chunk[\\s]*Ids:([\\s\\S]*?)(?=\\n{1,}Thought:|\\n{1,}Action:|\\n{1,}ActionInput:|\\n{1,}Final[\\s]*Answer:|\\n{1,}chunk[\\s]*Ids:|$)/\n    Matcher chunkIdsMatch = chunkIdsPattern.matcher(llmResponse)\n    String chunkIds = null\n\n    if (chunkIdsMatch.find() && chunkIdsMatch.groupCount() >= 1) {\n        chunkIds = chunkIdsMatch.group(1)?.trim()\n    }\n\n    if (chunkIds != null && chunkIds.length() > 0) {\n        Pattern digitPattern = ~/\\d+/\n        Matcher matcher = digitPattern.matcher(chunkIds)\n        List<Integer> numbers = []\n\n        while (matcher.find()) {\n            numbers.add(Integer.parseInt(matcher.group()))\n        }\n\n        String jsonStr = \"{\\\"chunkIds\\\":[\" + String.join(\",\", numbers.collect { it.toString() }) + \"]}\"\n        Map<String, Object> citationTool = new LinkedHashMap<>()\n        citationTool.put(\"name\", \"PublishCitations\")\n        citationTool.put(\"id\", \"PublishCitations\")\n        citationTool.put(\"actionId\",\"PublishCitations\")\n        citationTool.put(\"toolInput\", (Map<String, Object>) com.unifyapps.infra.utils.JsonUtils.fromJson(jsonStr, Map.class))\n        toExecute.add(citationTool)\n    }\n\n    return toExecute\n}\n\nMap<String, Object> getFormatErrorMsg() {\n    def defaultErrorMessage =\n            \"\"\"\n    You didn't use the right format. You MUST either use a tool (among the available ones), OR give the best final answer.Here is the expected format You must follow:\n    ```\n    Thought: <Should always think about what to do next. Use clear and simple language in Markdown format. Address your thoughts to the user in a conversational manner, referring to users as \\\"you\\\" rather than \\\"the user.\\\">\n    Tool Execution:Then execute a tool from the list provided to you except `publishCitations`.\n    ```\n    This Thought/Tool Execution process can repeat N times. Once you know the final answer, you must return the following format:\n    ```\n    Thought: I now can give a great answer\n    Final Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\\nTool Execution: Then execute the `publishCitations` tool if `ReferFromKnowledge` tool is used before.\n    ```\n    \"\"\"\n    String formatErrorMessage = binding.hasVariable(\"formatErrorMessage\")\n            ? binding.getVariable(\"formatErrorMessage\")\n            : null\n    return [\n            errorMessage: formatErrorMessage?:defaultErrorMessage\n    ]\n}\n\n\n// ==== Main Logic ====\n\nboolean useClarifyAsTool = true\n\nString llmResponse = binding.hasVariable(\"llmResponse\") ? binding.getVariable(\"llmResponse\") : \"\"\nString agentId = binding.hasVariable(\"agentId\") ? binding.getVariable(\"agentId\") : \"\"\nString thought = getThought(llmResponse)\nString finalAnswer = getFinalAnswer(llmResponse)\nString formatErrorMessage = binding.hasVariable(\"formatErrorMessage\")?binding.getVariable(\"formatErrorMessage\"):null\n\nMap<String, Object> toolMap = [:]\nObject collectSlotStatus = binding.hasVariable(\"collectSlotStatus\") ? binding.getVariable(\"collectSlotStatus\") : null\n\nif (binding.hasVariable(\"availableTools\")) {\n    List<Map<String, Object>> availableTools = (List<Map<String, Object>>) binding.getVariable(\"availableTools\")\n    for (Map<String, Object> t : availableTools) {\n        toolMap[t[\"name\"].toString().trim()] = t\n    }\n}\n\nList<Object> toolsToExecute = binding.hasVariable(\"toolsToExecute\") ? (List<Object>) binding.getVariable(\"toolsToExecute\") : []\nList<Map<String, Object>> toolsExecutionQueue = getToolsToExecute(toolMap, toolsToExecute, llmResponse, agentId)\nMap<String, Object> toolToExecute = toolsExecutionQueue ? toolsExecutionQueue[0] : null\n\nboolean isStaticThought = false \nMap<String, Object> thoughtMap = null \n\nif (toolToExecute == null || toolToExecute[\"actionId\"] == \"PublishCitations\") {\n    if (finalAnswer == null) {\n        if (thought == null) {\n            return getFormatErrorMsg()\n        } else {\n            if (!toolsToExecute.isEmpty()) {\n                String toolName = safeMap(toolsToExecute[0])[\"name\"] as String\n                return [\n                        errorMessage: toolName + \" is not a valid tool, carefully consider and use only if tool is present in the list of available tools or else provide the final answer if you are not sure about which tool to use \"\n                ]\n            }\n            return getFormatErrorMsg() \n            // finalAnswer = thought\n            // thought = null\n        }\n    } else if (!binding.hasVariable(\"triggeredByAgentWaitingInstanceId\")) {\n        thought = null\n    }\n    \n    if(finalAnswer != null) {\n        List<Integer> chunkIds = parseCitations(finalAnswer) \n        if(chunkIds.size() > 0){\n            toolsExecutionQueue.add([\n                name: \"PublishCitations\",\n                actionId : \"PublishCitations\",\n                id : UUID.randomUUID().toString()[0..22],\n                toolInput: [chunkIds: chunkIds]\n            ])\n        }\n    }\n} else {\n    if (finalAnswer != null) {\n        if (toolToExecute[\"actionId\"] != \"GenerateCharts\") {\n            toolToExecute = null\n        }\n        List<Integer> chunkIds = parseCitations(finalAnswer) \n        if(chunkIds.size() > 0){\n            toolsExecutionQueue.add([\n                name: \"PublishCitations\",\n                actionId : \"PublishCitations\",\n                id : UUID.randomUUID().toString()[0..22],\n                toolInput: [chunkIds: chunkIds]\n            ])\n        }\n        thought = null\n    } else if (toolToExecute[\"actionId\"] == \"Clarify\" &&\n            collectSlotStatus != \"COLLECTING\" &&\n            !useClarifyAsTool) {\n        Map<String, Object> toolInput = com.unifyapps.infra.utils.JsonUtils.fromJson(com.unifyapps.infra.utils.JsonUtils.toJson(toolToExecute[\"toolInput\"]), Map.class)\n        finalAnswer = toolInput[\"query\"] as String\n        toolToExecute = null\n    } else if (toolToExecute[\"actionId\"] == \"CollectSlot\") {\n        thought = null\n    } else if (thought == null) {\n        Map<String, Object> toolInput = com.unifyapps.infra.utils.JsonUtils.fromJson(com.unifyapps.infra.utils.JsonUtils.toJson(toolToExecute[\"toolInput\"]), Map.class)\n        thoughtMap = getStaticThought(toolToExecute[\"name\"] as String, toolInput,THOUGHT_TEMPLATES)\n        thought = thoughtMap != null ? thoughtMap[\"template\"] : null\n        isStaticThought = true\n    }\n}\n\nreturn [\n        thought        : thought,\n        thoughtMap     : thoughtMap,\n        isStaticThought: isStaticThought,\n        toolsToExecute : toolsExecutionQueue,\n        finalAnswer    : finalAnswer,\n        publishThought : thought != null && !thought.isEmpty(),\n]",
				"compile_static":true,
				"captureStdOutput":false,
				"parameters":{
					"llmResponse":"{{ YtaWZ.outputs.llmResponse }}",
					"agentId":"{{ YtaWZ.outputs.agentId }}",
					"collectSlotStatus":"{{ iw1RO.outputs.collectSlotInputs.status }}",
					"triggeredByAgentWaitingInstanceId":"{{ XUiha.outputs.properties.triggerDetails.triggeredByAgentDetails.waitingInstanceId }}",
					"formatErrorMessage":"{{ YtaWZ.outputs.errorMessage }}",
					"availableTools":{
						"ua:type":"mappedArray",
						"source":"{{ YtaWZ.outputs.availableTools }}",
						"items":"{{ YtaWZ.outputs.availableTools[0] }}"
					},
					"toolsToExecute":{
						"ua:type":"mappedArray",
						"items":{
							"name":"{{ YtaWZ.outputs.toolsToExecute[0].name }}",
							"arguments":"{{ YtaWZ.outputs.toolsToExecute[0].arguments }}",
							"toolId":"{{ YtaWZ.outputs.toolsToExecute[0].toolId }}"
						},
						"source":"{{ YtaWZ.outputs.toolsToExecute }}"
					}
				}
			},
			"skip":false,
			"subTitle":"validate and Extract Tool",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":439,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"n_3fPGV",
			"index":7,
			"inputs":{
				"filters":[
					{
						"property":"{{ _Rhwoj.outputs.result.isStaticThought }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"isStaticThought?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":452,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_3fPGV@NDWxv-1@y",
			"id":"n_nB6K9",
			"index":8,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"templatedValue":{
							"type":"string",
							"title":"Templated Value"
						},
						"staticThought":{
							"type":"string",
							"title":"Static Thought"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"thoughtMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Thought Map"
						}
					}
				},
				"code":"String resolveThoughtValue(Map<String, Object> thoughtMap) {\n    if (thoughtMap == null || !thoughtMap.containsKey(\"id\")) {\n        return null\n    }\n\n    String id = thoughtMap[\"id\"] as String\n\n    if (id.startsWith(\"SETTOPIC\") || id.startsWith(\"SWITCHTOPIC\")) {\n        return thoughtMap[\"topicName\"] as String\n    } else if (id.startsWith(\"INVOKEAGENT\")) {\n        return thoughtMap[\"agentName\"] as String\n    } else {\n        return thoughtMap[\"toolName\"] as String\n    }\n}\n\nif (!binding.hasVariable('thoughtMap')) {\n    return [\"templatedValue\": \"\", \"staticThought\": \"\"]\n}\n\ndef templatedValue = resolveThoughtValue(thoughtMap)\ndef staticThought = thoughtMap?.template ?: \"\"\n\nif (staticThought?.contains(\"{1}\")) {\n    staticThought = staticThought.replace(\"{1}\", templatedValue ?: \"\")\n}\n\nreturn [\"templatedValue\": templatedValue, \"staticThought\": staticThought]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"thoughtMap":"{{ _Rhwoj.outputs.result.thoughtMap }}"
				}
			},
			"skip":false,
			"subTitle":"Extract Templated Value",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":467,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_3fPGV@NDWxv-1@y",
			"id":"n_KCuYz",
			"index":9,
			"inputs":{
				"automationId":"68c6c5ca4735b46ff83ed947",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"labels":{
						"items":{
							"label":"{{ _Rhwoj.outputs.result.thoughtMap.id }}",
							"parameters":{
								"items":"{{ n_nB6K9.outputs.result.templatedValue }}",
								"ua:type":"mappedArray"
							}
						},
						"ua:type":"mappedArray"
					}
				}
			},
			"skip":false,
			"subTitle":"Translation LookUp",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":447,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_3fPGV@NDWxv-1@y",
			"id":"n_QRxXn",
			"index":10,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.translatedThought }}",
						"value":"=IF(ISBLANK({{ n_KCuYz.outputs.translatedTexts[0].translatedText }}), {{ n_nB6K9.outputs.result.staticThought }}, {{ n_KCuYz.outputs.translatedTexts[0].translatedText }})"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":447,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_3fPGV@NDWxv-1@n",
			"id":"_grBRf",
			"index":11,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.translatedThought }}",
						"value":"{{ _Rhwoj.outputs.result.thought }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":199,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"_vUw65",
			"index":12,
			"inputs":{
				"automationId":"67f439a9faf9a1695c2e7fa9",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"aiAgentId":"{{ YtaWZ.outputs.agentId }}",
					"answer":"{{ 6qehR.outputs.translatedThought }}",
					"caseId":"{{ YtaWZ.outputs.caseId }}"
				}
			},
			"skip":false,
			"subTitle":"Guardrail On Thought",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":161,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"_7Xfi4",
			"index":13,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.finalAnswer }}",
						"value":"{{ _Rhwoj.outputs.result.finalAnswer }}"
					},
					{
						"source":"{{ 6qehR.outputs.thought }}",
						"value":"{{ _vUw65.outputs.response }}"
					},
					{
						"source":"{{ 6qehR.outputs.publishThoughts }}",
						"value":"{{ _Rhwoj.outputs.result.publishThought }}"
					},
					{
						"source":"{{ 6qehR.outputs.errMsg }}",
						"value":"{{ _Rhwoj.outputs.result.errorMessage }}"
					},
					{
						"source":"{{ 6qehR.outputs.tools }}",
						"value":{
							"ua:type":"mappedArray",
							"items":{
								"toolId":"{{ _Rhwoj.outputs.result.toolsToExecute[0].id }}",
								"toolName":"{{ _Rhwoj.outputs.result.toolsToExecute[0].name }}",
								"toolInputs":"{{ _Rhwoj.outputs.result.toolsToExecute[0].toolInput }}",
								"actionId":"{{ _Rhwoj.outputs.result.toolsToExecute[0].actionId }}",
								"toolAdditional":"{{ _Rhwoj.outputs.result.toolsToExecute[0].toolAdditional }}"
							},
							"source":"{{ _Rhwoj.outputs.result.toolsToExecute }}"
						}
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":153,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"5yZWr",
			"index":14,
			"inputs":{
				"filters":[
					{
						"property":"{{ 6qehR.outputs.finalAnswer }}",
						"filter":{
							"operator":"EXISTS"
						}
					},
					{
						"property":"=ISBLANK({{ 6qehR.outputs.finalAnswer }})",
						"filter":{
							"operator":"EQUAL",
							"value":"false"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"finalAnswer?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":167,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5yZWr@NDWxv-1@y",
			"id":"6PcYP",
			"index":15,
			"inputs":{
				"automationId":"67deb2086ff2a87705083ae4",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"caseId":"{{ YtaWZ.outputs.caseId }}",
					"agentId":"{{ YtaWZ.outputs.agentId }}",
					"finalAnswer":"{{ 6qehR.outputs.finalAnswer }}"
				}
			},
			"skip":false,
			"subTitle":"RunthroughGaurdrail",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":156,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5yZWr@NDWxv-1@y",
			"id":"cw2C4",
			"index":16,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.finalAnswer }}",
						"value":"{{ 6PcYP.outputs.finalAnswer }}"
					}
				]
			},
			"skip":false,
			"subTitle":"update final Answer",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":15,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"NIaSh",
			"index":17,
			"inputs":{
				"filters":[
					{
						"property":"{{ XUiha.outputs.properties.triggerDetails.triggeredByAgentDetails.waitingInstanceId }}",
						"filter":{
							"operator":"EXISTS"
						}
					},
					{
						"property":"{{ 6qehR.outputs.tools[0].toolId }}",
						"filter":{
							"operator":"EQUAL",
							"value":"PublishCitations"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":15,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NIaSh@NDWxv-1@y",
			"id":"Ha7mh",
			"index":18,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.finalAnswer }}",
						"value":"{{ 6qehR.outputs.finalAnswer }} these are the citation inputs , make sure to use these citations when generating final answer strictly \n{{ 6qehR.outputs.tools[0].toolId }}+{{ 6qehR.outputs.tools[0].toolName }}+{{ 6qehR.outputs.tools[0].toolInputs }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.result.thought",
					"root.result.publishThought",
					"root.result.toolId",
					"root.result.finalAnswer",
					"root.result.errorMessage"
				]
			},
			"context":{
				"appName":"callables",
				"resourceVersion":159,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"rFaF6",
			"index":19,
			"inputs":{
				"result":{
					"finalAnswer":"{{ 6qehR.outputs.finalAnswer }}",
					"thought":"{{ 6qehR.outputs.thought }}",
					"publishThought":"{{ 6qehR.outputs.publishThoughts }}",
					"errorMessage":"{{ 6qehR.outputs.errMsg }}",
					"tools":{
						"source":"{{ 6qehR.outputs.tools }}",
						"ua:type":"mappedArray",
						"items":{
							"toolId":"{{ 6qehR.outputs.tools[0].toolId }}",
							"toolName":"{{ 6qehR.outputs.tools[0].toolName }}",
							"toolInputs":"{{ 6qehR.outputs.tools[0].toolInputs }}",
							"actionId":"{{ 6qehR.outputs.tools[0].actionId }}",
							"toolAdditional":"{{ 6qehR.outputs.tools[0].toolAdditional }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":311,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"AI Agent",
		"Internal"
	],
	"version":96
}