{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1758007276506,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760440658718,
		"deployedBy":0,
		"deployedDefinitionId":"68ee3152b01973125718495d",
		"status":"DEPLOYED",
		"version":48,
		"workflowVersion":63
	},
	"edges":[
		{
			"fromNodeId":"n_6fZz0",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ImyQO",
			"type":"next"
		},
		{
			"fromNodeId":"n_ImyQO",
			"priority":0,
			"skip":false,
			"toNodeId":"n_EF0e9",
			"type":"next"
		},
		{
			"fromNodeId":"n_EF0e9",
			"priority":0,
			"skip":false,
			"toNodeId":"n_I9n1B",
			"type":"next"
		},
		{
			"fromNodeId":"n_I9n1B",
			"priority":0,
			"skip":false,
			"toNodeId":"n_mK9wi",
			"type":"next"
		},
		{
			"fromNodeId":"n_mK9wi",
			"priority":0,
			"skip":false,
			"toNodeId":"n_13CBk",
			"type":"next"
		},
		{
			"fromNodeId":"n_13CBk",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_JTvn3",
			"type":"if"
		},
		{
			"fromNodeId":"n_JTvn3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ALzWF",
			"type":"next"
		},
		{
			"fromNodeId":"n_ALzWF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_jJoaR",
			"type":"next"
		},
		{
			"fromNodeId":"n_13CBk",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"n_jJoaR",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"68c079ef9bd2bb11959f7e1b",
	"lastModifiedBy":0,
	"lcName":"eval | metrics | calculate evaluation scale for derived metric",
	"modifiedTime":1760440847420,
	"name":"Eval | Metrics | Calculate Evaluation Scale for Derived metric",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":447,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Qy9Vx-1",
			"id":"n_6fZz0",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"evaluationScale":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Evaluation Scale"
						},
						"evaluationParameters":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Evaluation Parameters"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"formula":{
							"type":"string",
							"title":"Formula"
						},
						"base_metrics":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Base Metrics"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Qy9Vx-1",
			"id":"n_ImyQO",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"metricIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Metric Ids"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"formula":{
							"type":"string",
							"title":"Formula"
						}
					}
				},
				"code":"def extractIds(String formula) {\n    // Use findAll to capture all matching groups inside << >>\n    def matches = formula.findAll(/<<\\s*(.*?)\\s*>>/) { fullMatch, group1 -> \n        return group1\n    }\n    return matches\n}\n\n// Example usage:\ndef formula = binding.hasVariable('formula') ? formula : 0\ndef ids = extractIds(formula)\nreturn [\"metricIds\" : ids]\n",
				"compile_static":false,
				"parameters":{
					"formula":"=SUBSTITUTE(SUBSTITUTE({{ n_6fZz0.outputs.formula }},\"{\",\"<\"),\"}\",\">\")"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":634,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Qy9Vx-1",
			"id":"n_EF0e9",
			"index":3,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"IN",
								"value":"{{ n_ImyQO.outputs.result.metricIds }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"e_ai_evaluation_metric",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"translationsOption":"DEFAULT",
				"page":{
					"paginateBy":"OFFSET",
					"limit":20
				},
				"numberOfRecordsToFetch":"MULTIPLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.metrics.items.id",
					"root.parameters.metrics.items.evaluationScale.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Qy9Vx-1",
			"id":"n_I9n1B",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"minValue":{
							"type":"number",
							"title":"Min Value"
						},
						"maxValue":{
							"type":"number",
							"title":"Max Value"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"formula":{
							"type":"string",
							"title":"Formula"
						},
						"metrics":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"id":{
										"type":"string",
										"title":"Id"
									},
									"evaluationScale":{
										"type":"array",
										"items":{
											"type":"number"
										},
										"title":"Evaluation Scale"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Metrics"
						}
					}
				},
				"code":"class ExpressionParser {\n    String input\n    int pos = 0\n    Map<String, Double> variables = [:]\n\n    ExpressionParser(String input, Map<String, Double> variables = [:]) {\n        // Remove whitespace for easier parsing\n        this.input = input.replaceAll(/\\s+/, \"\")\n        this.variables = variables\n    }\n\n    double parse() {\n        def value = parseExpression()\n        if (pos < input.length()) {\n            throw new RuntimeException(\"Unexpected character at position $pos: '${input.charAt(pos)}'\")\n        }\n        return value\n    }\n\n    private double parseExpression() {\n        double value = parseTerm()\n        while (pos < input.length()) {\n            char op = input.charAt(pos)\n            if (op == '+' || op == '-') {\n                pos++\n                double term = parseTerm()\n                if (op == '+') value += term else value -= term\n            } else break\n        }\n        return value\n    }\n\n    private double parseTerm() {\n        double value = parseFactor()\n        while (pos < input.length()) {\n            char op = input.charAt(pos)\n            if (op == '*' || op == '/') {\n                pos++\n                double factor = parseFactor()\n                if (op == '*') {\n                    value *= factor\n                } else {\n                    if (factor == 0) throw new RuntimeException(\"Division by zero at position $pos\")\n                    value /= factor\n                }\n            } else break\n        }\n        return value\n    }\n\n    private double parseFactor() {\n        double value = parseUnary()\n        while (pos < input.length() && input.charAt(pos) == '^') {\n            pos++\n            double exponent = parseUnary()\n            value = Math.pow(value, exponent)\n        }\n        return value\n    }\n\n    private double parseUnary() {\n        if (pos < input.length()) {\n            char c = input.charAt(pos)\n            if (c == '+') { pos++; return parseUnary() }\n            if (c == '-') { pos++; return -parseUnary() }\n        }\n        return parsePrimary()\n    }\n\n    private double parsePrimary() {\n        if (pos >= input.length()) throw new RuntimeException(\"Unexpected end of expression\")\n\n        char c = input.charAt(pos)\n\n        if (c == '(') {\n            pos++\n            double value = parseExpression()\n            if (pos >= input.length() || input.charAt(pos) != ')') {\n                throw new RuntimeException(\"Missing closing parenthesis at position $pos\")\n            }\n            pos++\n            return value\n        }\n\n        // Handle <<var>> style placeholders\n        if (c == '<' && pos + 1 < input.length() && input.charAt(pos + 1) == '<') {\n            int startVar = pos + 2\n            int endVar = input.indexOf('>>', startVar)\n            if (endVar == -1) throw new RuntimeException(\"Unclosed variable at $pos\")\n            String varName = input.substring(startVar, endVar).trim()\n            pos = endVar + 2\n            if (!variables.containsKey(varName)) throw new RuntimeException(\"Unknown variable: $varName\")\n            return variables[varName]\n        }\n\n        // Parse numbers\n        int startNum = pos\n        boolean dot = false\n        while (pos < input.length()) {\n            char ch = input.charAt(pos)\n            if (ch >= '0' && ch <= '9') {\n                pos++\n            } else if (ch == '.' && !dot) {\n                dot = true\n                pos++\n            } else break\n        }\n        if (startNum == pos) throw new RuntimeException(\"Unexpected char at $pos: '${input.charAt(pos)}'\")\n        return Double.parseDouble(input.substring(startNum, pos))\n    }\n}\n\n\n// Generate corner cases for ranges\ndef generateCorners(List vars, Map<String, List<Double>> ranges) {\n    if (vars.isEmpty()) return [[:]]\n    def first = vars[0]\n    def rest = vars.drop(1)\n    def restCorners = generateCorners(rest, ranges)\n    def out = []\n    ranges[first].each { val ->\n        restCorners.each { rc ->\n            def copy = rc.clone()\n            copy[first] = val\n            out << copy\n        }\n    }\n    return out\n}\n\ndef getOverallEvaluationScale(String formula, List metrics) {\n    // Remove leading \"=\" and any spaces after it (handles \"= (...)\" and \"=...\")\n    formula = formula.replaceFirst(/^\\=\\s*/, \"\")\n\n    // Extract IDs inside << >> (preserve order, unique)\n    def ids = formula.findAll(/<<\\s*(.*?)\\s*>>/) { full, inner -> inner }\n    ids = ids.collect { it }.unique()\n\n    // If no variables present, evaluate numeric formula directly\n    if (ids.isEmpty()) {\n        try {\n            def parser = new ExpressionParser(formula, [:])\n            def val = parser.parse()\n            return [minValue: val, maxValue: val]\n        } catch (Exception e) {\n            // If parse fails (e.g. divide by zero or malformed), return 0,0\n            return [minValue: 0, maxValue: 0]\n        }\n    }\n\n    // Build ranges map (ensure doubles)\n    def ranges = [:]\n    ids.each { id ->\n        def metric = metrics.find { it.id == id }\n        if (metric && metric.evaluationScale && metric.evaluationScale.size() >= 2) {\n            ranges[id] = [metric.evaluationScale[0] as Double, metric.evaluationScale[1] as Double]\n        } else {\n            ranges[id] = [0d, 0d]\n        }\n    }\n\n    def corners = generateCorners(ids, ranges)\n\n    double minResult = Double.POSITIVE_INFINITY\n    double maxResult = Double.NEGATIVE_INFINITY\n\n    corners.each { varAssign ->\n        try {\n            def parser = new ExpressionParser(formula, varAssign)\n            def val = parser.parse()\n            if (val < minResult) minResult = val\n            if (val > maxResult) maxResult = val\n        } catch (Exception e) {\n            // skip invalid evaluations (like division by zero)\n        }\n    }\n\n    if (minResult == Double.POSITIVE_INFINITY) minResult = 0\n    if (maxResult == Double.NEGATIVE_INFINITY) maxResult = 0\n\n    return [minValue: minResult, maxValue: maxResult]\n}\n\ndef formula = binding.hasVariable('formula') ? formula : \"\";\ndef metrics = binding.hasVariable('metrics') ? metrics : [];\nreturn getOverallEvaluationScale(formula, metrics)\n",
				"compile_static":false,
				"parameters":{
					"formula":"=SUBSTITUTE(SUBSTITUTE({{ n_6fZz0.outputs.formula }},\"{\",\"<\"),\"}\",\">\")",
					"metrics":{
						"source":"{{ n_EF0e9.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":{
							"id":"{{ n_EF0e9.outputs.objects[0].id }}",
							"evaluationScale":{
								"source":"{{ n_EF0e9.outputs.objects[0].properties.evaluationScale }}",
								"ua:type":"mappedArray",
								"items":"{{ n_EF0e9.outputs.objects[0].properties.evaluationScale[0] }}"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Qy9Vx-1",
			"id":"n_mK9wi",
			"index":5,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"evaluationScale":{
							"type":"array",
							"items":{
								"type":"number"
							},
							"title":"Evaluation Scale"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"minValue":{
							"type":"number",
							"title":"Min Value"
						},
						"maxValue":{
							"type":"number",
							"title":"Max Value"
						}
					}
				},
				"code":"def clampAndRound(value) {\n    def nonNegative = Math.max(0, value)     // replace negatives with 0\n    return Math.round(nonNegative) as int    // round to nearest integer\n}\n\ndef minValue = binding.hasVariable('minValue') ? minValue : 0;\ndef maxValue = binding.hasVariable('maxValue') ? maxValue : 0;\ndef evaluationScale = []\nevaluationScale.add(clampAndRound(minValue));\nevaluationScale.add(clampAndRound(maxValue));\n\nreturn [evaluationScale : evaluationScale]\n",
				"compile_static":false,
				"parameters":{
					"minValue":"{{ n_I9n1B.outputs.result.minValue }}",
					"maxValue":"{{ n_I9n1B.outputs.result.maxValue }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":439,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Qy9Vx-1",
			"id":"n_13CBk",
			"index":6,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_6fZz0.outputs.base_metrics }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":634,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_13CBk@_Qy9Vx-1@y",
			"id":"n_JTvn3",
			"index":7,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"IN",
								"value":"{{ n_6fZz0.outputs.base_metrics }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"e_ai_evaluation_metric",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"translationsOption":"DEFAULT",
				"page":{
					"paginateBy":"OFFSET",
					"limit":200
				},
				"numberOfRecordsToFetch":"MULTIPLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Fetch all Base metircs",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.items.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_13CBk@_Qy9Vx-1@y",
			"id":"n_ALzWF",
			"index":8,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"evaluationParameters":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Evaluation Parameters"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"items":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Items"
						}
					}
				},
				"code":"def items = binding.hasVariable('items') ? binding.getVariable('items') : []\n\nif (!items) {\n    return [evaluationParameters: []]\n}\n\n// Collect evaluationParameters from each object and flatten them into one list\ndef allParams = items.collectMany { it.properties.evaluationParameters ?: [] }\n\nreturn [evaluationParameters: allParams.unique()]\n",
				"compile_static":false,
				"parameters":{
					"items":{
						"source":"{{ n_JTvn3.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ n_JTvn3.outputs.objects[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Get Distinct Evaluation parameters",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":457,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Qy9Vx-1",
			"id":"n_jJoaR",
			"index":9,
			"inputs":{
				"result":{
					"evaluationScale":{
						"source":"{{ n_mK9wi.outputs.result.evaluationScale }}",
						"ua:type":"mappedArray",
						"items":"{{ n_mK9wi.outputs.result.evaluationScale[0] }}"
					},
					"evaluationParameters":{
						"source":"{{ n_ALzWF.outputs.result.evaluationParameters }}",
						"ua:type":"mappedArray",
						"items":"{{ n_ALzWF.outputs.result.evaluationParameters[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":-1,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":66
}