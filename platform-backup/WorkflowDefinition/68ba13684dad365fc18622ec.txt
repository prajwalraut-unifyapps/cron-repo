{
	"appsUsed":[
		
	],
	"createdTime":1759606163928,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759606811541,
		"deployedBy":33404,
		"deployedDefinitionId":"68e1781bc05e7f278914c979",
		"status":"DEPLOYED",
		"version":4,
		"workflowVersion":72
	},
	"edges":[
		{
			"fromNodeId":"n_JHETh",
			"priority":0,
			"skip":false,
			"toNodeId":"n_F8fIu",
			"type":"next"
		},
		{
			"fromNodeId":"n_F8fIu",
			"priority":0,
			"skip":false,
			"toNodeId":"_9KdQA",
			"type":"next"
		},
		{
			"fromNodeId":"_9KdQA",
			"priority":0,
			"skip":false,
			"toNodeId":"n_aTuRu",
			"type":"next"
		},
		{
			"fromNodeId":"n_aTuRu",
			"priority":0,
			"skip":false,
			"toNodeId":"n_7Gxqt",
			"type":"next"
		},
		{
			"fromNodeId":"n_7Gxqt",
			"priority":0,
			"skip":false,
			"toNodeId":"n_quSOY",
			"type":"next"
		}
	],
	"id":"68ba13684dad365fc18622ec",
	"lastModifiedBy":30179,
	"lcName":"oman | provider search | hospital tab",
	"modifiedTime":1760614873332,
	"name":"Oman | Provider Search | Hospital Tab",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":12,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TTYrf-1",
			"id":"n_JHETh",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"totalRecords"
					],
					"properties":{
						"result":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"id":{
										"type":"string",
										"title":"id"
									},
									"t_1":{
										"type":"string",
										"title":"t_1"
									},
									"t_2":{
										"type":"string",
										"title":"t_2"
									},
									"location":{
										"type":"string",
										"title":"location"
									},
									"location_id":{
										"type":"string",
										"title":"location_id"
									},
									"FeaturedProvider":{
										"type":"string",
										"title":"FeaturedProvider"
									},
									"Country":{
										"type":"string",
										"title":"Country"
									},
									"Youtube":{
										"type":"string",
										"title":"Youtube"
									},
									"City":{
										"type":"string",
										"title":"City"
									},
									"Contact_Number_1":{
										"type":"integer",
										"title":"Contact Number 1"
									},
									"Provider_Name":{
										"type":"string",
										"title":"Provider Name"
									},
									"mapsURL":{
										"type":"string",
										"title":"mapsURL"
									},
									"Copay":{
										"type":"string",
										"title":"Copay"
									},
									"Facebook":{
										"type":"string",
										"title":"Facebook"
									},
									"Email":{
										"type":"string",
										"title":"Email"
									},
									"Speciality_details":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"Speciality_details"
									},
									"ProviderType":{
										"type":"string",
										"title":"ProviderType"
									},
									"Governarate_Area":{
										"type":"string",
										"title":"Governarate_Area"
									},
									"Band":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"Band"
									},
									"Longitude":{
										"type":"number",
										"title":"Longitude"
									},
									"Speciality":{
										"type":"string",
										"title":"Speciality"
									},
									"weekdayDescriptions":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"day":{
													"type":"string",
													"title":"day"
												},
												"time":{
													"type":"string",
													"title":"time"
												}
											},
											"additionalProperties":false
										},
										"title":"weekdayDescriptions"
									},
									"ProviderID":{
										"type":"integer",
										"title":"ProviderID"
									},
									"WebsiteLink":{
										"type":"string",
										"title":"WebsiteLink"
									},
									"Address":{
										"type":"string",
										"title":"Address"
									},
									"Instagram":{
										"type":"string",
										"title":"Instagram"
									},
									"Latitude":{
										"type":"number",
										"title":"Latitude"
									},
									"ContactNumber2":{
										"type":"integer",
										"title":"ContactNumber2"
									},
									"openNow":{
										"type":"string",
										"title":"openNow"
									},
									"medicineDelivery":{
										"type":"string",
										"title":"medicineDelivery"
									},
									"favorite":{
										"type":"string",
										"title":"Favorite"
									},
									"distance_km":{
										"type":"string",
										"title":"Distance Km"
									},
									"Deleted_fav":{
										"type":"string",
										"title":"Deleted Fav"
									},
									"TotalCount":{
										"type":"number",
										"title":"Total Count"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"result"
						},
						"totalRecords":{
							"type":"string",
							"title":"Total Records"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"band":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Band"
						},
						"provider_type":{
							"type":"string",
							"title":"Provider Type"
						},
						"city":{
							"type":"string",
							"title":"City"
						},
						"governorte":{
							"type":"string",
							"title":"Governorte"
						},
						"Country":{
							"type":"string",
							"title":"Country"
						},
						"Area":{
							"type":"string",
							"title":"Area"
						},
						"speciality":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Speciality"
						},
						"opening_hrs":{
							"type":"string",
							"title":"Opening Hrs"
						},
						"search":{
							"type":"string",
							"title":"Search"
						},
						"latitude":{
							"type":"number",
							"title":"Latitude"
						},
						"longitude":{
							"type":"number",
							"title":"Longitude"
						},
						"day":{
							"type":"string",
							"title":"Day"
						},
						"time":{
							"type":"string",
							"title":"Time"
						},
						"tab":{
							"type":"string",
							"title":"Tab"
						},
						"member_id":{
							"type":"string",
							"title":"Member Id"
						},
						"range_start":{
							"type":"string",
							"title":"Range start"
						},
						"range_end":{
							"type":"string",
							"title":"Range End"
						},
						"pageSize":{
							"type":"number",
							"title":"Page Size"
						},
						"offset":{
							"type":"number",
							"title":"Offset"
						},
						"currentPage":{
							"type":"number",
							"title":"Current Page"
						},
						"total":{
							"type":"number",
							"title":"Total"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"analytics_by_unifyapps",
				"resourceVersion":110,
				"resourceName":"analytics_by_unifyapps_execute_query",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TTYrf-1",
			"id":"n_F8fIu",
			"index":2,
			"inputs":{
				"outputSchema":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"result":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"Address":{
										"type":"string",
										"title":"Address"
									},
									"City":{
										"type":"string",
										"title":"City"
									},
									"ContactNumber2":{
										"type":"integer",
										"title":"ContactNumber2"
									},
									"Contact_Number_1":{
										"type":"integer",
										"title":"Contact_Number_1"
									},
									"Copay":{
										"type":"string",
										"title":"Copay"
									},
									"Country":{
										"type":"string",
										"title":"Country"
									},
									"Deleted_fav":{
										"type":"boolean",
										"title":"Deleted_fav"
									},
									"Email":{
										"type":"string",
										"title":"Email"
									},
									"Facebook":{
										"type":"string",
										"title":"Facebook"
									},
									"FeaturedProvider":{
										"type":"boolean",
										"title":"FeaturedProvider"
									},
									"Governarate_Area":{
										"type":"string",
										"title":"Governarate_Area"
									},
									"Instagram":{
										"type":"string",
										"title":"Instagram"
									},
									"Latitude":{
										"type":"number",
										"title":"Latitude"
									},
									"Longitude":{
										"type":"number",
										"title":"Longitude"
									},
									"ProviderID":{
										"type":"integer",
										"title":"ProviderID"
									},
									"ProviderType":{
										"type":"string",
										"title":"ProviderType"
									},
									"Provider_Name":{
										"type":"string",
										"title":"Provider_Name"
									},
									"Speciality":{
										"type":"string",
										"title":"Speciality"
									},
									"TotalCount":{
										"type":"integer",
										"title":"TotalCount"
									},
									"WebsiteLink":{
										"type":"string",
										"title":"WebsiteLink"
									},
									"Youtube":{
										"type":"string",
										"title":"Youtube"
									},
									"distance_km":{
										"type":"integer",
										"title":"distance_km"
									},
									"id":{
										"type":"string",
										"title":"id"
									},
									"location":{
										"type":"string",
										"title":"location"
									},
									"location_id":{
										"type":"string",
										"title":"location_id"
									},
									"mapsURL":{
										"type":"string",
										"title":"mapsURL"
									},
									"medicineDelivery":{
										"type":"string",
										"title":"medicineDelivery"
									},
									"openNow":{
										"type":"boolean",
										"title":"openNow"
									},
									"t_1":{
										"type":"string",
										"title":"t_1"
									},
									"t_2":{
										"type":"string",
										"title":"t_2"
									}
								},
								"additionalProperties":false
							},
							"title":"result"
						},
						"totalRecords":{
							"type":"integer",
							"title":"totalRecords"
						}
					}
				},
				"query":"SELECT\n    np._pr_providerid AS ProviderID,\n    np._pr_providertype AS ProviderType,\n    np._pr_providername AS Provider_Name,\n    np._pr_address AS Address,\n    np._pr_city AS City,\n    np._pr_country AS Country,\n    np._pr_governarate_area AS Governarate_Area,\n    np._pr_contactnumber AS Contact_Number_1,\n    np._pr_contactnumber2 AS ContactNumber2,\n    np._pr_websitelink AS WebsiteLink,\n    np._pr_longitude AS Longitude,\n    np._pr_latitude AS Latitude,\n    np._pr_speciality AS Speciality,\n    np._pr_copay AS Copay,\n    np._pr_featuredprovider AS FeaturedProvider,\n    np._pr_email AS Email,\n    np._pr_facebook AS Facebook,\n    np._pr_youtube AS Youtube,\n    np._pr_instagram AS Instagram,\n    np._pr_mapsurl AS MapsURL,\n    np._pr_medicinedelivery AS MedicineDelivery,\n    np._pr_opennow AS OpenNow,\n    tf._pr_deleted AS Deleted_Fav,\n    ws._pr_day_of_week AS Day,\n    ws._pr_open_time AS Open_Time,\n    ws._pr_close_time AS Close_Time,\n    ws._pr_is_closed AS Is_Closed,\n   6371 * 2 * ASIN(\n    SQRT(\n        POW(SIN(RADIANS((np._pr_latitude - COALESCE(NULLIF('{{ n_JHETh.outputs.latitude }}', ''), 0)) / 2)), 2) +\n        COS(RADIANS(COALESCE(NULLIF('{{ n_JHETh.outputs.latitude }}', ''), 0))) *\n        COS(RADIANS(np._pr_latitude)) *\n        POW(SIN(RADIANS((np._pr_longitude - COALESCE(NULLIF('{{ n_JHETh.outputs.longitude }}', ''), 0)) / 2)), 2)\n    )\n) AS Distance_km\n\nFROM ENTITY_oman_network_providers np\nLEFT JOIN ENTITY_test tf\n    ON tf._pr_providerid = np._pr_providerid\n   AND tf._pr_member_id = '{{ n_JHETh.outputs.member_id }}'\nLEFT JOIN ENTITY_oman_network_providers_weekday_schedule ws\n    ON ws._pr_provider_id = np._pr_providerid\n\nWHERE 1 = 1\n    AND ('{{ n_JHETh.outputs.band }}' IS NULL OR '{{ n_JHETh.outputs.band }}' = '' OR ARRAY_CONTAINS(np._pr_band, '{{ n_JHETh.outputs.band }}'))\n    AND ('{{ n_JHETh.outputs.provider_type }}' IS NULL OR '{{ n_JHETh.outputs.provider_type }}' = '' OR LOWER(np._pr_providertype) = LOWER('{{ n_JHETh.outputs.provider_type }}'))\n    AND ('{{ n_JHETh.outputs.city }}' IS NULL OR '{{ n_JHETh.outputs.city }}' = '' OR LOWER(np._pr_city) = LOWER('{{ n_JHETh.outputs.city }}'))\n    AND ('{{ n_JHETh.outputs.Area }}' IS NULL OR '{{ n_JHETh.outputs.Area }}' = '' OR LOWER(np._pr_governarate_area) = LOWER('{{ n_JHETh.outputs.Area }}'))\n    AND ('{{ n_JHETh.outputs.Country }}' IS NULL OR '{{ n_JHETh.outputs.Country }}' = '' OR LOWER(np._pr_country) = LOWER('{{ n_JHETh.outputs.Country }}'))\n    AND ('{{ n_JHETh.outputs.speciality }}' IS NULL OR '{{ n_JHETh.outputs.speciality }}' = '' OR LOWER(np._pr_speciality) LIKE LOWER('%{{ n_JHETh.outputs.speciality }}%'))\n    AND ('{{ n_JHETh.outputs.search }}' IS NULL OR '{{ n_JHETh.outputs.search }}' = '' OR LOWER(np._pr_providername) LIKE LOWER('%{{ n_JHETh.outputs.search }}%') OR LOWER(np._pr_speciality) LIKE LOWER('%{{ n_JHETh.outputs.search }}%'))\n    AND ('{{ n_JHETh.outputs.tab }}' IS NULL OR '{{ n_JHETh.outputs.tab }}' = '' OR LOWER(np._pr_providertype) = LOWER('{{ n_JHETh.outputs.tab }}'))\n    AND ('{{ n_JHETh.outputs.day }}' IS NULL OR '{{ n_JHETh.outputs.day }}' = '' OR LOWER(ws._pr_day_of_week) = LOWER('{{ n_JHETh.outputs.day }}'))\n    AND ('{{ n_JHETh.outputs.time }}' IS NULL OR '{{ n_JHETh.outputs.time }}' = '' OR (ws._pr_is_closed IS NULL OR ws._pr_is_closed = 'false') AND '{{ n_JHETh.outputs.time }}' BETWEEN ws._pr_open_time AND ws._pr_close_time)\n    AND (\n    ('{{ n_JHETh.outputs.range_start }}' IS NULL OR '{{ n_JHETh.outputs.range_start }}' = '' OR\n        6371 * 2 * ASIN(\n            SQRT(\n                POW(SIN(RADIANS((np._pr_latitude - COALESCE(NULLIF('{{ n_JHETh.outputs.latitude }}', ''), 0)) / 2)), 2) +\n                COS(RADIANS(COALESCE(NULLIF('{{ n_JHETh.outputs.latitude }}', ''), 0))) *\n                COS(RADIANS(np._pr_latitude)) *\n                POW(SIN(RADIANS((np._pr_longitude - COALESCE(NULLIF('{{ n_JHETh.outputs.longitude }}', ''), 0)) / 2)), 2)\n            )\n        ) >= COALESCE('{{ n_JHETh.outputs.range_start }}', 0)\n    )\n    AND\n    ('{{ n_JHETh.outputs.range_end }}' IS NULL OR '{{ n_JHETh.outputs.range_end }}' = '' OR\n        6371 * 2 * ASIN(\n            SQRT(\n                POW(SIN(RADIANS((np._pr_latitude - COALESCE(NULLIF('{{ n_JHETh.outputs.latitude }}', ''), 0)) / 2)), 2) +\n                COS(RADIANS(COALESCE(NULLIF('{{ n_JHETh.outputs.latitude }}', ''), 0))) *\n                COS(RADIANS(np._pr_latitude)) *\n                POW(SIN(RADIANS((np._pr_longitude - COALESCE(NULLIF('{{ n_JHETh.outputs.longitude }}', ''), 0)) / 2)), 2)\n            )\n        ) <= COALESCE('{{ n_JHETh.outputs.range_end }}', 999999)\n    )\n)\nORDER BY\n    np._pr_featuredprovider DESC,\n    Distance_km ASC,\n    np._pr_providername ASC\n\nLIMIT {{ n_JHETh.outputs.pageSize }} OFFSET {{ n_JHETh.outputs.offset }};",
				"group":"ENTITY_REPORTING"
			},
			"skip":true,
			"subTitle":"Analytics by UnifyApps",
			"title":"Execute Analytics SQL Query",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"analytics_by_unifyapps",
				"resourceVersion":110,
				"resourceName":"analytics_by_unifyapps_execute_query",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TTYrf-1",
			"id":"_9KdQA",
			"index":3,
			"inputs":{
				"outputSchema":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"columns":{
							"type":"object",
							"properties":{
								"Email":{
									"type":"string",
									"title":"Email"
								},
								"Address":{
									"type":"string",
									"title":"Address"
								},
								"FeaturedProvider":{
									"type":"boolean",
									"title":"FeaturedProvider"
								},
								"WebsiteLink":{
									"type":"string",
									"title":"WebsiteLink"
								},
								"Latitude":{
									"type":"number",
									"title":"Latitude"
								},
								"Provider_Name":{
									"type":"string",
									"title":"Provider_Name"
								},
								"Governarate_Area":{
									"type":"string",
									"title":"Governarate_Area"
								},
								"Close_Time":{
									"type":"string",
									"title":"Close_Time"
								},
								"Youtube":{
									"type":"string",
									"title":"Youtube"
								},
								"Facebook":{
									"type":"string",
									"title":"Facebook"
								},
								"MapsURL":{
									"type":"string",
									"title":"MapsURL"
								},
								"ProviderID":{
									"type":"string",
									"title":"ProviderID"
								},
								"MedicineDelivery":{
									"type":"string",
									"title":"MedicineDelivery"
								},
								"OpenNow":{
									"type":"string",
									"title":"OpenNow"
								},
								"Speciality":{
									"type":"string",
									"title":"Speciality"
								},
								"Contact_Number_1":{
									"type":"string",
									"title":"Contact_Number_1"
								},
								"City":{
									"type":"string",
									"title":"City"
								},
								"Open_Time":{
									"type":"string",
									"title":"Open_Time"
								},
								"Longitude":{
									"type":"number",
									"title":"Longitude"
								},
								"Is_Closed":{
									"type":"boolean",
									"title":"Is_Closed"
								},
								"Distance_km":{
									"type":"number",
									"title":"Distance_km"
								},
								"ContactNumber2":{
									"type":"string",
									"title":"ContactNumber2"
								},
								"Copay":{
									"type":"string",
									"title":"Copay"
								},
								"Country":{
									"type":"string",
									"title":"Country"
								},
								"Instagram":{
									"type":"string",
									"title":"Instagram"
								},
								"ProviderType":{
									"type":"string",
									"title":"ProviderType"
								},
								"Day":{
									"type":"integer",
									"title":"Day"
								}
							},
							"title":"columns",
							"additionalProperties":false
						}
					}
				},
				"query":"SELECT\n    np._pr_providerid AS ProviderID,\n    np._pr_providertype AS ProviderType,\n    np._pr_providername AS Provider_Name,\n    np._pr_address AS Address,\n    np._pr_city AS City,\n    np._pr_country AS Country,\n    np._pr_governarate_area AS Governarate_Area,\n    np._pr_contactnumber AS Contact_Number_1,\n    np._pr_contactnumber2 AS ContactNumber2,\n    np._pr_websitelink AS WebsiteLink,\n    np._pr_longitude AS Longitude,\n    np._pr_latitude AS Latitude,\n    np._pr_speciality AS Speciality,\n    np._pr_copay AS Copay,\n    np._pr_featuredprovider AS FeaturedProvider,\n    np._pr_email AS Email,\n    np._pr_facebook AS Facebook,\n    np._pr_youtube AS Youtube,\n    np._pr_instagram AS Instagram,\n    np._pr_mapsurl AS MapsURL,\n    np._pr_medicinedelivery AS MedicineDelivery,\n    np._pr_opennow AS OpenNow,\n    tf._pr_deleted AS Deleted_Fav,\n    ws._pr_day_of_week AS Day,\n    ws._pr_open_time AS Open_Time,\n    ws._pr_close_time AS Close_Time,\n    ws._pr_is_closed AS Is_Closed,\n    st_distance_sphere(np._pr_longitude, np._pr_latitude, {{ n_JHETh.outputs.longitude }}, {{ n_JHETh.outputs.latitude }})/1000 AS Distance_km\nFROM ENTITY_oman_network_providers np\nLEFT JOIN ENTITY_test tf\n    ON tf._pr_providerid = np._pr_providerid\n   AND tf._pr_member_id = '{{ n_JHETh.outputs.member_id }}'\nLEFT JOIN ENTITY_oman_network_providers_weekday_schedule ws\n    ON ws._pr_provider_id = np._pr_providerid\n\nWHERE 1 = 1\n    AND ('{{ n_JHETh.outputs.band }}' IS NULL OR '{{ n_JHETh.outputs.band }}' = '' OR ARRAY_CONTAINS(np._pr_band, '{{ n_JHETh.outputs.band }}'))\n    AND ('{{ n_JHETh.outputs.provider_type }}' IS NULL OR '{{ n_JHETh.outputs.provider_type }}' = '' OR LOWER(np._pr_providertype) = LOWER('{{ n_JHETh.outputs.provider_type }}'))\n    AND ('{{ n_JHETh.outputs.city }}' IS NULL OR '{{ n_JHETh.outputs.city }}' = '' OR LOWER(np._pr_city) = LOWER('{{ n_JHETh.outputs.city }}'))\n    AND ('{{ n_JHETh.outputs.Area }}' IS NULL OR '{{ n_JHETh.outputs.Area }}' = '' OR LOWER(np._pr_governarate_area) = LOWER('{{ n_JHETh.outputs.Area }}'))\n    AND ('{{ n_JHETh.outputs.Country }}' IS NULL OR '{{ n_JHETh.outputs.Country }}' = '' OR LOWER(np._pr_country) = LOWER('{{ n_JHETh.outputs.Country }}'))\n    AND ('{{ n_JHETh.outputs.speciality }}' IS NULL OR '{{ n_JHETh.outputs.speciality }}' = '' OR LOWER(np._pr_speciality) LIKE LOWER('%{{ n_JHETh.outputs.speciality }}%'))\n    AND ('{{ n_JHETh.outputs.search }}' IS NULL OR '{{ n_JHETh.outputs.search }}' = '' OR LOWER(np._pr_providername) LIKE LOWER('%{{ n_JHETh.outputs.search }}%') OR LOWER(np._pr_speciality) LIKE LOWER('%{{ n_JHETh.outputs.search }}%'))\n    AND ('{{ n_JHETh.outputs.tab }}' IS NULL OR '{{ n_JHETh.outputs.tab }}' = '' OR LOWER(np._pr_providertype) = LOWER('{{ n_JHETh.outputs.tab }}'))\n    AND ('{{ n_JHETh.outputs.day }}' IS NULL OR '{{ n_JHETh.outputs.day }}' = '' OR LOWER(ws._pr_day_of_week) = LOWER('{{ n_JHETh.outputs.day }}'))\n    AND ('{{ n_JHETh.outputs.time }}' IS NULL OR '{{ n_JHETh.outputs.time }}' = '' OR (ws._pr_is_closed IS NULL OR ws._pr_is_closed = 'false') AND '{{ n_JHETh.outputs.time }}' BETWEEN ws._pr_open_time AND ws._pr_close_time)\n    AND (\n    ('{{ n_JHETh.outputs.range_start }}' IS NULL OR '{{ n_JHETh.outputs.range_start }}' = '' OR\n        st_distance_sphere(np._pr_longitude, np._pr_latitude, {{ n_JHETh.outputs.longitude }}, {{ n_JHETh.outputs.latitude }})/1000 >= COALESCE('{{ n_JHETh.outputs.range_start }}', 0)\n    )\n    AND\n    ('{{ n_JHETh.outputs.range_end }}' IS NULL OR '{{ n_JHETh.outputs.range_end }}' = '' OR\n        st_distance_sphere(np._pr_longitude, np._pr_latitude, {{ n_JHETh.outputs.longitude }}, {{ n_JHETh.outputs.latitude }})/1000 <= COALESCE('{{ n_JHETh.outputs.range_end }}', 999999)\n    )\n)\nORDER BY\n    np._pr_featuredprovider DESC,\n    Distance_km ASC,\n    np._pr_providername ASC\n\nLIMIT {{ n_JHETh.outputs.pageSize }} OFFSET {{ n_JHETh.outputs.offset }};",
				"group":"ENTITY_REPORTING"
			},
			"skip":false,
			"subTitle":"Analytics by UnifyApps",
			"title":"Execute Analytics SQL Query",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"analytics_by_unifyapps",
				"resourceVersion":12,
				"resourceName":"analytics_by_unifyapps_execute_query",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TTYrf-1",
			"id":"n_aTuRu",
			"index":4,
			"inputs":{
				"outputSchema":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"total_records"
					],
					"properties":{
						"ProviderID":{
							"type":"string",
							"title":"ProviderID"
						},
						"Speciality":{
							"type":"string",
							"title":"Speciality"
						},
						"Address":{
							"type":"string",
							"title":"Address"
						},
						"medicineDelivery":{
							"type":"string",
							"title":"medicineDelivery"
						},
						"latitude":{
							"type":"number",
							"title":"latitude"
						},
						"FeaturedProvider":{
							"type":"string",
							"title":"FeaturedProvider"
						},
						"SpecialityDetails":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"SpecialityDetails"
						},
						"Band":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Band"
						},
						"City":{
							"type":"string",
							"title":"City"
						},
						"Longitude":{
							"type":"number",
							"title":"Longitude"
						},
						"weekdayDescriptions":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"time":{
										"type":"string",
										"title":"time"
									},
									"day":{
										"type":"string",
										"title":"day"
									}
								},
								"additionalProperties":false
							},
							"title":"weekdayDescriptions"
						},
						"ProviderName":{
							"type":"string",
							"title":"ProviderName"
						},
						"Governarate_Area":{
							"type":"string",
							"title":"Governarate_Area"
						},
						"mapsURL":{
							"type":"string",
							"title":"mapsURL"
						},
						"Country":{
							"type":"string",
							"title":"Country"
						},
						"ContactNumber":{
							"type":"string",
							"title":"ContactNumber"
						},
						"ProviderType":{
							"type":"string",
							"title":"ProviderType"
						},
						"favorite":{
							"type":"string",
							"title":"Favorite"
						},
						"Deleted_fav":{
							"type":"string",
							"title":"Deleted Fav"
						},
						"total_records":{
							"type":"string",
							"title":"Total Records"
						}
					}
				},
				"query":"WITH data AS (\n  SELECT\n    np.*,\n    CASE\n      WHEN '{{ n_JHETh.outputs.member_id }}' IS NULL OR '{{ n_JHETh.outputs.member_id }}' = '' THEN NULL\n      ELSE COALESCE(tf._pr_Deleted, 'True')\n    END AS Deleted_fav\n  FROM ENTITY_oman_network_providers np\n  LEFT JOIN ENTITY_test tf\n  ON tf._pr_ProviderID = np._pr_ProviderID AND tf._pr_Member_ID = '{{ n_JHETh.outputs.member_id }}'\n  WHERE 1 = 1\n    AND ('{{ n_JHETh.outputs.provider_type }}' IS NULL OR '{{ n_JHETh.outputs.provider_type }}' = '' OR LOWER(np._pr_ProviderType) = LOWER('{{ n_JHETh.outputs.provider_type }}'))\n    AND ('{{ n_JHETh.outputs.city }}' IS NULL OR '{{ n_JHETh.outputs.city }}' = '' OR LOWER(np._pr_City) = LOWER('{{ n_JHETh.outputs.city }}'))\n    AND ('{{ n_JHETh.outputs.Area }}' IS NULL OR '{{ n_JHETh.outputs.Area }}' = '' OR LOWER(np._pr_Governarate_Area) = LOWER('{{ n_JHETh.outputs.Area }}'))\n    AND ('{{ n_JHETh.outputs.Country }}' IS NULL OR '{{ n_JHETh.outputs.Country }}' = '' OR LOWER(np._pr_Country) = LOWER('{{ n_JHETh.outputs.Country }}'))\n    AND ('{{ n_JHETh.outputs.search }}' IS NULL OR '{{ n_JHETh.outputs.search }}' = '' OR LOWER(np._pr_ProviderName) LIKE LOWER('%{{ n_JHETh.outputs.search }}%') OR LOWER(np._pr_Speciality) LIKE LOWER('%{{ n_JHETh.outputs.search }}%'))\n    AND ('{{ n_JHETh.outputs.tab }}' IS NULL OR '{{ n_JHETh.outputs.tab }}' = '' OR LOWER(np._pr_ProviderType) = LOWER('{{ n_JHETh.outputs.tab }}'))\n)\nSELECT\n  d.*,\n  (SELECT COUNT(*) FROM data) AS total_records\nFROM data d\nLIMIT {{ n_JHETh.outputs.offset }}, {{ n_JHETh.outputs.pageSize }};",
				"group":"ENTITY_REPORTING"
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":true,
			"subTitle":"Analytics by UnifyApps",
			"title":"Execute Analytics SQL Query",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				},
				"visibleOptionalFields":[
					"root.parameters.band.items",
					"root.parameters.speciality.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":12,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TTYrf-1",
			"id":"n_7Gxqt",
			"index":5,
			"inputs":{
				"output":{
					"$ref":"#/definitions/entity|e_code_snippet|e_68c8849fc0c3121802a9edc3",
					"$comment":"network_provider"
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"band":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Band"
						},
						"data":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Data"
						},
						"speciality":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Speciality"
						},
						"distance":{
							"type":"string",
							"title":"Distance"
						},
						"openinghrs":{
							"type":"string",
							"title":"openinghrs"
						},
						"day":{
							"type":"string",
							"title":"Day"
						},
						"time":{
							"type":"string",
							"title":"Time"
						},
						"latitude":{
							"type":"string",
							"title":"Latitude"
						},
						"longitude":{
							"type":"string",
							"title":"Longitude"
						},
						"range_start":{
							"type":"string",
							"title":"Range Start"
						},
						"range_end":{
							"type":"string",
							"title":"Range End"
						}
					}
				},
				"code":"// ---------- Early exit for SQL \"no rows\" ----------\ndef d0 = (binding?.hasVariable('data')) ? data : null\nif (d0 instanceof Map && d0.size() == 1 && d0.containsKey('hasMore')) {\n    return d0 // {\"result\":{\"hasMore\":false}}\n}\n\n// ---------- Load rows ----------\ndef src = (d0 instanceof Collection) ? d0 as List\n         : (d0 instanceof Map       ) ? [d0]\n         : []\nif (src.isEmpty()) return []\n\n// ---------- Constants ----------\nfinal double EARTH_R_KM = 6371.0088d\n\n// ---------- Get current Oman time ----------\nimport java.time.*\nimport java.time.format.*\n\ndef omanZone = ZoneId.of(\"Asia/Muscat\")\ndef omanNow = ZonedDateTime.now(omanZone)\nfinal String CURRENT_DAY = omanNow.getDayOfWeek().getDisplayName(java.time.format.TextStyle.FULL, Locale.ENGLISH)\nfinal String CURRENT_TIME = omanNow.format(DateTimeFormatter.ofPattern(\"h:mm a\"))\n\n// ---------- Small helpers ----------\ndef asList  = { v -> (v == null) ? [] : (v instanceof Collection ? v as List : [v]) }\ndef trimLC  = { s -> s?.toString()?.trim()?.toLowerCase() }\ndef toDbl   = { v ->\n    if (v == null) return null\n    if (v instanceof Number) return ((Number)v).doubleValue()\n    def s = v.toString().trim()\n    if (!s || s.equalsIgnoreCase('null') || s.equalsIgnoreCase('na')) return null\n    try { return Double.parseDouble(s) } catch (ignored) { return null }\n}\ndef getF = { Map m, List keys -> for (k in keys) { if (m.containsKey(k) && m[k] != null) return m[k] }; return null }\n\n// ---------- Use input origin (latitude/longitude) WITHOUT fallback ----------\ndef ORIGIN_LAT = toDbl(binding?.hasVariable('latitude') ? latitude : -1)\ndef ORIGIN_LON = toDbl(binding?.hasVariable('longitude') ? longitude : -1)\n\n// ---------- Normalize / JSON-ish parsing (no JsonSlurper) ----------\ndef normalizeStr = { String s ->\n    if (s == null) return \"\"\n    s.replaceAll(\"[\\u2013\\u2014\\u2212]\", \"-\")\n     .replaceAll(\"[\\u2009\\u202F\\u00A0]\", \" \")\n     .replaceAll(\"\\\\s*,\\\\s*\", \",\")\n     .replaceAll(\"\\\\s*-\\\\s*\", \"-\")\n     .replaceAll(\"\\\\s+\", \" \")\n     .trim()\n}\ndef coercePrimitive = { String t ->\n    if (t == null) return null\n    def x = t.trim()\n    if (!x) return \"\"\n    if ((x.startsWith('\"') && x.endsWith('\"')) || (x.startsWith(\"'\") && x.endsWith(\"'\"))) {\n        x = x.substring(1, x.length()-1)\n    }\n    if (x.equalsIgnoreCase(\"true\"))  return true\n    if (x.equalsIgnoreCase(\"false\")) return false\n    if (x.equalsIgnoreCase(\"yes\"))   return true\n    if (x.equalsIgnoreCase(\"no\"))    return false\n    if (x ==~ /^-?\\d+$/)             return Long.parseLong(x)\n    if (x ==~ /^-?\\d+\\.\\d+$/)        return Double.parseDouble(x)\n    return x\n}\ndef parseArrayGeneric = { String arr ->\n    String s = arr?.trim() ?: \"\"\n    if (!s.startsWith(\"[\") || !s.endsWith(\"]\")) return s\n\n    if (s.contains(\"{\")) {\n        def blocks = (s =~ /\\{[^}]*\\}/)\n        def out = []\n        blocks.each { m -> out << parseObjectGeneric(m[0]) }\n        if (!out.isEmpty()) return out\n    }\n\n    def tokens = []\n    def qt = (s =~ /\"(.*?)\"|'(.*?)'/)\n    qt.each { _, g1, g2 -> tokens << (g1 ?: g2) }\n    if (!tokens.isEmpty()) return tokens.collect { coercePrimitive(it) }\n\n    def inner = s.substring(1, s.length()-1)\n    return inner.split(/\\s*,\\s*/).findAll { it != null && it.trim() }.collect { coercePrimitive(it) }\n}\ndef parseObjectGeneric = { String obj ->\n    String o = obj?.trim() ?: \"\"\n    if (!o.startsWith(\"{\") || !o.endsWith(\"}\")) return o\n    def map = [:]\n\n    def arrRe = (o =~ /\"([^\"]+)\"\\s*:\\s*(\\[[^\\]]*\\])/)\n    arrRe.each { m -> map[m[1]] = parseArrayGeneric(m[2]) }\n\n    def strRe = (o =~ /\"([^\"]+)\"\\s*:\\s*\"([^\"]*)\"/)\n    strRe.each { m -> if (!map.containsKey(m[1])) map[m[1]] = m[2] }\n\n    def numRe = (o =~ /\"([^\"]+)\"\\s*:\\s*([-]?\\d+(?:\\.\\d+)?)/)\n    numRe.each { m ->\n        if (!map.containsKey(m[1])) map[m[1]] = (m[2].contains('.') ? Double.parseDouble(m[2]) : Long.parseLong(m[2]))\n    }\n\n    def boolRe = (o =~ /\"([^\"]+)\"\\s*:\\s*((?i:true|false))/)\n    boolRe.each { m -> if (!map.containsKey(m[1])) map[m[1]] = m[2].equalsIgnoreCase(\"true\") }\n\n    return map\n}\ndef parseStringArray = { v ->\n    if (v == null) return []\n    if (v instanceof Collection) return v.collect { it?.toString() }\n    def s = v.toString().trim(); if (!s) return []\n    if ((s.startsWith('[') && s.endsWith(']')) || (s.startsWith('(') && s.endsWith(')'))) {\n        def u = s.contains('\\\\\\\"') ? s.replace('\\\\\\\"','\"') : s\n        def toks = []\n        def m = (u =~ /\"(.*?)\"|'(.*?)'/)\n        m.each { _, g1, g2 -> def tok = (g1 ?: g2); if (tok != null && tok.trim()) toks << tok }\n        if (toks.isEmpty()) {\n            def inner = u.substring(1, u.length()-1)\n            toks = inner.split(/\\s*,\\s*|\\s*\\|\\s*/)\n        }\n        return toks.collect { it?.toString() }\n    }\n    return s.split(/\\s*,\\s*|\\s*\\|\\s*/).collect { it?.toString() }\n}\n\n// ---------- Hours ----------\ndef toWeekdayList = { Object wd ->\n    if (wd == null) return []\n    if (wd instanceof Collection) {\n        return wd.collect { it instanceof Map ? [day: it.day?.toString(), time: it.time?.toString()] : it }\n    }\n    String u = wd.toString().trim()\n    if (!u) return []\n    if (u.contains('\\\\\\\"')) u = u.replace('\\\\\\\"','\"')\n    def blocks = (u =~ /\\{[^}]*\\}/)\n    def out = []\n    blocks.each { m ->\n        String ob = m[0]\n        def dm = (ob =~ /\"day\"\\s*:\\s*\"([^\"]+)\"/)\n        def tm = (ob =~ /\"time\"\\s*:\\s*\"([^\"]+)\"/)\n        if (dm.find() && tm.find()) out << [day: dm.group(1), time: normalizeStr(tm.group(1))]\n    }\n    if (out.isEmpty() && u.startsWith('[') && u.endsWith(']')) {\n        def parts = u.substring(1, u.length()-1).split(/}\\s*,\\s*\\{/)\n        parts.each { p ->\n            String obj = p\n            if (!obj.startsWith('{')) obj = '{' + obj\n            if (!obj.endsWith('}'))  obj = obj + '}'\n            def dm = (obj =~ /\"day\"\\s*:\\s*\"([^\"]+)\"/)\n            def tm = (obj =~ /\"time\"\\s*:\\s*\"([^\"]+)\"/)\n            if (dm.find() && tm.find()) out << [day: dm.group(1), time: normalizeStr(tm.group(1))]\n        }\n    }\n    out\n}\ndef parseTimeToken = { String token, String meridiemHint ->\n    def IN = java.time.format.DateTimeFormatter.ofPattern(\"h[:mm] a\")\n    String t = token.trim()\n    if (!(t ==~ /(?i).*(AM|PM)$/)) {\n        if (meridiemHint == null) throw new RuntimeException(\"Missing AM/PM for \" + t)\n        t += \" \" + meridiemHint\n    }\n    java.time.LocalTime.parse(t.toUpperCase(), IN)\n}\ndef parseIntervalsForToday = { String timeStr ->\n    String s = normalizeStr(timeStr)\n    if (s.equalsIgnoreCase(\"Closed\")) return []\n    if (s.equalsIgnoreCase(\"Open 24 hours\")) return [[start: java.time.LocalTime.MIN, end: java.time.LocalTime.MAX, eod: true]]\n    def intervals = []\n    for (String part : s.split(\",\")) {\n        String[] bits = part.trim().split(\"-\"); if (bits.length != 2) continue\n        String startRaw = bits[0].trim(), endRaw = bits[1].trim()\n        String endMer = endRaw.toUpperCase().endsWith(\"AM\") ? \"AM\" : endRaw.toUpperCase().endsWith(\"PM\") ? \"PM\" : null\n        try {\n            def end   = parseTimeToken(endRaw, null)\n            def start = parseTimeToken(startRaw, endMer)\n            if (!end.isAfter(start)) {\n                intervals.add([start: start, end: java.time.LocalTime.MAX, eod: true])\n            } else {\n                boolean eod = (end == java.time.LocalTime.MIDNIGHT)\n                intervals.add([start: start, end: (eod ? java.time.LocalTime.MAX : end), eod: eod]);\n            }\n        } catch (ignored) {}\n    }\n    intervals\n}\ndef computeOpenFlagsAndLabel = { List<Map> wdList ->\n    def row = wdList.find { (it.day ?: \"\").equalsIgnoreCase(CURRENT_DAY) }\n    String norm = normalizeStr(row?.time ?: \"\")\n    if (norm.equalsIgnoreCase(\"Open 24 hours\")) return [isOpen:true,  is24x7:true,  t_1:\"Open\",   t_2:\"24/7\"]\n    if (!row || norm.equalsIgnoreCase(\"Closed\")) return [isOpen:false, is24x7:false, t_1:\"Closed\", t_2:\"\"]\n    try {\n        def IN  = java.time.format.DateTimeFormatter.ofPattern(\"h:mm a\")\n        def now = java.time.LocalTime.parse(CURRENT_TIME.toUpperCase(), IN)\n        def active = parseIntervalsForToday(norm).find { iv ->\n            def start = (java.time.LocalTime) iv.start\n            def end   = (java.time.LocalTime) iv.end\n            (now.equals(start) || now.isAfter(start)) && (now.isBefore(end) || now.equals(end))\n        }\n        if (active) {\n            def OUT = java.time.format.DateTimeFormatter.ofPattern(\"h[:mm] a\")\n            boolean eod = (boolean) active.eod\n            def endTime = (java.time.LocalTime) active.end\n            String label = eod ? \"12 AM\" : OUT.format(endTime).replace(\":00 \", \" \")\n            return [isOpen:true, is24x7:false, t_1:\"Open\", t_2:\"Closes \" + label]\n        }\n    } catch (ignored) {}\n    [isOpen:false,is24x7:false, t_1:\"Closed\", t_2:\"\"]\n}\n\n// ---------- Location + Distance ----------\ndef isValidVal = { v -> v != null && !(v.toString().trim().isEmpty()) && !v.toString().equalsIgnoreCase(\"undefined\") && v.toString() != \"-\" }\ndef buildLocation = { Map cols ->\n    def parts = []\n    def city    = getF(cols, ['_pr_City','City'])\n    def govArea = getF(cols, ['_pr_Governarate_Area','Governarate_Area'])\n    def country = getF(cols, ['_pr_Country','Country'])\n    if (isValidVal(city))    parts << city.toString().trim()\n    if (isValidVal(govArea)) parts << govArea.toString().trim()\n    if (isValidVal(country)) parts << country.toString().trim()\n    [location: parts.join(\", \"), location_id: (getF(cols, ['_pr_location_id','location_id']) ?: \"\").toString()]\n}\ndef haversineKm = { double lat1, double lon1, double lat2, double lon2 ->\n    double dLat = Math.toRadians(lat2 - lat1), dLon = Math.toRadians(lon2 - lon1)\n    double a = Math.sin(dLat/2)**2 + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) * Math.sin(dLon/2)**2\n    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n    EARTH_R_KM * c\n}\ndef computeRowDistanceKm = { Map cols ->\n    // include lowercase keys used in your data\n    def lat = toDbl(getF(cols, ['_pr_Latitude','_pr_latitude','latitude','Latitude']))\n    def lon = toDbl(getF(cols, ['_pr_Longitude','_pr_longitude','Longitude','longitude']))\n    if (lat == null || lon == null || ORIGIN_LAT == null || ORIGIN_LON == null) return null\n    haversineKm(ORIGIN_LAT, ORIGIN_LON, lat, lon)\n}\n// formatting rule for distance (one decimal if <10km; else integer)\ndef fmtDistance = { Double d ->\n    if (d == null) return null\n    if (d < 10.0d) {\n        double r = Math.round(d * 10) / 10.0d\n        return (r >= 10.0d) ? (long)Math.round(d) : r\n    }\n    return (long)Math.round(d)\n}\n\n// ---------- Bands & Specialities ----------\ndef normBandTokenLC = { String t ->\n    def x = trimLC(t); if (!x) return null\n    if (x in ['a','band_a','grade_a']) return 'a'\n    if (x in ['a+','a plus','aplus','a_plus']) return 'a+'\n    if (x in ['b','band_b','grade_b']) return 'b'\n    return x\n}\ndef canonBandOut = { String t -> (t == 'a') ? 'A' : (t == 'a+') ? 'A+' : (t == 'b') ? 'B' : t?.toUpperCase() }\ndef extractBandsCanon = { Map cols ->\n    def out = [] as LinkedHashSet\n    def bandVal = getF(cols, ['_pr_Band','Band','band'])\n    parseStringArray(bandVal).each { tok ->\n        def n = normBandTokenLC(tok); if (n) out << canonBandOut(n)\n    }\n    if (cols.A     == true) out << 'A'\n    if (cols.B     == true) out << 'B'\n    if (cols.Aplus == true || cols['A+'] == true || cols.A_plus == true || cols.APlus == true) out << 'A+'\n    out.toList()\n}\ndef extractSpecsLC = { Map cols ->\n    (parseStringArray(getF(cols, ['_pr_Speciality_details','Speciality_details','SpecialityDetails'])) +\n     parseStringArray(getF(cols, ['_pr_Speciality','Speciality'])))\n        .collect { trimLC(it) }\n        .findAll { it }\n        .toSet()\n}\n\n// ---------- Column coercer ----------\ndef coerceColumns = { Map cols ->\n    def out = new LinkedHashMap()\n    cols.each { k, v ->\n        def val = v\n        if (val instanceof CharSequence) {\n            String s = val.toString().trim()\n            if (s.contains('\\\\\\\"')) s = s.replace('\\\\\\\"','\"')\n\n            if (['_pr_weekdayDescriptions','weekdayDescriptions'].contains(k)) {\n                out[k] = toWeekdayList(s); return\n            }\n            if (['_pr_Band','Band','band',\n                  '_pr_Speciality_details','Speciality_details','SpecialityDetails',\n                  '_pr_grants','grants'].contains(k)) {\n                out[k] = parseStringArray(s); return\n            }\n            if (s.equalsIgnoreCase(\"true\") || s.equalsIgnoreCase(\"false\") ||\n                s.equalsIgnoreCase(\"yes\")  || s.equalsIgnoreCase(\"no\")) {\n                out[k] = coercePrimitive(s); return\n            }\n            if (s ==~ /^-?\\d+(\\.\\d+)?$/) {\n                out[k] = (s.contains('.') ? Double.parseDouble(s) : Long.parseLong(s)); return\n            }\n            if ((s.startsWith(\"[\") && s.endsWith(\"]\")) || (s.startsWith(\"{\") && s.endsWith(\"}\"))) {\n                out[k] = s.startsWith(\"[\") ? parseArrayGeneric(s) : parseObjectGeneric(s); return\n            }\n            out[k] = s\n        } else {\n            out[k] = val\n        }\n    }\n    return out\n}\n\n// ---------- sort helpers (featured -> distance -> name) ----------\ndef isFeatured = { Map row ->\n    def f = getF(row, ['_pr_FeaturedProvider','FeaturedProvider'])\n    (f instanceof Boolean) ? f : (f?.toString()?.equalsIgnoreCase('true'))\n}\ndef compareRows = { Map a, Map b ->\n    int fa = isFeatured(a) ? 0 : 1\n    int fb = isFeatured(b) ? 0 : 1\n    if (fa != fb) return fa <=> fb\n\n    double da = (a.distance_km instanceof Number) ? ((Number)a.distance_km).doubleValue() : 1.0e15d\n    double db = (b.distance_km instanceof Number) ? ((Number)b.distance_km).doubleValue() : 1.0e15d\n    if (da != db) return da <=> db\n\n    String na = ('' + (getF(a, ['_pr_ProviderName','ProviderName']) ?: '')).toLowerCase()\n    String nb = ('' + (getF(b, ['_pr_ProviderName','ProviderName']) ?: '')).toLowerCase()\n    return na <=> nb\n}\n\n// ---------- Read filter inputs (MODIFIED: Use range_start and range_end instead of distance) ----------\ndef rawOH   = (binding?.hasVariable('openinghrs')) ? openinghrs?.toString()?.trim() : null // \"All\" | \"24/7\" | \"Open Now\"\ndef rawBand = (binding?.hasVariable('band')) ? band : null\ndef rawSpec = (binding?.hasVariable('speciality')) ? speciality : null\n\n// NEW: Get range_start and range_end instead of distance\ndef rawRangeStart = (binding?.hasVariable('range_start')) ? range_start : null\ndef rawRangeEnd = (binding?.hasVariable('range_end')) ? range_end : null\n\ndef wantBands = asList(rawBand).findAll { it != null && it.toString().trim() }\n        .collect { normBandTokenLC(it.toString()) }.findAll { it }.toSet()\ndef wantSpecs = asList(rawSpec).findAll { it != null && it.toString().trim() }\n    .collect { trimLC(it) }.findAll { it }.toSet()\n\n// NEW: Process range inputs to determine distance filtering criteria\ndef rangeStartKm = toDbl(rawRangeStart)\ndef rangeEndKm = toDbl(rawRangeEnd)\n\n// Determine if we should filter by distance range\nboolean hasDistanceFilter = (rangeStartKm != null || rangeEndKm != null)\n\nboolean noOH = (rawOH == null || rawOH == \"\" || rawOH == \"All\")\n\n// ---------- Return-all (no filters) ----------\nif (wantBands.isEmpty() && wantSpecs.isEmpty() && !hasDistanceFilter && noOH) {\n    def allRows = src.collect { row ->\n        def cols = (row.columns instanceof Map) ? row.columns : row\n        def coerced = coerceColumns(cols)\n\n        def wd = getF(coerced, ['_pr_weekdayDescriptions','weekdayDescriptions'])\n        def wdList = (wd instanceof Collection) ? wd : toWeekdayList(wd?.toString())\n        def open = computeOpenFlagsAndLabel(wdList)\n        def dkm = computeRowDistanceKm(coerced)\n        def loc = buildLocation(coerced)\n\n        coerced.distance_km = (dkm == null) ? null : fmtDistance(dkm)\n        coerced.t_1 = open.t_1; coerced.t_2 = open.t_2\n        coerced.location = loc.location\n        coerced.location_id = loc.location_id\n        coerced\n    }\n    allRows.sort(compareRows)\n    def totalCount = allRows.size()\n    allRows.each { it.TotalRecords = originalTotalRecords }\n    return allRows\n}\n\n// ---------- AND filter + coerce all (MODIFIED: Use range-based distance filtering) ----------\ndef filtered = src.findAll { row ->\n    def cols = (row.columns instanceof Map) ? row.columns : row\n    def wdList = toWeekdayList(getF(cols, ['_pr_weekdayDescriptions','weekdayDescriptions']))\n\n    def rowBand = extractBandsCanon(cols).collect { normBandTokenLC(it) }.findAll { it } as Set\n    boolean bandOk = wantBands.isEmpty() || wantBands.every { rowBand.contains(it) }\n\n    def rowSpecs = extractSpecsLC(cols)\n    boolean specOk = wantSpecs.isEmpty() || wantSpecs.every { rowSpecs.contains(it) }\n\n    // NEW: Distance range filtering logic\n    def dkmTmp = computeRowDistanceKm(cols)\n    boolean distOk = true // Default to true if no distance filter\n    \n    if (hasDistanceFilter && dkmTmp != null) {\n        // If only range_start is provided, filter >= range_start\n        if (rangeStartKm != null && rangeEndKm == null) {\n            distOk = dkmTmp >= (rangeStartKm - 1e-9)\n        }\n        // If only range_end is provided, filter <= range_end\n        else if (rangeStartKm == null && rangeEndKm != null) {\n            distOk = dkmTmp <= (rangeEndKm + 1e-9)\n        }\n        // If both are provided, filter within range [range_start, range_end]\n        else if (rangeStartKm != null && rangeEndKm != null) {\n            distOk = dkmTmp >= (rangeStartKm - 1e-9) && dkmTmp <= (rangeEndKm + 1e-9)\n        }\n    } else if (hasDistanceFilter && dkmTmp == null) {\n        // If distance filter is requested but we can't calculate distance, exclude the row\n        distOk = false\n    }\n\n    def o = computeOpenFlagsAndLabel(wdList)\n    boolean ohOk = (rawOH == null || rawOH == \"\" || rawOH == \"All\") ? true\n                 : (rawOH == \"24/7\"     ? (o.is24x7 == true)\n                   : rawOH == \"Open Now\" ? (o.isOpen == true)\n                   : true)\n\n    bandOk && specOk && distOk && ohOk\n}.collect { row ->\n    def cols = (row.columns instanceof Map) ? row.columns : row\n    def coerced = coerceColumns(cols)\n\n    def wd = getF(coerced, ['_pr_weekdayDescriptions','weekdayDescriptions'])\n    def wdList = (wd instanceof Collection) ? wd : toWeekdayList(wd?.toString())\n    def open = computeOpenFlagsAndLabel(wdList)\n    def dkm = computeRowDistanceKm(coerced)\n    def loc = buildLocation(coerced)\n\n    coerced.distance_km = (dkm == null) ? null : fmtDistance(dkm)\n    coerced.t_1 = open.t_1; coerced.t_2 = open.t_2\n    coerced.location = loc.location\n    coerced.location_id = loc.location_id\n    coerced\n}\n\nfiltered.sort(compareRows)\ndef totalCount = filtered.size()\n// filtered.each { it.TotalCount = totalCount }\nreturn filtered",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"data":"{{ n_aTuRu.outputs.objects }}",
					"distance":"{{ n_JHETh.outputs.governorte }}",
					"openinghrs":"{{ n_JHETh.outputs.opening_hrs }}",
					"day":"{{ n_JHETh.outputs.day }}",
					"time":"{{ n_JHETh.outputs.time }}",
					"latitude":"{{ n_JHETh.outputs.latitude }}",
					"longitude":"{{ n_JHETh.outputs.longitude }}",
					"range_start":"{{ n_JHETh.outputs.range_start }}",
					"range_end":"{{ n_JHETh.outputs.range_end }}",
					"band":{
						"source":"{{ n_JHETh.outputs.band }}",
						"ua:type":"mappedArray"
					},
					"speciality":{
						"source":"{{ n_JHETh.outputs.speciality }}",
						"ua:type":"mappedArray"
					}
				}
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":true,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":134,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TTYrf-1",
			"id":"n_quSOY",
			"index":6,
			"inputs":{
				"result":{
					"result":{
						"ua:type":"mappedArray",
						"items":{
							"openNow":"{{ _9KdQA.outputs.objects[0].columns.OpenNow }}",
							"medicineDelivery":"{{ _9KdQA.outputs.objects[0].columns.MedicineDelivery }}",
							"distance_km":"{{ _9KdQA.outputs.objects[0].columns.Distance_km }}",
							"ContactNumber2":"{{ _9KdQA.outputs.objects[0].columns.ContactNumber2 }}",
							"Latitude":"{{ _9KdQA.outputs.objects[0].columns.Latitude }}",
							"Instagram":"{{ _9KdQA.outputs.objects[0].columns.Instagram }}",
							"Address":"{{ _9KdQA.outputs.objects[0].columns.Address }}",
							"WebsiteLink":"{{ _9KdQA.outputs.objects[0].columns.WebsiteLink }}",
							"ProviderID":"{{ _9KdQA.outputs.objects[0].columns.ProviderID }}",
							"Speciality":"{{ _9KdQA.outputs.objects[0].columns.Speciality }}",
							"Longitude":"{{ _9KdQA.outputs.objects[0].columns.Longitude }}",
							"Governarate_Area":"{{ _9KdQA.outputs.objects[0].columns.Governarate_Area }}",
							"ProviderType":"{{ _9KdQA.outputs.objects[0].columns.ProviderType }}",
							"Email":"{{ _9KdQA.outputs.objects[0].columns.Email }}",
							"Facebook":"{{ _9KdQA.outputs.objects[0].columns.Facebook }}",
							"Copay":"{{ _9KdQA.outputs.objects[0].columns.Copay }}",
							"mapsURL":"{{ _9KdQA.outputs.objects[0].columns.MapsURL }}",
							"Provider_Name":"{{ _9KdQA.outputs.objects[0].columns.Provider_Name }}",
							"Contact_Number_1":"{{ _9KdQA.outputs.objects[0].columns.Contact_Number_1 }}",
							"City":"{{ _9KdQA.outputs.objects[0].columns.City }}",
							"Youtube":"{{ _9KdQA.outputs.objects[0].columns.Youtube }}",
							"Country":"{{ _9KdQA.outputs.objects[0].columns.Country }}",
							"FeaturedProvider":"{{ _9KdQA.outputs.objects[0].columns.FeaturedProvider }}"
						},
						"source":"{{ _9KdQA.outputs.objects }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":33404,
	"schemaReferences":[
		"entity|e_code_snippet|e_68c8849fc0c3121802a9edc3"
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":73
}