{
	"appsUsed":[
		
	],
	"createdTime":1760087112017,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"_fto3G",
			"priority":0,
			"skip":false,
			"toNodeId":"_efZYx",
			"type":"next"
		},
		{
			"fromNodeId":"_efZYx",
			"priority":0,
			"skip":false,
			"toNodeId":"_tRHdw",
			"type":"next"
		}
	],
	"id":"6881dd0a361b8410dfa833b1",
	"lastModifiedBy":4130,
	"lcName":"createservicefault (pan)",
	"modifiedTime":1760087112017,
	"name":"createServiceFault (PAN)",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":2,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_0pbTS-1",
			"id":"_fto3G",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"ServiceFaultReason":{
							"type":"string",
							"title":"ServiceFaultReason"
						},
						"isRepeatable":{
							"type":"string",
							"title":"isRepeatable"
						},
						"ServiceName":{
							"type":"string",
							"title":"ServiceName"
						},
						"ServiceFault":{
							"type":"string",
							"title":"ServiceFault"
						},
						"ServiceFaultClass":{
							"type":"string",
							"title":"ServiceFaultClass"
						},
						"BBFN":{
							"type":"object",
							"properties":{
								"CustomerFunctions":{
									"type":"string",
									"title":"CustomerFunctions"
								}
							},
							"title":"BBFN",
							"additionalProperties":false
						},
						"ServiceVersion":{
							"type":"string",
							"title":"ServiceVersion"
						},
						"ServiceFaultSeverity":{
							"type":"string",
							"title":"ServiceFaultSeverity"
						}
					},
					"additionalProperties":false
				},
				"setup":{
					"type":"object",
					"properties":{
						"pruefeAngebot":{
							"type":"object",
							"properties":{
								"Angebot":{
									"type":"object",
									"properties":{
										"Wunschtermin":{
											"type":"string",
											"title":"Wunschtermin"
										},
										"Preisliste":{
											"type":"string",
											"title":"Preisliste"
										},
										"Angebotsposition":{
											"type":"array",
											"items":{
												"type":"object",
												"properties":{
													"Aktion":{
														"type":"string",
														"title":"Aktion"
													},
													"VertragsID":{
														"type":"array",
														"items":{
															"type":"string"
														},
														"title":"VertragsID"
													},
													"UebergeordneteVertragsID":{
														"type":"string",
														"title":"UebergeordneteVertragsID"
													}
												},
												"additionalProperties":false,
												"required":[]
											},
											"title":"Angebotsposition"
										}
									},
									"additionalProperties":false,
									"title":"Angebot",
									"required":[]
								},
								"Bestand":{
									"type":"object",
									"properties":{
										"Vertrag":{
											"type":"array",
											"items":{
												"type":"object",
												"properties":{
													"Id":{
														"type":"string",
														"title":"Id"
													}
												},
												"additionalProperties":false,
												"required":[]
											},
											"title":"Vertrag"
										}
									},
									"additionalProperties":false,
									"title":"Bestand",
									"required":[]
								}
							},
							"additionalProperties":false,
							"title":"pruefeAngebot",
							"required":[]
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger from automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.Angebotsposition.items.Aktion",
					"root.parameters.Angebotsposition.items.VertragsID.items",
					"root.parameters.Vertrag.items.ID",
					"root.parameters.Angebotsposition.items.UebergeordneteVertragsID"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":2,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_0pbTS-1",
			"id":"_efZYx",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"ServiceFaultReason":{
							"type":"string",
							"title":"ServiceFaultReason"
						},
						"isRepeatable":{
							"type":"string",
							"title":"isRepeatable"
						},
						"ServiceName":{
							"type":"string",
							"title":"ServiceName"
						},
						"ServiceFault":{
							"type":"string",
							"title":"ServiceFault"
						},
						"ServiceFaultClass":{
							"type":"string",
							"title":"ServiceFaultClass"
						},
						"BBFN":{
							"type":"object",
							"properties":{
								"CustomerFunctions":{
									"type":"string",
									"title":"CustomerFunctions"
								}
							},
							"title":"BBFN",
							"additionalProperties":false
						},
						"ServiceVersion":{
							"type":"string",
							"title":"ServiceVersion"
						},
						"ServiceFaultSeverity":{
							"type":"string",
							"title":"ServiceFaultSeverity"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"Wunschtermin":{
							"type":"string",
							"title":"Wunschtermin"
						},
						"Preisliste":{
							"type":"string",
							"title":"Preisliste"
						},
						"Angebotsposition":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"Aktion":{
										"type":"string",
										"title":"Aktion"
									},
									"VertragsID":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"VertragsID"
									},
									"UebergeordneteVertragsID":{
										"type":"string",
										"title":"UebergeordneteVertragsID"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Angebotsposition"
						},
						"Vertrag":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"ID":{
										"type":"string",
										"title":"ID"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Vertrag"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"import java.time.ZoneId\r\nimport java.time.LocalDate\r\nimport java.time.OffsetDateTime\r\nimport java.time.ZonedDateTime\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport java.time.format.DateTimeParseException\r\n\r\ndef wunschtermin = init(\"Wunschtermin\")\r\ndef preisliste = init(\"Preisliste\")\r\ndef angebotsposition = init(\"Angebotsposition\")\r\ndef vertrag =init(\"Vertrag\")\r\n\r\ndef result = main(wunschtermin, preisliste, angebotsposition, vertrag)\r\nresult\r\n\r\n/*\r\ndef main(wunschtermin, preisliste, angebotsposition, vertrag) {\r\n\r\n    if (isBeforeToday(wunschtermin)) {\r\n        return buildFaultWunschtermin()\r\n    } else if (hasInvalidAngebotsposition(angebotsposition)) {\r\n        return buildFaultMissingVertragsID()\r\n   // } else if (hasVertragsIDNotInBestand(angebotsposition, vertrag)) {\r\n        //return buildFaultVertragsIDNotInBestand(missingVertragsID)\r\n       // missingVertragsID = null\r\n    } else if (!preisliste) {\r\n        return buildFaultPreislisteNA()\r\n    } else {\r\n        return null\r\n    }\r\n}*/\r\n\r\ndef main(wunschtermin, preisliste, angebotsposition, vertrag) {\r\n    if (isBeforeToday(wunschtermin)) {\r\n        return buildFaultWunschtermin()\r\n    } else if (hasInvalidAngebotsposition(angebotsposition)) {\r\n        return buildFaultMissingVertragsID()\r\n    } else {\r\n        def missingID = getFirstMissingVertragsID(angebotsposition, vertrag)\r\n        if (missingID != null) {\r\n            return buildFaultVertragsIDNotInBestand(missingID)\r\n        }\r\n    }\r\n\r\n    if (!preisliste) {\r\n        return buildFaultPreislisteNA()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\n\r\ndef buildFaultPreislisteNA() {\r\n    def fault = \"1040\"\r\n    def faultClass = \"InvalidInputDataFault\"\r\n    def faultReason = \"Die Validierung der Eingangsparameter ist fehlgeschlagen : 'Preisliste' darf nicht leer sein.\"\r\n\r\n    return addFaultData(buildBasicFault(), fault, faultClass, faultReason)\r\n}\r\n\r\ndef buildFaultWunschtermin() {\r\n    def fault = \"1000\"\r\n    def faultClass = \"InvalidInputDataFault\"\r\n    def faultReason = \"Die Validierung der Eingangsparameter ist fehlgeschlagen : 'Wunschtermin' darf nicht Ã¤lter als das aktuelle Datum sein.\"\r\n\r\n    return addFaultData(buildBasicFault(), fault, faultClass, faultReason)\r\n}\r\n\r\ndef buildFaultMissingVertragsID(String vertragsID) {\r\n    def fault = \"1000\"\r\n    def faultClass = \"InvalidInputDataFault\"\r\n    def faultReason = \"Die Validierung der Eingangsparameter ist fehlgeschlagen : Wenn 'Aktion!=neu', dann muss eine Vertragsposition referenziert werden.\"\r\n\r\n    return addFaultData(buildBasicFault(), fault, faultClass, faultReason)\r\n}\r\n\r\ndef buildFaultVertragsIDNotInBestand(String vertragsID) {\r\n    def fault = \"1000\"\r\n    def faultClass = \"InvalidInputDataFault\"\r\n    def faultReason = String.format(\"Die Validierung der Eingangsparameter ist fehlgeschlagen : Keine Bestandskomponente mit Id: %s\", vertragsID)\r\n\r\n    return addFaultData(buildBasicFault(), fault, faultClass, faultReason)\r\n}\r\n\r\ndef addFaultData(serviceFault, fault, faultClass, faultReason) {\r\n    serviceFault[\"ServiceFault\"] = fault\r\n    serviceFault[\"ServiceFaultClass\"] = faultClass\r\n    serviceFault[\"ServiceFaultReason\"] = faultReason\r\n    return serviceFault\r\n}\r\n\r\ndef buildBasicFault() {\r\n    def serviceFault = [\r\n        \"BBFN\": buildCustomerFunctions(),\r\n        \"ServiceName\": \"pruefeAngebot\",\r\n        \"ServiceVersion\": \"001.00_0000.01.01\",\r\n        \"ServiceFaultSeverity\": \"CRIT\",\r\n        \"isRepeatable\": \"false\"\r\n    ]\r\n    return serviceFault\r\n}\r\n\r\ndef buildCustomerFunctions() {\r\n    return [\"CustomerFunctions\": \"OrderManagement\"]\r\n}\r\n\r\ndef Object init(String variableKey) {\r\n    if (binding.variables.containsKey(variableKey)) {\r\n        return binding.getVariable(variableKey)\r\n    }\r\n    return null\r\n}\r\n\r\ndef isBeforeToday(wunschtermin) {\r\n    def Boolean isBeforeToday = false\r\n\r\n    if (wunschtermin) {\r\n        if (wunschtermin != null && wunschtermin != \"\") {\r\n            LocalDate wunschterminDate = parseToLocalDate(wunschtermin)\r\n\r\n            ZonedDateTime cetDatumZeit = ZonedDateTime.now(ZoneId.of(\"CET\"))\r\n            LocalDate today = cetDatumZeit.toLocalDate()\r\n\r\n            if (wunschterminDate != null && wunschterminDate.isBefore(today)) {\r\n                isBeforeToday = true\r\n            } else {\r\n                isBeforeToday = false\r\n            }\r\n        }\r\n    }\r\n    return isBeforeToday\r\n}\r\n\r\ndef parseToLocalDate(String dateString) {\r\n    LocalDate date = null\r\n\r\n    try {\r\n        date = LocalDate.parse(dateString, DateTimeFormatter.ISO_LOCAL_DATE)\r\n    } catch (DateTimeParseException e) {}\r\n    if (date == null) {\r\n        try {\r\n            date = OffsetDateTime.parse(dateString, DateTimeFormatter.ISO_OFFSET_DATE_TIME).toLocalDate()\r\n        } catch (DateTimeParseException e) {}\r\n    }\r\n    if (date == null) {\r\n        try {\r\n            date = ZonedDateTime.parse(dateString, DateTimeFormatter.ISO_ZONED_DATE_TIME).toLocalDate()\r\n        } catch (DateTimeParseException e) {}\r\n    }\r\n    if (date == null) {\r\n        try {\r\n            date = LocalDateTime.parse(dateString, DateTimeFormatter.ISO_LOCAL_DATE_TIME).toLocalDate()\r\n        } catch (DateTimeParseException e) {}\r\n    }\r\n    return date\r\n}\r\n\r\ndef hasInvalidAngebotsposition(angebotspositionList) {\r\n    if (angebotspositionList instanceof List) {\r\n        for (pos in angebotspositionList) {\r\n            def aktion = pos?.Aktion\r\n            def vertragsID = pos?.VertragsID\r\n\r\n            if (aktion && !aktion.equalsIgnoreCase(\"neu\")) {\r\n                if (!vertragsID || vertragsID.isEmpty()) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\n/*\r\ndef getFirstMissingVertragsID(angebotspositionList, vertragList) {\r\n    def bestandVertragsIDs = []\r\n    if (vertragList instanceof List) {\r\n        bestandVertragsIDs = vertragList.collect { it?.ID }\r\n    }\r\n\r\n    if (angebotspositionList instanceof List) {\r\n        for (pos in angebotspositionList) {\r\n            def aktion = pos?.Aktion\r\n            def vertragsIDs = pos?.VertragsID\r\n\r\n            if (aktion && !aktion.equalsIgnoreCase(\"neu\") && vertragsIDs instanceof List) {\r\n                for (id in vertragsIDs) {\r\n                    if (!bestandVertragsIDs.contains(id)) {\r\n                        return id  // Return the first missing VertragsID\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}*/\r\n\r\ndef getFirstMissingVertragsID(angebotspositionList, vertragList) {\r\n    def bestandVertragsIDs = []\r\n    if (vertragList instanceof List) {\r\n        bestandVertragsIDs = vertragList.collect { it?.ID }\r\n    }\r\n\r\n    if (angebotspositionList instanceof List) {\r\n        for (pos in angebotspositionList) {\r\n            def aktion = pos?.Aktion\r\n\r\n            if (aktion && !aktion.equalsIgnoreCase(\"neu\")) {\r\n                def vertragsIDs = pos?.VertragsID\r\n                def uebergeordneteVertragsIDs = pos?.UebergeordneteVertragsID \r\n\r\n                // Check VertragsID list\r\n                if (vertragsIDs instanceof List) {\r\n                    for (id in vertragsIDs) {\r\n                        if (!bestandVertragsIDs.contains(id)) {\r\n                            return id\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Check uebergeordneteVertragsID list\r\n\r\n    if (uebergeordneteVertragsIDs) {\r\n        if (uebergeordneteVertragsIDs instanceof List) {\r\n            for (id in uebergeordneteVertragsIDs) {\r\n                if (!bestandVertragsIDs.contains(id)) {\r\n                return id\r\n            }\r\n        }\r\n      } else if (uebergeordneteVertragsIDs instanceof String) {\r\n                if (!bestandVertragsIDs.contains(uebergeordneteVertragsIDs)) {\r\n                return uebergeordneteVertragsIDs\r\n        }\r\n    }\r\n}\r\n\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\n\r\n\r\n\r\n",
				"isAsync":false,
				"parameters":{
					"Wunschtermin":"{{ _fto3G.outputs.pruefeAngebot.Angebot.Wunschtermin }}",
					"Preisliste":"{{ _fto3G.outputs.pruefeAngebot.Angebot.Preisliste }}",
					"Angebotsposition":{
						"source":"{{ _fto3G.outputs.pruefeAngebot.Angebot.Angebotsposition }}",
						"ua:type":"mappedArray",
						"items":{
							"Aktion":"{{ _fto3G.outputs.pruefeAngebot.Angebot.Angebotsposition[0].Aktion }}",
							"VertragsID":{
								"source":"{{ _fto3G.outputs.pruefeAngebot.Angebot.Angebotsposition[0].VertragsID }}",
								"ua:type":"mappedArray",
								"items":"{{ _fto3G.outputs.pruefeAngebot.Angebot.Angebotsposition[0].VertragsID[0] }}"
							},
							"UebergeordneteVertragsID":"{{ _fto3G.outputs.pruefeAngebot.Angebot.Angebotsposition[0].UebergeordneteVertragsID }}"
						}
					},
					"Vertrag":{
						"ua:type":"mappedArray",
						"source":"{{ _fto3G.outputs.pruefeAngebot.Bestand.Vertrag }}",
						"items":{
							"ID":"{{ _fto3G.outputs.pruefeAngebot.Bestand.Vertrag[0].Id }}"
						}
					}
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"throw ServiceFaults",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":2,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_0pbTS-1",
			"id":"_tRHdw",
			"index":0,
			"inputs":{
				"result":{
					"ServiceFaultReason":"{{ _efZYx.outputs.result.ServiceFaultReason }}",
					"isRepeatable":"{{ _efZYx.outputs.result.isRepeatable }}",
					"ServiceName":"{{ _efZYx.outputs.result.ServiceName }}",
					"ServiceFault":"{{ _efZYx.outputs.result.ServiceFault }}",
					"ServiceFaultClass":"{{ _efZYx.outputs.result.ServiceFaultClass }}",
					"BBFN":{
						"CustomerFunctions":"{{ _efZYx.outputs.result.BBFN.CustomerFunctions }}"
					},
					"ServiceVersion":"{{ _efZYx.outputs.result.ServiceVersion }}",
					"ServiceFaultSeverity":"{{ _efZYx.outputs.result.ServiceFaultSeverity }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":4130,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"version":55
}