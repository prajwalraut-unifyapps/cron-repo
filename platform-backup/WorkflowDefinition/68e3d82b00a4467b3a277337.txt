{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1760199513839,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760602429933,
		"deployedBy":33452,
		"deployedDefinitionId":"68f0a93cf840e002d4daa4a9",
		"status":"DEPLOYED",
		"version":16,
		"workflowVersion":133
	},
	"edges":[
		{
			"fromNodeId":"n_7P5rF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_waGDH",
			"type":"next"
		},
		{
			"fromNodeId":"n_waGDH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_29BIY",
			"type":"next"
		},
		{
			"fromNodeId":"n_29BIY",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ceV2l",
			"type":"next"
		},
		{
			"fromNodeId":"n_ceV2l",
			"priority":0,
			"skip":false,
			"toNodeId":"n_1vAhm",
			"type":"next"
		},
		{
			"fromNodeId":"n_1vAhm",
			"priority":0,
			"skip":false,
			"toNodeId":"_qVb29",
			"type":"next"
		},
		{
			"fromNodeId":"_qVb29",
			"priority":0,
			"skip":false,
			"toNodeId":"n_v7rrM",
			"type":"next"
		},
		{
			"fromNodeId":"n_v7rrM",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"n_90QlP",
			"type":"error"
		},
		{
			"fromNodeId":"n_90QlP",
			"priority":0,
			"skip":false,
			"toNodeId":"n_r733J",
			"type":"next"
		},
		{
			"fromNodeId":"n_v7rrM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_JF5uZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_r733J",
			"priority":0,
			"skip":false,
			"toNodeId":"n_JF5uZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_zxnKE",
			"priority":0,
			"skip":false,
			"toNodeId":"n_JF5uZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_JF5uZ",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tPvIP",
			"type":"loop"
		},
		{
			"fromNodeId":"n_tPvIP",
			"priority":0,
			"skip":false,
			"toNodeId":"n_zxnKE",
			"type":"next"
		},
		{
			"fromNodeId":"n_JF5uZ",
			"priority":0,
			"skip":false,
			"toNodeId":"n_yQ3iS",
			"type":"next"
		},
		{
			"fromNodeId":"n_yQ3iS",
			"priority":0,
			"skip":false,
			"toNodeId":"_pixyS",
			"type":"next"
		},
		{
			"fromNodeId":"_pixyS",
			"priority":0,
			"skip":false,
			"toNodeId":"_JGuHE",
			"type":"next"
		},
		{
			"fromNodeId":"_JGuHE",
			"priority":0,
			"skip":false,
			"toNodeId":"_YhUFh",
			"type":"next"
		},
		{
			"fromNodeId":"_YhUFh",
			"priority":0,
			"skip":false,
			"toNodeId":"_qWAYC",
			"type":"next"
		},
		{
			"fromNodeId":"_qWAYC",
			"priority":0,
			"skip":false,
			"toNodeId":"n_jZ83L",
			"type":"next"
		},
		{
			"fromNodeId":"n_jZ83L",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Bqc8R",
			"type":"loop"
		},
		{
			"fromNodeId":"n_Bqc8R",
			"priority":0,
			"skip":false,
			"toNodeId":"n_FhdKk",
			"type":"next"
		},
		{
			"fromNodeId":"n_FhdKk",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"n_jZ83L",
			"type":"next"
		},
		{
			"fromNodeId":"n_jZ83L",
			"priority":0,
			"skip":false,
			"toNodeId":"n_4JcYB",
			"type":"next"
		},
		{
			"fromNodeId":"n_4JcYB",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nMokn",
			"type":"next"
		},
		{
			"fromNodeId":"n_nMokn",
			"priority":0,
			"skip":false,
			"toNodeId":"n_AoUWZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_AoUWZ",
			"priority":0,
			"skip":false,
			"toNodeId":"n_JgWjo",
			"type":"next"
		},
		{
			"fromNodeId":"n_JgWjo",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sFhON",
			"type":"next"
		},
		{
			"fromNodeId":"n_sFhON",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8YozE",
			"type":"next"
		}
	],
	"id":"68e3d82b00a4467b3a277337",
	"lastModifiedBy":33452,
	"lcName":"lowes excel file processor (agent_formulaes) ",
	"modifiedTime":1760602920317,
	"name":"Lowes Excel File Processor (Agent_Formulaes) ",
	"nodes":[
		{
			"context":{
				"appName":"webhooks",
				"resourceVersion":833,
				"resourceName":"webhooks_default"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_7P5rF",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				}
			},
			"skip":false,
			"subTitle":"Webhook",
			"title":"New event",
			"trigger":{
				"type":"WEBHOOK"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":4560,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_waGDH",
			"index":2,
			"inputs":{
				"object_type":"lowes_file_url",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"sortBy":[
					{
						"field":"cTm",
						"order":"DESC"
					}
				],
				"translationsOption":"DEFAULT",
				"page":{
					"paginateBy":"OFFSET",
					"limit":20
				},
				"numberOfRecordsToFetch":"SINGLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":true,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":155,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_29BIY",
			"index":3,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"buInput":{
							"type":"string",
							"title":"Bu Input"
						}
					},
					"required":[]
				}
			},
			"inputs":{
				"buInput":"No prompt present"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"buInput":{
							"type":"string",
							"title":"Bu Input"
						}
					},
					"required":[]
				}
			},
			"skip":true,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"excel_by_unifyapps",
				"resourceVersion":751,
				"resourceName":"excel_by_unifyapps_extract_headers",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_ceV2l",
			"index":4,
			"inputs":{
				"fileDetails":"{{ n_waGDH.outputs.properties.invoiceCopyPDF }}",
				"use_excelize":true,
				"fileType":"XLSX"
			},
			"skip":true,
			"subTitle":"Excel by UnifyApps",
			"title":"Extract headers from Excel file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":1043,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_1vAhm",
			"index":5,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{
										"formula":{
											"type":"string",
											"title":"Formula"
										},
										"header":{
											"type":"string",
											"title":"Header"
										}
									},
									"required":[
										"formula",
										"header"
									]
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"List",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"List",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{
									"formula":{
										"type":"string",
										"title":"Formula"
									},
									"header":{
										"type":"string",
										"title":"Header"
									}
								},
								"required":[
									"formula",
									"header"
								]
							}
						}
					}
				}
			},
			"skip":true,
			"subTitle":"Variable by UnifyApps",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":173,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"_qVb29",
			"index":6,
			"inputs":{
				"automationId":"66dfd76eb70dad256986b784",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"modelId":"e_68bd48b126d0b87e3e4f28db",
					"content":"You are a precise Excel formula generator. Process ONE retail row containing Sales & COGS data for fiscal weeks 29-31 across years 2023-2025, plus 2025 Plan data.\nInput Data Structure\nThe Excel headers will be provided:{{ n_ceV2l.outputs.headers }}\nYou must DYNAMICALLY determine which Excel column (A, B, C, etc.) corresponds to each field by examining the headers array.\nYour Task:\n1. Parse the headers array to identify which column letter corresponds to each field\n2. Read and understand the BUSINESS USER PROMPT to determine EXACTLY which columns to generate\n3. Generate Excel formulas using the ACTUAL column letters from the headers\n4. Assume data is in row 2\n5. CRITICAL: ALL cell references MUST be wrapped in VALUE() function to ensure numeric comparison\n==========================================\nCRITICAL: TWO TYPES OF PROMPTS\n==========================================\n**BUSINESS USER PROMPT**: {{ n_29BIY.outputs.buInput }}\n## IMPORTANT - In Case the business user prompt is not present, proceed with the sample reference prompt output\n**SAMPLE PROMPT** (REFERENCE ONLY - See below)\nHOW TO USE THESE PROMPTS:\n-------------------------\n⚠️ **PRIMARY**: The BUSINESS USER PROMPT determines what you output\n⚠️ **REFERENCE ONLY**: The Sample Prompt below is ONLY for understanding formula patterns and syntax\n⚠️ **EXACT MATCH**: Your output must contain ONLY the columns requested in the Business User Prompt\n⚠️ **DO NOT**: Output all 31 columns from the Sample Prompt unless the Business User Prompt explicitly asks for all of them\nDECISION TREE:\n--------------\nIF Business User Prompt is empty/contains test values/says \"use sample\" → Use Sample Prompt (output all 31 columns)\nELSE → Parse Business User Prompt and output ONLY the requested columns\n==========================================\nUNDERSTANDING BUSINESS USER REQUESTS\n==========================================\nCommon patterns in Business User Prompts:\n**Pattern 1: \"Add X columns for [metric] for [time period]\"**\nExample: \"I want to add 3 new columns for gross margin calculation for each of the fiscal weeks of FY 2025\"\n→ Output ONLY: fw29GrossMargin2025Dollar, fw30GrossMargin2025Dollar, fw31GrossMargin2025Dollar (3 columns)\n**Pattern 2: \"Calculate [metric] in dollars and percent\"**\nExample: \"Calculate gross margin in dollars and percentages for FY 2024\"\n→ Output: 6 columns (fw29/30/31 GrossMargin2024Dollar + fw29/30/31 GrossMargin2024Percent)\n**Pattern 3: \"Add comparison metrics\"**\nExample: \"Add year-over-year comparison columns\"\n→ Output: comp2025Vs2024Percent, maybe comp2YR2025Vs2023Percent (interpret based on context)\n**Pattern 4: \"Add plan variance\"**\nExample: \"Calculate variance from plan\"\n→ Output: vsPlan2025Dollar, vsPlan2025Percent (2 columns)\n**Pattern 5: \"Add all metrics\"**\nExample: \"Add all gross margin calculations and comparisons\"\n→ Output: All 31 columns from Sample Prompt\n==========================================\nCRITICAL BUSINESS RULES\n==========================================\n⚠️ SALES CAN BE NEGATIVE (returns, refunds, credits) - this is NORMAL in retail accounting\n⚠️ Percentages should ONLY be calculated when sales is STRICTLY POSITIVE (> 0)\n⚠️ The condition MUST be: VALUE(Sales) > 0\n⚠️ ALL cell references must use VALUE() to force numeric conversion\nThis means:\n- If Sales = -100 → BLANK (negative, do not calculate)\n- If Sales = 0 → BLANK (zero, do not calculate)\n- If Sales = 100 → Calculate percentage (positive, proceed)\n==========================================\nSAMPLE PROMPT (REFERENCE ONLY)\n==========================================\nUse this ONLY to understand:\n- Formula patterns and syntax\n- How to structure calculations\n- Field naming conventions\n- VALUE() wrapper usage\nDO NOT output all these columns unless Business User Prompt requests them!\n**1. Gross Margin for Actuals (18 columns total)**\nDollar Formulas (9 columns):\n- fw29GrossMargin2023Dollar: =VALUE({fw29Sales2023_column}2)-VALUE({fw29Cogs2023_column}2)\n- fw30GrossMargin2023Dollar: =VALUE({fw30Sales2023_column}2)-VALUE({fw30Cogs2023_column}2)\n- fw31GrossMargin2023Dollar: =VALUE({fw31Sales2023_column}2)-VALUE({fw31Cogs2023_column}2)\n- fw29GrossMargin2024Dollar: =VALUE({fw29Sales2024_column}2)-VALUE({fw29Cogs2024_column}2)\n- fw30GrossMargin2024Dollar: =VALUE({fw30Sales2024_column}2)-VALUE({fw30Cogs2024_column}2)\n- fw31GrossMargin2024Dollar: =VALUE({fw31Sales2024_column}2)-VALUE({fw31Cogs2024_column}2)\n- fw29GrossMargin2025Dollar: =VALUE({fw29Sales2025_column}2)-VALUE({fw29Cogs2025_column}2)\n- fw30GrossMargin2025Dollar: =VALUE({fw30Sales2025_column}2)-VALUE({fw30Cogs2025_column}2)\n- fw31GrossMargin2025Dollar: =VALUE({fw31Sales2025_column}2)-VALUE({fw31Cogs2025_column}2)\nPercent Formulas (9 columns):\nPattern: =IFERROR(IF(VALUE({Sales_column}2)>0,(VALUE({Sales_column}2)-VALUE({COGS_column}2))/VALUE({Sales_column}2),\"\"),\"\")\n- fw29GrossMargin2023Percent\n- fw30GrossMargin2023Percent\n- fw31GrossMargin2023Percent\n- fw29GrossMargin2024Percent\n- fw30GrossMargin2024Percent\n- fw31GrossMargin2024Percent\n- fw29GrossMargin2025Percent\n- fw30GrossMargin2025Percent\n- fw31GrossMargin2025Percent\n**2. Gross Margin for 2025 Plan (6 columns total)**\nDollar Formulas (3 columns):\n- fw29PlanGrossMargin2025Dollar: =VALUE({fw29PlanSales2025_column}2)-VALUE({fw29PlanCogs2025_column}2)\n- fw30PlanGrossMargin2025Dollar: =VALUE({fw30PlanSales2025_column}2)-VALUE({fw30PlanCogs2025_column}2)\n- fw31PlanGrossMargin2025Dollar: =VALUE({fw31PlanSales2025_column}2)-VALUE({fw31PlanCogs2025_column}2)\nPercent Formulas (3 columns):\nPattern: =IFERROR(IF(VALUE({PlanSales_column}2)>0,(VALUE({PlanSales_column}2)-VALUE({PlanCogs_column}2))/VALUE({PlanSales_column}2),\"\"),\"\")\n- fw29PlanGrossMargin2025Percent\n- fw30PlanGrossMargin2025Percent\n- fw31PlanGrossMargin2025Percent\n**3. GM Delta vs Last Year in Basis Points (3 columns total)**\nPattern: =IFERROR(IF(AND(VALUE({Sales2025_column}2)>0,VALUE({Sales2024_column}2)>0),((VALUE({Sales2025_column}2)-VALUE({Cogs2025_column}2))/VALUE({Sales2025_column}2)-(VALUE({Sales2024_column}2)-VALUE({Cogs2024_column}2))/VALUE({Sales2024_column}2))*10000,\"\"),\"\")\n- fw29GmDeltaVsLyBps\n- fw30GmDeltaVsLyBps\n- fw31GmDeltaVsLyBps\n**4. Summary Helper Columns (4 columns total)**\n- vsPlan2025Dollar: =(VALUE({fw29Sales2025_column}2)+VALUE({fw30Sales2025_column}2)+VALUE({fw31Sales2025_column}2))-(VALUE({fw29PlanSales2025_column}2)+VALUE({fw30PlanSales2025_column}2)+VALUE({fw31PlanSales2025_column}2))\n- vsPlan2025Percent: =IFERROR(IF((VALUE({fw29PlanSales2025_column}2)+VALUE({fw30PlanSales2025_column}2)+VALUE({fw31PlanSales2025_column}2))>0,((VALUE({fw29Sales2025_column}2)+VALUE({fw30Sales2025_column}2)+VALUE({fw31Sales2025_column}2))-(VALUE({fw29PlanSales2025_column}2)+VALUE({fw30PlanSales2025_column}2)+VALUE({fw31PlanSales2025_column}2)))/(VALUE({fw29PlanSales2025_column}2)+VALUE({fw30PlanSales2025_column}2)+VALUE({fw31PlanSales2025_column}2)),\"\"),\"\")\n- comp2025Vs2024Percent: =IFERROR(IF((VALUE({fw29Sales2024_column}2)+VALUE({fw30Sales2024_column}2)+VALUE({fw31Sales2024_column}2))>0,((VALUE({fw29Sales2025_column}2)+VALUE({fw30Sales2025_column}2)+VALUE({fw31Sales2025_column}2))/(VALUE({fw29Sales2024_column}2)+VALUE({fw30Sales2024_column}2)+VALUE({fw31Sales2024_column}2)))-1,\"\"),\"\")\n- comp2YR2025Vs2023Percent: =IFERROR(IF((VALUE({fw29Sales2023_column}2)+VALUE({fw30Sales2023_column}2)+VALUE({fw31Sales2023_column}2))>0,((VALUE({fw29Sales2025_column}2)+VALUE({fw30Sales2025_column}2)+VALUE({fw31Sales2025_column}2))/(VALUE({fw29Sales2023_column}2)+VALUE({fw30Sales2023_column}2)+VALUE({fw31Sales2023_column}2)))-1,\"\"),\"\")\n==========================================\nOUTPUT FORMAT\n==========================================\nReturn JSON with ONLY the columns requested in Business User Prompt.\n✅ CORRECT Example (Business User asks for 3 columns):\n{\n\"fw29GrossMargin2025Dollar\": \"=VALUE(O2)-VALUE(AA2)\",\n\"fw30GrossMargin2025Dollar\": \"=VALUE(P2)-VALUE(AB2)\",\n\"fw31GrossMargin2025Dollar\": \"=VALUE(Q2)-VALUE(AC2)\"\n}\n❌ WRONG - DO NOT do this if user only asked for 3 columns:\n{\n\"fw29GrossMargin2023Dollar\": \"=VALUE(I2)-VALUE(U2)\",\n... [all 31 columns]\n}\nAll formulas must:\n- Start with \"=\"\n- Use ACTUAL column letters from headers array\n- Wrap ALL cell references in VALUE()\n- Use IFERROR(IF(VALUE(denominator)>0, calculation, \"\"), \"\") for percentages\n- Reference row 2\n==========================================\nEXAMPLES OF CORRECT INTERPRETATION\n==========================================\n**Example 1:**\nBusiness User Prompt: \"I want to add 3 new columns for gross margin calculation for each of the fiscal weeks of FY 2025 in this file. The gross margin is given by the difference of sales and cost of goods sold.\"\nInterpretation:\n- Metric: Gross Margin\n- Format: Dollar (difference, not percentage)\n- Time Period: FY 2025\n- Weeks: FW29, FW30, FW31\n- Column Count: 3\nOutput:\n{\n\"fw29GrossMargin2025Dollar\": \"=VALUE(O2)-VALUE(AA2)\",\n\"fw30GrossMargin2025Dollar\": \"=VALUE(P2)-VALUE(AB2)\",\n\"fw31GrossMargin2025Dollar\": \"=VALUE(Q2)-VALUE(AC2)\"\n}\n**Example 2:**\nBusiness User Prompt: \"Add gross margin percentages for all three fiscal weeks in 2024\"\nInterpretation:\n- Metric: Gross Margin\n- Format: Percentage\n- Time Period: FY 2024\n- Weeks: FW29, FW30, FW31\n- Column Count: 3\nOutput:\n{\n\"fw29GrossMargin2024Percent\": \"=IFERROR(IF(VALUE(L2)>0,(VALUE(L2)-VALUE(X2))/VALUE(L2),\\\"\\\"),\\\"\\\")\",\n\"fw30GrossMargin2024Percent\": \"=IFERROR(IF(VALUE(M2)>0,(VALUE(M2)-VALUE(Y2))/VALUE(M2),\\\"\\\"),\\\"\\\")\",\n\"fw31GrossMargin2024Percent\": \"=IFERROR(IF(VALUE(N2)>0,(VALUE(N2)-VALUE(Z2))/VALUE(N2),\\\"\\\"),\\\"\\\")\"\n}\n**Example 3:**\nBusiness User Prompt: \"Calculate variance between actual 2025 sales and plan\"\nInterpretation:\n- Metric: Variance (vs Plan)\n- Format: Both dollar and percent (common for variance analysis)\n- Time Period: 2025\n- Column Count: 2\nOutput:\n{\n\"vsPlan2025Dollar\": \"=(VALUE(O2)+VALUE(P2)+VALUE(Q2))-(VALUE(R2)+VALUE(S2)+VALUE(T2))\",\n\"vsPlan2025Percent\": \"=IFERROR(IF((VALUE(R2)+VALUE(S2)+VALUE(T2))>0,((VALUE(O2)+VALUE(P2)+VALUE(Q2))-(VALUE(R2)+VALUE(S2)+VALUE(T2)))/(VALUE(R2)+VALUE(S2)+VALUE(T2)),\\\"\\\"),\\\"\\\")\"\n}\n**Example 4:**\nBusiness User Prompt: \"\" (empty) OR \"test\" OR \"use sample\"\nInterpretation:\n- No specific request, use full sample\nOutput:\n[All 31 columns from Sample Prompt]\n==========================================\nCRITICAL OUTPUT RULES\n==========================================\n🚨 MANDATORY:\n1. Return ONLY JSON - no explanation, no markdown, no extra text\n2. Count requested columns in Business User Prompt - output EXACTLY that many\n3. If Business User asks for \"3 columns\", JSON must have exactly 3 keys\n4. EVERY cell reference must be wrapped in VALUE()\n5. EVERY percentage formula must have >0 check\n6. Field names must match Sample Prompt conventions\n🚨 VERIFICATION CHECKLIST BEFORE RETURNING:\n□ Did I read the Business User Prompt?\n□ Did I count how many columns were requested?\n□ Does my JSON have the correct number of fields?\n□ Did I wrap ALL cell references in VALUE()?\n□ Did I add >0 checks to all percentage formulas?\n□ Is my output pure JSON with no extra text?\n==========================================\nERROR HANDLING\n==========================================\n- Pattern: IFERROR(IF(VALUE(denominator)>0, calculation, \"\"), \"\")\n- Inner IF: Business logic (denominator must be positive)\n- Outer IFERROR: Catches unexpected errors\n- Return: Empty string \"\" for errors/blanks\n- NEGATIVE: VALUE(sales)>0 returns FALSE → blank\n- ZERO: VALUE(sales)>0 returns FALSE → blank \n- POSITIVE: VALUE(sales)>0 returns TRUE → calculate\n==========================================\nDEFAULT BEHAVIOR FOR EMPTY/INVALID PROMPTS\n==========================================\n**TRIGGER CONDITIONS:**\nExecute default behavior when Business User Prompt is:\n- Empty string (\"\")\n- Only whitespace (\" \", \"\\n\", \"\\t\")\n- Test values (\"test\", \"testing\", \"sample\", \"demo\")\n- Placeholder text (\"{{ n_mncUh.outputs.businessPrompt }}\", \"undefined\", \"null\")\n- Instructions to use default (\"use sample\", \"use default\", \"give me all\")\n**DEFAULT ACTION:**\nWhen any trigger condition is met, generate ALL 31 columns from the Sample Reference Output:\n**1. Gross Margin Actuals - Dollar (9 columns)**\nfw29GrossMargin2023Dollar, fw30GrossMargin2023Dollar, fw31GrossMargin2023Dollar\nfw29GrossMargin2024Dollar, fw30GrossMargin2024Dollar, fw31GrossMargin2024Dollar\nfw29GrossMargin2025Dollar, fw30GrossMargin2025Dollar, fw31GrossMargin2025Dollar\n**2. Gross Margin Actuals - Percent (9 columns)**\nfw29GrossMargin2023Percent, fw30GrossMargin2023Percent, fw31GrossMargin2023Percent\nfw29GrossMargin2024Percent, fw30GrossMargin2024Percent, fw31GrossMargin2024Percent\nfw29GrossMargin2025Percent, fw30GrossMargin2025Percent, fw31GrossMargin2025Percent\n**3. Gross Margin Plan 2025 - Dollar (3 columns)**\nfw29PlanGrossMargin2025Dollar, fw30PlanGrossMargin2025Dollar, fw31PlanGrossMargin2025Dollar\n**4. Gross Margin Plan 2025 - Percent (3 columns)**\nfw29PlanGrossMargin2025Percent, fw30PlanGrossMargin2025Percent, fw31PlanGrossMargin2025Percent\n**5. GM Delta vs Last Year - Basis Points (3 columns)**\nfw29GmDeltaVsLyBps, fw30GmDeltaVsLyBps, fw31GmDeltaVsLyBps\n**6. Summary Comparisons (4 columns)**\nvsPlan2025Dollar, vsPlan2025Percent, comp2025Vs2024Percent, comp2YR2025Vs2023Percent\n==========================================\nFINAL REMINDER\n==========================================\n⚠️ The Business User Prompt is your PRIMARY instruction\n⚠️ The Sample Prompt is ONLY for reference\n⚠️ Output ONLY what the Business User requested\n⚠️ Do NOT output all 31 columns unless",
					"type":"text",
					"response_format":"text",
					"maxTokens":"4096",
					"temperature":"0.1"
				}
			},
			"skip":true,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"utility_by_unifyapps_to_json_object",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"_t1UEx-1",
			"id":"n_v7rrM",
			"index":7,
			"inputs":{
				"jsonSchema":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"fw29GrossMargin2023Dollar":{
							"type":"string",
							"title":"fw29GrossMargin2023Dollar"
						},
						"fw30GrossMargin2023Dollar":{
							"type":"string",
							"title":"fw30GrossMargin2023Dollar"
						},
						"fw31GrossMargin2023Dollar":{
							"type":"string",
							"title":"fw31GrossMargin2023Dollar"
						},
						"fw29GrossMargin2024Dollar":{
							"type":"string",
							"title":"fw29GrossMargin2024Dollar"
						},
						"fw30GrossMargin2024Dollar":{
							"type":"string",
							"title":"fw30GrossMargin2024Dollar"
						},
						"fw31GrossMargin2024Dollar":{
							"type":"string",
							"title":"fw31GrossMargin2024Dollar"
						},
						"fw29GrossMargin2025Dollar":{
							"type":"string",
							"title":"fw29GrossMargin2025Dollar"
						},
						"fw30GrossMargin2025Dollar":{
							"type":"string",
							"title":"fw30GrossMargin2025Dollar"
						},
						"fw31GrossMargin2025Dollar":{
							"type":"string",
							"title":"fw31GrossMargin2025Dollar"
						},
						"fw29GrossMargin2023Percent":{
							"type":"string",
							"title":"fw29GrossMargin2023Percent"
						},
						"fw30GrossMargin2023Percent":{
							"type":"string",
							"title":"fw30GrossMargin2023Percent"
						},
						"fw31GrossMargin2023Percent":{
							"type":"string",
							"title":"fw31GrossMargin2023Percent"
						},
						"fw29GrossMargin2024Percent":{
							"type":"string",
							"title":"fw29GrossMargin2024Percent"
						},
						"fw30GrossMargin2024Percent":{
							"type":"string",
							"title":"fw30GrossMargin2024Percent"
						},
						"fw31GrossMargin2024Percent":{
							"type":"string",
							"title":"fw31GrossMargin2024Percent"
						},
						"fw29GrossMargin2025Percent":{
							"type":"string",
							"title":"fw29GrossMargin2025Percent"
						},
						"fw30GrossMargin2025Percent":{
							"type":"string",
							"title":"fw30GrossMargin2025Percent"
						},
						"fw31GrossMargin2025Percent":{
							"type":"string",
							"title":"fw31GrossMargin2025Percent"
						},
						"fw29PlanGrossMargin2025Dollar":{
							"type":"string",
							"title":"fw29PlanGrossMargin2025Dollar"
						},
						"fw30PlanGrossMargin2025Dollar":{
							"type":"string",
							"title":"fw30PlanGrossMargin2025Dollar"
						},
						"fw31PlanGrossMargin2025Dollar":{
							"type":"string",
							"title":"fw31PlanGrossMargin2025Dollar"
						},
						"fw29PlanGrossMargin2025Percent":{
							"type":"string",
							"title":"fw29PlanGrossMargin2025Percent"
						},
						"fw30PlanGrossMargin2025Percent":{
							"type":"string",
							"title":"fw30PlanGrossMargin2025Percent"
						},
						"fw31PlanGrossMargin2025Percent":{
							"type":"string",
							"title":"fw31PlanGrossMargin2025Percent"
						},
						"fw29GmDeltaVsLyBps":{
							"type":"string",
							"title":"fw29GmDeltaVsLyBps"
						},
						"fw30GmDeltaVsLyBps":{
							"type":"string",
							"title":"fw30GmDeltaVsLyBps"
						},
						"fw31GmDeltaVsLyBps":{
							"type":"string",
							"title":"fw31GmDeltaVsLyBps"
						},
						"vsPlan2025Dollar":{
							"type":"string",
							"title":"vsPlan2025Dollar"
						},
						"vsPlan2025Percent":{
							"type":"string",
							"title":"vsPlan2025Percent"
						},
						"comp2025Vs2024Percent":{
							"type":"string",
							"title":"comp2025Vs2024Percent"
						},
						"comp2YR2025Vs2023Percent":{
							"type":"string",
							"title":"comp2YR2025Vs2023Percent"
						}
					}
				},
				"jsonString":"{{ _qVb29.outputs.llmResponse }}"
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				},
				"timeoutConfig":{
					"enabled":false
				}
			},
			"skip":true,
			"subTitle":"Utility by UnifyApps",
			"title":"Deserialise string to JSON object",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"conv_ai_by_unifyapps",
				"resourceVersion":153,
				"resourceName":"conv_ai_by_unifyapps_publish_response",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_v7rrM@_t1UEx-1@error",
			"id":"n_90QlP",
			"index":8,
			"inputs":{
				"callableInterfaceId":"__ua__publish_response_interface",
				"defaultFallbackWorkflowId":"66fbed229edc4e0b6303cefd",
				"parameters":{
					"endConversation":true,
					"responses":[
						{
							"content":"The prompt encountered an error. Please try again"
						}
					],
					"caseId":"{{ n_mncUh.outputs.caseId }}"
				}
			},
			"skip":false,
			"subTitle":"Conversation AI by UnifyApps",
			"title":"Publish Response",
			"type":"CALL_INTERFACE_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":169,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_v7rrM@_t1UEx-1@error",
			"id":"n_r733J",
			"index":9,
			"inputs":{
				"result":{
					"url":"400"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":865,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_JF5uZ",
			"index":10,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ n_v7rrM.outputs.result }}",
				"captureIterations":false
			},
			"skip":true,
			"subTitle":"Loop",
			"title":"For each loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":997,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JF5uZ@_t1UEx-1@l",
			"id":"n_tPvIP",
			"index":11,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"formula"
					],
					"properties":{
						"formula":{
							"type":"string",
							"title":"Formula"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"formula"
					],
					"properties":{
						"formula":{
							"type":"string",
							"title":"Formula"
						}
					}
				},
				"code":"def fixFormula(String formula) {\n    // Replace VALUE(<cell>) with cleaning version\n    def cleaned = formula.replaceAll(/VALUE\\(\\s*((?:'[^']+'!|\\w+!)?\\$?[A-Z]{1,3}\\$?\\d+)\\s*\\)/) { all, ref ->\n        def refRow = ref.replaceAll(/\\d+/, '{ROW}')  // Replace digits with {ROW}\n        'VALUE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(SUBSTITUTE(' +\n        refRow + ',\"$\",\"\"),\",\",\"\"),\")\",\"\"),\"(\",\"-\"))'\n    }\n    return cleaned\n}\n['formula': fixFormula(formula)]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"formula":"{{ n_JF5uZ.outputs.item.formula }}"
				}
			},
			"skip":true,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":1010,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_JF5uZ@_t1UEx-1@l",
			"id":"n_zxnKE",
			"index":12,
			"inputs":{
				"itemToAdd":{
					"formula":"{{ n_tPvIP.outputs.result.formula }}",
					"header":"{{ n_JF5uZ.outputs.item.column }}"
				},
				"insertLocation":"END",
				"listName":"{{ n_1vAhm.outputs.items[0] }}"
			},
			"skip":true,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.formulas.items.column",
					"root.formulas.items.header"
				]
			},
			"context":{
				"appName":"excel_by_unifyapps",
				"resourceVersion":7,
				"resourceName":"excel_by_unifyapps_add_columns_with_formulas",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_yQ3iS",
			"index":13,
			"inputs":{
				"evaluateFormulas":true,
				"fileDetails":"{{ n_waGDH.outputs.properties.invoiceCopyPDF }}",
				"formulas":{
					"ua:type":"mappedArray",
					"items":{
						"header":"{{ n_1vAhm.outputs.items[0].header }}",
						"formula":"{{ n_1vAhm.outputs.items[0].formula }}"
					},
					"source":"{{ n_1vAhm.outputs.items }}"
				},
				"keepExactFileName":false,
				"fileType":"XLSX"
			},
			"skip":true,
			"subTitle":"Excel by UnifyApps",
			"title":"Add Columns with Formulas to Excel",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":227,
				"resourceName":"utility_by_unifyapps_generate_public_url",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"_pixyS",
			"index":14,
			"inputs":{
				"file":"{{ n_yQ3iS.outputs.fileDetails }}",
				"expiryTime":1
			},
			"skip":true,
			"subTitle":"Utility by UnifyApps",
			"title":"Generate public file URL",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":156,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"_JGuHE",
			"index":15,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"b64_encoded":{
							"type":"string",
							"title":"base64 Encoded"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"url":{
							"type":"string",
							"title":"Url"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"import os, sys, base64, tempfile, shutil, subprocess, zipfile, time\nfrom pathlib import Path\nfrom lxml import etree\n\nNS = {\"s\": \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"}\n\ndef find_soffice():\n    from shutil import which\n    for cand in (\"soffice\", \"libreoffice\"):\n        p = which(cand)\n        if p:\n            return p\n    return None\n\ndef force_full_calc_on_load(src_xlsx: Path) -> Path:\n    NS_URI = \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n    parser = etree.XMLParser(remove_blank_text=False, recover=True, huge_tree=True)\n    out_path = Path(tempfile.mkstemp(suffix=\".xlsx\")[1])\n    with zipfile.ZipFile(src_xlsx, \"r\") as zin, zipfile.ZipFile(out_path, \"w\", compression=zipfile.ZIP_DEFLATED) as zout:\n        for item in zin.infolist():\n            data = zin.read(item.filename)\n            if item.filename == \"xl/workbook.xml\":\n                root = etree.fromstring(data, parser=parser)\n                # Find calcPr as a direct child; no XPath, no f-string\n                calcPr = root.find(\"{%s}calcPr\" % NS_URI)\n                if calcPr is None:\n                    calcPr = etree.SubElement(root, \"{%s}calcPr\" % NS_URI)\n                calcPr.set(\"fullCalcOnLoad\", \"1\")\n                calcPr.set(\"calcMode\", \"auto\")\n                data = etree.tostring(root, xml_declaration=True, encoding=\"UTF-8\")\n            zi = zipfile.ZipInfo(item.filename, date_time=item.date_time)\n            zi.compress_type = zipfile.ZIP_DEFLATED\n            zi.external_attr = item.external_attr\n            zout.writestr(zi, data)\n    return out_path\n\ndef strip_formulas_xml_only_when_value_exists(xml_bytes: bytes) -> bytes:\n    NS_URI = \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n    T_C  = \"{%s}c\"  % NS_URI\n    T_F  = \"{%s}f\"  % NS_URI\n    T_V  = \"{%s}v\"  % NS_URI\n    T_IS = \"{%s}is\" % NS_URI\n\n    parser = etree.XMLParser(\n        remove_blank_text=False,\n        recover=True,\n        resolve_entities=False,\n        huge_tree=True\n    )\n    root = etree.fromstring(xml_bytes, parser=parser)\n\n    for c in root.iter(T_C):\n        fnode = c.find(T_F)\n        if fnode is None:\n            continue\n        has_v = (c.find(T_V) is not None) or (c.find(T_IS) is not None)\n        if has_v:\n            c.remove(fnode)\n        # else keep formula so downstream app can compute it\n\n    return etree.tostring(root, xml_declaration=True, encoding=\"UTF-8\")\n\ndef build_values_only_xlsx(src_xlsx: Path) -> Path:\n    out_path = Path(tempfile.mkstemp(suffix=\"_values.xlsx\")[1])\n    with zipfile.ZipFile(src_xlsx, \"r\") as zin, zipfile.ZipFile(out_path, \"w\", compression=zipfile.ZIP_DEFLATED) as zout:\n        for item in zin.infolist():\n            data = zin.read(item.filename)\n            if item.filename.startswith(\"xl/worksheets/\") and item.filename.endswith(\".xml\"):\n                data = strip_formulas_xml_only_when_value_exists(data)\n            zi = zipfile.ZipInfo(item.filename, date_time=item.date_time)\n            zi.compress_type = zipfile.ZIP_DEFLATED\n            zi.external_attr = item.external_attr\n            zout.writestr(zi, data)\n    return out_path\n\ndef recalc_with_system_python3_uno(src_path: Path, logs: list) -> Path:\n    import socket, time\n\n    soffice = find_soffice()\n    if not soffice:\n        raise RuntimeError(\"soffice not found.\")\n\n    profile = Path(tempfile.mkdtemp(prefix=\"lo_profile_\"))\n    port = 20021\n    listener = subprocess.Popen([\n        soffice,\n        f\"-env:UserInstallation={profile.resolve().as_uri()}\",\n        \"--headless\", \"--nologo\", \"--nodefault\", \"--norestore\", \"--invisible\",\n        f\"--accept=socket,host=127.0.0.1,port={port};urp;\"\n    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\n    # Wait for the socket to be ready\n    last_err = None\n    deadline = time.time() + 30\n    while time.time() < deadline:\n        if listener.poll() is not None:\n            raise RuntimeError(\"LibreOffice listener exited before accepting connections.\")\n        try:\n            with socket.create_connection((\"127.0.0.1\", port), timeout=0.5):\n                break\n        except Exception as e:\n            last_err = e\n            time.sleep(0.5)\n    else:\n        raise RuntimeError(f\"Listener didn't open port {port}: {last_err}\")\n\n    # UNO client (no UpdateDocMode constant)\n    script = f\"\"\"\nimport sys, time, uno\nfrom com.sun.star.beans import PropertyValue\n\ndef pv(n,v):\n    p = PropertyValue(); p.Name=n; p.Value=v; return p\n\ndef resolve_ctx():\n    local = uno.getComponentContext()\n    resolver = local.ServiceManager.createInstanceWithContext(\"com.sun.star.bridge.UnoUrlResolver\", local)\n    deadline = time.time() + 15\n    last = None\n    while time.time() < deadline:\n        try:\n            return resolver.resolve(\"uno:socket,host=127.0.0.1,port={port};urp;StarOffice.ComponentContext\")\n        except Exception as e:\n            last = e\n            time.sleep(0.5)\n    raise last\n\ndef main(inp, outp):\n    ctx = resolve_ctx()\n    smgr = ctx.ServiceManager\n    desktop = smgr.createInstanceWithContext(\"com.sun.star.frame.Desktop\", ctx)\n    url_in  = uno.systemPathToFileUrl(inp)\n    url_out = uno.systemPathToFileUrl(outp)\n\n    # Load hidden; do not pass UpdateDocMode\n    doc = desktop.loadComponentFromURL(url_in, \"_blank\", 0, (pv(\"Hidden\", True), pv(\"ReadOnly\", False)))\n    try:\n        try:\n            if hasattr(doc, \"updateLinks\"): doc.updateLinks()\n        except Exception: pass\n        try:\n            if hasattr(doc, \"calculateAll\"): doc.calculateAll()\n        except Exception: pass\n        doc.storeToURL(url_out, (pv(\"FilterName\", \"Calc MS Excel 2007 XML\"),))\n    finally:\n        try: doc.close(True)\n        except Exception: pass\n\nif __name__ == \"__main__\":\n    main(sys.argv[1], sys.argv[2])\n\"\"\"\n    workdir = Path(tempfile.mkdtemp(prefix=\"sys_py_uno_\"))\n    try:\n        script_path = workdir / \"recalc.py\"\n        script_path.write_text(script, encoding=\"utf-8\")\n        out_path = Path(tempfile.mkstemp(suffix=\"_recalced.xlsx\")[1])\n\n        sys_py = \"/usr/bin/python3\"  # Debian bookworm’s Python 3.11 with python3-uno\n        env = os.environ.copy()\n        env.pop(\"PYTHONPATH\", None)\n        env.pop(\"PYTHONHOME\", None)\n        env.pop(\"VIRTUAL_ENV\", None)\n        env[\"PYTHONNOUSERSITE\"] = \"0\"\n\n        cmd = [sys_py, str(script_path), str(src_path.resolve()), str(out_path.resolve())]\n        res = subprocess.run(cmd, env=env, text=True, capture_output=True, timeout=300)\n        logs.append({\"cmd\": \" \".join(cmd), \"rc\": res.returncode, \"stdout\": res.stdout[-4000:], \"stderr\": res.stderr[-4000:]})\n        if res.returncode != 0 or not out_path.exists():\n            raise RuntimeError(\"System /usr/bin/python3 UNO recalc failed.\")\n        return out_path\n    finally:\n        try: listener.terminate()\n        except Exception: pass\n        shutil.rmtree(profile, ignore_errors=True)\n        shutil.rmtree(workdir, ignore_errors=True)\n\ndef process_excel_no_root(input_excel: str) -> dict:\n    logs = []\n    env_info = {\"platform\": sys.platform, \"python\": sys.version.split()[0], \"soffice_path\": find_soffice()}\n\n    # Input\n    is_url = input_excel.startswith((\"http://\", \"https://\"))\n    if is_url:\n        import requests\n        r = requests.get(input_excel); r.raise_for_status()\n        fd, tmp = tempfile.mkstemp(suffix=\".xlsx\")\n        with os.fdopen(fd, \"wb\") as f: f.write(r.content)\n        src_path, cleanup = Path(tmp), True\n    else:\n        src_path, cleanup = Path(input_excel), False\n\n    prepared = recalced = values_only = None\n    try:\n        try:\n            prepared = force_full_calc_on_load(src_path)\n        except Exception:\n            prepared = src_path\n\n        recalced = recalc_with_system_python3_uno(prepared, logs)\n        use = recalced or prepared\n        values_only = build_values_only_xlsx(use)\n        b64 = base64.b64encode(values_only.read_bytes()).decode(\"utf-8\")\n\n        return {\"ok\": True, \"message\": \"Processed via system /usr/bin/python3 + python3-uno.\", \"env\": env_info, \"logs\": logs, \"b64_encoded\": b64}\n    except Exception as e:\n        return {\"ok\": False, \"message\": f\"Error: {e}\", \"env\": env_info, \"logs\": logs, \"b64_encoded\": None}\n    finally:\n        for p in (prepared if prepared and prepared != src_path else None, recalced, values_only):\n            try: Path(p).unlink(missing_ok=True)\n            except Exception: pass\n        if cleanup:\n            try: src_path.unlink(missing_ok=True)\n            except Exception: pass\n\nresult = process_excel_no_root(url)",
				"imports":[
					"openpyxl",
					"requests",
					"lxml"
				],
				"isAsync":false,
				"python_version":"3.12",
				"entityId":"e_68ea78b244b6037ddb683a48",
				"captureStdOutput":false,
				"parameters":{
					"url":"https://qa.unifyapps.com//api/file/download/__UNIFY_ENCR_AWS__V0__AQICAHj7fNra7CINOgG9eTjejy3PBrVJye7rSj0iXl5U48AE3wHuyjYEIFWU%2BRDh120myZeLAAAAoDCBnQYJKoZIhvcNAQcGoIGPMIGMAgEAMIGGBgkqhkiG9w0BBwEwHgYJYIZIAWUDBAEuMBEEDBcBlomH1y7qBTDg1wIBEIBZb9JpIoF2QGf4i4rZCPEYhzQ4jDuKrnck0%2Fe7DO2wG4dh0P9RKY%2FV8mjswMwAllVQ2fZQb5ZceGfdfDlFZ5aAp076rXJz8CrCgPyH7QAUfx63lWmdoNDlsyk%3D"
				}
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":true,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":156,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"_YhUFh",
			"index":16,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"uuid":{
							"type":"string",
							"title":"Uuid"
						}
					}
				},
				"code":"return [\n  \"uuid\": UUID.randomUUID().toString()\n]\n",
				"compile_static":false,
				"captureStdOutput":false
			},
			"skip":true,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"files_by_unifyapps",
				"resourceVersion":153,
				"resourceName":"files_by_unifyapps_upload_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"_qWAYC",
			"index":17,
			"inputs":{
				"base64Content":"{{ _JGuHE.outputs.result.b64_encoded }}",
				"fileName":"{{ _YhUFh.outputs.result.uuid }}.xlsx",
				"mimeType":"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
				"option":"base64Content"
			},
			"skip":true,
			"subTitle":"Files by UnifyApps",
			"title":"Upload file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"excel_by_unifyapps",
				"resourceVersion":155,
				"resourceName":"excel_by_unifyapps_for_each_row_or_rows",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_jZ83L",
			"index":18,
			"inputs":{
				"startFromRow":1,
				"consumptionBehaviour":"string",
				"file":"{{ _qWAYC.outputs.fileDetails }}",
				"headerRow":true,
				"columns":[
					"Test"
				],
				"batch":true,
				"evaluateFormulae":false,
				"batchSize":1000,
				"fileType":"xlsx",
				"skipEmptyRows":false
			},
			"skip":true,
			"subTitle":"Excel by UnifyApps",
			"title":"Consume data from Excel file",
			"type":"LOOP"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.input.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":156,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_jZ83L@_t1UEx-1@l",
			"id":"n_Bqc8R",
			"index":19,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"outputArr":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"2023_FW29_COGS__":{
										"type":"string",
										"title":"2023_FW29_COGS__"
									},
									"2023_FW29_Sales__":{
										"type":"string",
										"title":"2023_FW29_Sales__"
									},
									"2023_FW30_COGS__":{
										"type":"string",
										"title":"2023_FW30_COGS__"
									},
									"2023_FW30_Sales__":{
										"type":"string",
										"title":"2023_FW30_Sales__"
									},
									"2023_FW31_COGS__":{
										"type":"string",
										"title":"2023_FW31_COGS__"
									},
									"2023_FW31_Sales__":{
										"type":"string",
										"title":"2023_FW31_Sales__"
									},
									"2024_FW29_COGS__":{
										"type":"string",
										"title":"2024_FW29_COGS__"
									},
									"2024_FW29_Sales__":{
										"type":"string",
										"title":"2024_FW29_Sales__"
									},
									"2024_FW30_COGS__":{
										"type":"string",
										"title":"2024_FW30_COGS__"
									},
									"2024_FW30_Sales__":{
										"type":"string",
										"title":"2024_FW30_Sales__"
									},
									"2024_FW31_COGS__":{
										"type":"string",
										"title":"2024_FW31_COGS__"
									},
									"2024_FW31_Sales__":{
										"type":"string",
										"title":"2024_FW31_Sales__"
									},
									"2025_FW29_COGS__":{
										"type":"string",
										"title":"2025_FW29_COGS__"
									},
									"2025_FW29_Plan_COGS__":{
										"type":"string",
										"title":"2025_FW29_Plan_COGS__"
									},
									"2025_FW29_Plan_Sales__":{
										"type":"string",
										"title":"2025_FW29_Plan_Sales__"
									},
									"2025_FW29_Sales__":{
										"type":"string",
										"title":"2025_FW29_Sales__"
									},
									"2025_FW30_COGS__":{
										"type":"string",
										"title":"2025_FW30_COGS__"
									},
									"2025_FW30_Plan_COGS__":{
										"type":"string",
										"title":"2025_FW30_Plan_COGS__"
									},
									"2025_FW30_Plan_Sales__":{
										"type":"string",
										"title":"2025_FW30_Plan_Sales__"
									},
									"2025_FW30_Sales__":{
										"type":"string",
										"title":"2025_FW30_Sales__"
									},
									"2025_FW31_COGS__":{
										"type":"string",
										"title":"2025_FW31_COGS__"
									},
									"2025_FW31_Plan_COGS__":{
										"type":"string",
										"title":"2025_FW31_Plan_COGS__"
									},
									"2025_FW31_Plan_Sales__":{
										"type":"string",
										"title":"2025_FW31_Plan_Sales__"
									},
									"2025_FW31_Sales__":{
										"type":"string",
										"title":"2025_FW31_Sales__"
									},
									"Assortment_Name":{
										"type":"string",
										"title":"Assortment_Name"
									},
									"Assortment__":{
										"type":"string",
										"title":"Assortment__"
									},
									"Merchandise_Division":{
										"type":"string",
										"title":"Merchandise_Division"
									},
									"Merchandise_Sub_Division":{
										"type":"string",
										"title":"Merchandise_Sub_Division"
									},
									"Product_Group_Name":{
										"type":"string",
										"title":"Product_Group_Name"
									},
									"Product_Group__":{
										"type":"string",
										"title":"Product_Group__"
									},
									"Region":{
										"type":"string",
										"title":"Region"
									},
									"Region_Name":{
										"type":"string",
										"title":"Region_Name"
									},
									"comp2025Vs2024Percent":{
										"type":"string",
										"title":"comp2025Vs2024Percent"
									},
									"comp2YR2025Vs2023Percent":{
										"type":"string",
										"title":"comp2YR2025Vs2023Percent"
									},
									"fw29GmDeltaVsLyBps":{
										"type":"string",
										"title":"fw29GmDeltaVsLyBps"
									},
									"fw29GrossMargin2023Dollar":{
										"type":"string",
										"title":"fw29GrossMargin2023Dollar"
									},
									"fw29GrossMargin2023Percent":{
										"type":"string",
										"title":"fw29GrossMargin2023Percent"
									},
									"fw29GrossMargin2024Dollar":{
										"type":"string",
										"title":"fw29GrossMargin2024Dollar"
									},
									"fw29GrossMargin2024Percent":{
										"type":"string",
										"title":"fw29GrossMargin2024Percent"
									},
									"fw29GrossMargin2025Dollar":{
										"type":"string",
										"title":"fw29GrossMargin2025Dollar"
									},
									"fw29GrossMargin2025Percent":{
										"type":"string",
										"title":"fw29GrossMargin2025Percent"
									},
									"fw29PlanGrossMargin2025Dollar":{
										"type":"string",
										"title":"fw29PlanGrossMargin2025Dollar"
									},
									"fw29PlanGrossMargin2025Percent":{
										"type":"string",
										"title":"fw29PlanGrossMargin2025Percent"
									},
									"fw30GmDeltaVsLyBps":{
										"type":"string",
										"title":"fw30GmDeltaVsLyBps"
									},
									"fw30GrossMargin2023Dollar":{
										"type":"string",
										"title":"fw30GrossMargin2023Dollar"
									},
									"fw30GrossMargin2023Percent":{
										"type":"string",
										"title":"fw30GrossMargin2023Percent"
									},
									"fw30GrossMargin2024Dollar":{
										"type":"string",
										"title":"fw30GrossMargin2024Dollar"
									},
									"fw30GrossMargin2024Percent":{
										"type":"string",
										"title":"fw30GrossMargin2024Percent"
									},
									"fw30GrossMargin2025Dollar":{
										"type":"string",
										"title":"fw30GrossMargin2025Dollar"
									},
									"fw30GrossMargin2025Percent":{
										"type":"string",
										"title":"fw30GrossMargin2025Percent"
									},
									"fw30PlanGrossMargin2025Dollar":{
										"type":"string",
										"title":"fw30PlanGrossMargin2025Dollar"
									},
									"fw30PlanGrossMargin2025Percent":{
										"type":"string",
										"title":"fw30PlanGrossMargin2025Percent"
									},
									"fw31GmDeltaVsLyBps":{
										"type":"string",
										"title":"fw31GmDeltaVsLyBps"
									},
									"fw31GrossMargin2023Dollar":{
										"type":"string",
										"title":"fw31GrossMargin2023Dollar"
									},
									"fw31GrossMargin2023Percent":{
										"type":"string",
										"title":"fw31GrossMargin2023Percent"
									},
									"fw31GrossMargin2024Dollar":{
										"type":"string",
										"title":"fw31GrossMargin2024Dollar"
									},
									"fw31GrossMargin2024Percent":{
										"type":"string",
										"title":"fw31GrossMargin2024Percent"
									},
									"fw31GrossMargin2025Dollar":{
										"type":"string",
										"title":"fw31GrossMargin2025Dollar"
									},
									"fw31GrossMargin2025Percent":{
										"type":"string",
										"title":"fw31GrossMargin2025Percent"
									},
									"fw31PlanGrossMargin2025Dollar":{
										"type":"string",
										"title":"fw31PlanGrossMargin2025Dollar"
									},
									"fw31PlanGrossMargin2025Percent":{
										"type":"string",
										"title":"fw31PlanGrossMargin2025Percent"
									},
									"vsPlan2025Dollar":{
										"type":"string",
										"title":"vsPlan2025Dollar"
									},
									"vsPlan2025Percent":{
										"type":"string",
										"title":"vsPlan2025Percent"
									}
								},
								"additionalProperties":false
							},
							"title":"outputArr"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"input":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Input"
						}
					}
				},
				"code":"return [outputArr : input]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"input":{
						"source":"{{ n_jZ83L.outputs.item }}",
						"ua:type":"mappedArray",
						"items":"{{ n_jZ83L.outputs.item[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.records.items.region",
					"root.records.items.regionName",
					"root.records.items.merchandiseDivision",
					"root.records.items.merchandiseSubDivision",
					"root.records.items.productGroup",
					"root.records.items.productGroupName",
					"root.records.items.assortment",
					"root.records.items.assortmentName",
					"root.records.items.fw29Sales2023",
					"root.records.items.fw29Cogs2023",
					"root.records.items.fw30Sales2023",
					"root.records.items.fw30Cogs2023",
					"root.records.items.fw31Sales2023",
					"root.records.items.fw31Cogs2023",
					"root.records.items.fw29Sales2024",
					"root.records.items.fw29Cogs2024",
					"root.records.items.fw30Sales2024",
					"root.records.items.fw30Cogs2024",
					"root.records.items.fw31Sales2024",
					"root.records.items.fw31Cogs2024",
					"root.records.items.fw29Sales2025",
					"root.records.items.fw29Cogs2025",
					"root.records.items.fw30Sales2025",
					"root.records.items.fw30Cogs2025",
					"root.records.items.fw31Sales2025",
					"root.records.items.fw31Cogs2025",
					"root.records.items.fw29PlanSales2025",
					"root.records.items.fw29PlanCogs2025",
					"root.records.items.fw30PlanSales2025",
					"root.records.items.fw30PlanCogs2025",
					"root.records.items.fw31PlanSales2025",
					"root.records.items.fw31PlanCogs2025",
					"root.records.items.fw29GrossMargin2023Dollar",
					"root.records.items.fw29GrossMargin2023Percent",
					"root.records.items.fw30GrossMargin2023Dollar",
					"root.records.items.fw30GrossMargin2023Percent",
					"root.records.items.fw31GrossMargin2023Dollar",
					"root.records.items.fw31GrossMargin2023Percent",
					"root.records.items.fw29GrossMargin2024Dollar",
					"root.records.items.fw29GrossMargin2024Percent",
					"root.records.items.fw30GrossMargin2024Dollar",
					"root.records.items.fw30GrossMargin2024Percent",
					"root.records.items.fw31GrossMargin2024Dollar",
					"root.records.items.fw31GrossMargin2024Percent",
					"root.records.items.fw29GrossMargin2025Dollar",
					"root.records.items.fw29GrossMargin2025Percent",
					"root.records.items.fw30GrossMargin2025Dollar",
					"root.records.items.fw30GrossMargin2025Percent",
					"root.records.items.fw31GrossMargin2025Dollar",
					"root.records.items.fw31GrossMargin2025Percent",
					"root.records.items.fw29PlanGrossMargin2025Dollar",
					"root.records.items.fw29PlanGrossMargin2025Percent",
					"root.records.items.fw30PlanGrossMargin2025Dollar",
					"root.records.items.fw30PlanGrossMargin2025Percent",
					"root.records.items.fw31PlanGrossMargin2025Dollar",
					"root.records.items.fw31PlanGrossMargin2025Percent",
					"root.records.items.fw29GmDeltaVsLyBps",
					"root.records.items.fw30GmDeltaVsLyBps",
					"root.records.items.fw31GmDeltaVsLyBps",
					"root.records.items.vsPlan2025Dollar",
					"root.records.items.vsPlan2025Percent",
					"root.records.items.comp2025Vs2024Percent",
					"root.records.items.comp2YR2025Vs2023Percent",
					"root.records.items.epoch"
				]
			},
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":11162,
				"resourceName":"storage_by_unifyapps_bulk_create_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_jZ83L@_t1UEx-1@l",
			"id":"n_FhdKk",
			"index":20,
			"inputs":{
				"object_type":"lowes_llm_1",
				"skipIfBlank":false,
				"records":{
					"source":"{{ n_Bqc8R.outputs.result.outputArr }}",
					"ua:type":"mappedArray",
					"items":{
						"region":"{{ n_Bqc8R.outputs.result.outputArr[0].Region }}",
						"regionName":"{{ n_Bqc8R.outputs.result.outputArr[0].Region_Name }}",
						"merchandiseDivision":"{{ n_Bqc8R.outputs.result.outputArr[0].Merchandise_Division }}",
						"merchandiseSubDivision":"{{ n_Bqc8R.outputs.result.outputArr[0].Merchandise_Sub_Division }}",
						"productGroup":"{{ n_Bqc8R.outputs.result.outputArr[0].Product_Group__ }}",
						"productGroupName":"{{ n_Bqc8R.outputs.result.outputArr[0].Product_Group_Name }}",
						"assortment":"{{ n_Bqc8R.outputs.result.outputArr[0].Assortment__ }}",
						"assortmentName":"{{ n_Bqc8R.outputs.result.outputArr[0].Assortment_Name }}",
						"fw29Sales2023":"{{ n_Bqc8R.outputs.result.outputArr[0].2023_FW29_Sales__ }}",
						"fw30Sales2023":"{{ n_Bqc8R.outputs.result.outputArr[0].2023_FW30_Sales__ }}",
						"fw29Sales2024":"{{ n_Bqc8R.outputs.result.outputArr[0].2024_FW29_Sales__ }}",
						"fw30Sales2024":"{{ n_Bqc8R.outputs.result.outputArr[0].2024_FW30_Sales__ }}",
						"fw31Sales2024":"{{ n_Bqc8R.outputs.result.outputArr[0].2024_FW31_Sales__ }}",
						"fw29Sales2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW29_Sales__ }}",
						"fw30Sales2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2024_FW30_Sales__ }}",
						"fw31Sales2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW31_Sales__ }}",
						"fw29PlanSales2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW29_Plan_Sales__ }}",
						"fw30PlanSales2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW30_Plan_Sales__ }}",
						"fw31PlanSales2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW31_Plan_Sales__ }}",
						"fw29Cogs2023":"{{ n_Bqc8R.outputs.result.outputArr[0].2023_FW29_COGS__ }}",
						"fw31Sales2023":"{{ n_Bqc8R.outputs.result.outputArr[0].2023_FW31_Sales__ }}",
						"fw29Cogs2024":"{{ n_Bqc8R.outputs.result.outputArr[0].2024_FW29_COGS__ }}",
						"fw29Cogs2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW29_COGS__ }}",
						"fw29PlanCogs2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW29_Plan_COGS__ }}",
						"fw29GrossMargin2023Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw29GrossMargin2023Dollar }}",
						"fw29GrossMargin2023Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw29GrossMargin2023Percent }}",
						"fw29GrossMargin2024Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw29GrossMargin2024Dollar }}",
						"fw29GrossMargin2024Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw29GrossMargin2024Percent }}",
						"fw30GrossMargin2023Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw30GrossMargin2023Dollar }}",
						"fw30GrossMargin2023Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw30GrossMargin2023Percent }}",
						"fw31GrossMargin2023Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw31GrossMargin2023Dollar }}",
						"fw31GrossMargin2023Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw31GrossMargin2023Percent }}",
						"fw30GrossMargin2024Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw30GrossMargin2024Dollar }}",
						"fw30GrossMargin2024Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw30GrossMargin2024Percent }}",
						"fw31GrossMargin2024Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw31GrossMargin2024Dollar }}",
						"fw31GrossMargin2024Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw31GrossMargin2024Percent }}",
						"fw29GrossMargin2025Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw29GrossMargin2025Dollar }}",
						"fw29GrossMargin2025Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw29GrossMargin2025Percent }}",
						"fw30GrossMargin2025Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw30GrossMargin2025Dollar }}",
						"fw30GrossMargin2025Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw30GrossMargin2025Percent }}",
						"fw31GrossMargin2025Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw31GrossMargin2025Dollar }}",
						"fw31GrossMargin2025Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw31GrossMargin2025Percent }}",
						"fw29PlanGrossMargin2025Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw29PlanGrossMargin2025Dollar }}",
						"fw29PlanGrossMargin2025Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw29PlanGrossMargin2025Percent }}",
						"fw30PlanGrossMargin2025Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw30PlanGrossMargin2025Dollar }}",
						"fw30PlanGrossMargin2025Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw30PlanGrossMargin2025Percent }}",
						"fw31PlanGrossMargin2025Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].fw31PlanGrossMargin2025Dollar }}",
						"fw31PlanGrossMargin2025Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].fw31PlanGrossMargin2025Percent }}",
						"fw29GmDeltaVsLyBps":"{{ n_Bqc8R.outputs.result.outputArr[0].fw29GmDeltaVsLyBps }}",
						"fw30GmDeltaVsLyBps":"{{ n_Bqc8R.outputs.result.outputArr[0].fw30GmDeltaVsLyBps }}",
						"fw31GmDeltaVsLyBps":"{{ n_Bqc8R.outputs.result.outputArr[0].fw31GmDeltaVsLyBps }}",
						"vsPlan2025Dollar":"{{ n_Bqc8R.outputs.result.outputArr[0].vsPlan2025Dollar }}",
						"vsPlan2025Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].vsPlan2025Percent }}",
						"comp2025Vs2024Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].comp2025Vs2024Percent }}",
						"comp2YR2025Vs2023Percent":"{{ n_Bqc8R.outputs.result.outputArr[0].comp2YR2025Vs2023Percent }}",
						"fw30Cogs2023":"{{ n_Bqc8R.outputs.result.outputArr[0].2023_FW30_COGS__ }}",
						"fw31Cogs2023":"{{ n_Bqc8R.outputs.result.outputArr[0].2023_FW31_COGS__ }}",
						"fw30Cogs2024":"{{ n_Bqc8R.outputs.result.outputArr[0].2024_FW30_COGS__ }}",
						"fw31Cogs2024":"{{ n_Bqc8R.outputs.result.outputArr[0].2024_FW31_COGS__ }}",
						"fw30Cogs2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW30_COGS__ }}",
						"fw31Cogs2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW31_COGS__ }}",
						"fw30PlanCogs2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW30_Plan_COGS__ }}",
						"fw31PlanCogs2025":"{{ n_Bqc8R.outputs.result.outputArr[0].2025_FW31_Plan_COGS__ }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Create or update records in bulk",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":1001,
				"resourceName":"utility_by_unifyapps_create_unifyapps_file_from_url",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_4JcYB",
			"index":21,
			"inputs":{
				"url":"https://qa.unifyapps.com/p/0/automations/68e3d82b00a4467b3a277337/builder?activeStep=_JGuHE"
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Create UnifyApps file from url",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":173,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_nMokn",
			"index":22,
			"inputs":{
				"automationId":"6793913478118e27332f4620",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"caseId":"e_68f0a1cd0d84f114da88f562",
					"file":"{{ n_4JcYB.outputs.file }}",
					"metadataIndexing":true
				}
			},
			"skip":false,
			"subTitle":"Session File Indexer",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":11163,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_AoUWZ",
			"index":23,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ n_nMokn.outputs.knowledgeId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"knowledge",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"translationsOption":"DEFAULT",
				"page":{
					"paginateBy":"OFFSET",
					"limit":20
				},
				"numberOfRecordsToFetch":"SINGLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":155,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_JgWjo",
			"index":24,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"uemId":{
							"type":"string",
							"title":"uemId"
						}
					}
				}
			},
			"inputs":{
				"uemId":"{{ n_AoUWZ.outputs.properties.additionalDetails.unifiedEntityModelId }}"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"uemId":{
							"type":"string",
							"title":"uemId"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"UEM ID",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":171,
				"resourceName":"callables_call_automation_async",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_sFhON",
			"index":25,
			"inputs":{
				"automationId":"68de82126b6ce77165c61665",
				"runtimeConnections":{},
				"triggerWorkflowWithRuntimeType":"IN_MEMORY",
				"version":"-1",
				"parameters":{
					"caseId":"{{ n_mncUh.outputs.caseId }}",
					"file":"{{ n_ucV8R.outputs.generatedFile }}",
					"epoch":"{{ n_hWXvf.outputs.epoch }}",
					"uemId":"{{ n_JgWjo.outputs.uemId }}",
					"objectId":"{{ n_mncUh.outputs.objectId }}",
					"processedSheet":"{{ _pixyS.outputs.url }}",
					"recordsProcessed":"{{ n_ohdTj.outputs.totalRows }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation async",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":0,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_t1UEx-1",
			"id":"n_8YozE",
			"index":26,
			"inputs":{
				"result":{
					"url":"Excel file is being processed. "
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":33452,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":false,
	"version":134
}