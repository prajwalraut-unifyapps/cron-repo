{
	"appsUsed":[
		
	],
	"createdTime":1747000722827,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1758820960639,
		"deployedBy":-1,
		"deployedDefinitionId":"68d57a60b57aa23969b950a6",
		"status":"DEPLOYED",
		"version":72,
		"workflowVersion":76
	},
	"edges":[
		{
			"fromNodeId":"RA2Aq",
			"priority":0,
			"skip":false,
			"toNodeId":"88S0T",
			"type":"next"
		},
		{
			"fromNodeId":"88S0T",
			"priority":0,
			"skip":false,
			"toNodeId":"zGLJx",
			"type":"next"
		},
		{
			"fromNodeId":"zGLJx",
			"priority":0,
			"skip":false,
			"toNodeId":"OVF7r",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"67e72a29e21aa01f098c7e95",
	"lastModifiedBy":1,
	"lcName":"create llama models payload",
	"modifiedTime":1758874400990,
	"name":"Create LLAMA Models Payload",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":158,
				"resourceName":"callables_from_interface"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NmnYY-1",
			"id":"RA2Aq",
			"index":0,
			"inputs":{
				"result":{
					"additionalProperties":false,
					"ua:modal":{
						"field_type":"STRING",
						"is_optional":true
					},
					"type":"object",
					"properties":{
						"payload":{
							"type":"object",
							"title":"payload"
						}
					}
				},
				"callableInterfaceId":"67e72b531506404d8d5e331f",
				"setup":{
					"additionalProperties":false,
					"ua:modal":{
						"field_type":"STRING",
						"is_optional":true
					},
					"type":"object",
					"properties":{
						"top_p":{
							"type":"integer",
							"title":"top_p"
						},
						"response_format":{
							"type":"object",
							"properties":{
								"type":{
									"type":"string",
									"title":"type"
								}
							},
							"title":"response_format",
							"additionalProperties":false
						},
						"frequency_penalty":{
							"type":"integer",
							"title":"frequency_penalty"
						},
						"request_timeout":{
							"type":"integer",
							"title":"request_timeout"
						},
						"provider":{
							"type":"string",
							"title":"provider"
						},
						"max_tokens":{
							"type":"integer",
							"title":"max_tokens"
						},
						"presence_penalty":{
							"type":"integer",
							"title":"presence_penalty"
						},
						"temperature":{
							"type":"integer",
							"title":"temperature"
						},
						"messages":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"role":{
										"type":"string",
										"title":"role",
										"default":"user"
									},
									"content":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"text":{
													"type":"string",
													"title":"text"
												},
												"type":{
													"type":"string",
													"title":"type",
													"default":"text"
												},
												"image_url":{
													"type":"object",
													"properties":{
														"url":{
															"type":"string",
															"title":"url"
														},
														"detail":{
															"type":"string",
															"title":"detail"
														}
													},
													"additionalProperties":false,
													"title":"image_url",
													"required":[]
												},
												"source":{
													"type":"object",
													"properties":{
														"image_type":{
															"type":"string",
															"title":"image_type"
														},
														"media_type":{
															"type":"string",
															"title":"media_type"
														},
														"image_data":{
															"type":"string",
															"title":"image_data"
														},
														"detail":{
															"type":"string",
															"title":"detail"
														}
													},
													"additionalProperties":false,
													"title":"Source",
													"required":[]
												},
												"tool_use_id":{
													"type":"string",
													"title":"tool_use_id"
												},
												"content":{
													"type":"string",
													"title":"content"
												},
												"name":{
													"type":"string",
													"title":"name"
												},
												"input":{
													"type":"object",
													"properties":{},
													"additionalProperties":false,
													"title":"input"
												},
												"id":{
													"type":"string",
													"title":"id"
												}
											},
											"additionalProperties":false,
											"required":[]
										},
										"title":"content",
										"required":[]
									}
								},
								"additionalProperties":false
							},
							"title":"messages",
							"required":[]
						},
						"model":{
							"type":"string",
							"title":"model"
						},
						"logprobs":{
							"type":"boolean",
							"title":"logprobs"
						},
						"on_error_config":{
							"type":"object",
							"properties":{
								"error_msg":{
									"type":"string",
									"title":"error_msg"
								}
							},
							"additionalProperties":false,
							"title":"on_error_config",
							"required":[]
						},
						"retry_config":{
							"type":"object",
							"properties":{
								"initial_delay":{
									"type":"integer",
									"title":"initial_delay"
								},
								"num_retry":{
									"type":"integer",
									"title":"num_retry"
								},
								"max_delay":{
									"type":"integer",
									"title":"max_delay"
								},
								"backoff_factor":{
									"type":"integer",
									"title":"backoff_factor"
								}
							},
							"additionalProperties":false,
							"title":"retry_config",
							"required":[]
						},
						"top_k":{
							"type":"integer",
							"title":"top_k"
						},
						"tools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"type":{
										"type":"string",
										"title":"Type"
									},
									"function":{
										"type":"object",
										"properties":{
											"name":{
												"type":"string",
												"title":"Name"
											},
											"description":{
												"type":"string",
												"title":"Description"
											},
											"parameters":{
												"type":"object",
												"properties":{},
												"additionalProperties":false,
												"title":"Parameters"
											}
										},
										"additionalProperties":false,
										"title":"Function",
										"required":[]
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools"
						},
						"systemPrompt":{
							"type":"string",
							"title":"System Prompt"
						},
						"sessionId":{
							"type":"string",
							"title":"Session Id"
						},
						"modelId":{
							"type":"string",
							"title":"Model ID"
						},
						"stream":{
							"type":"boolean",
							"title":"stream"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger interface",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.messages.source",
					"root.parameters.messages.ua:type",
					"root.parameters.messages.items.role",
					"root.parameters.messages.items.content.source",
					"root.parameters.messages.items.content.ua:type",
					"root.parameters.messages.items.content.items.type",
					"root.parameters.messages.items.content.items.text",
					"root.parameters.messages.items.content.items.image_url.url",
					"root.parameters.messages.items.content.items.image_url.detail",
					"root.parameters.messages.items.content.items.source.image_type",
					"root.parameters.messages.items.content.items.source.media_type",
					"root.parameters.messages.items.content.items.source.image_data",
					"root.parameters.messages.items.content.items.source.detail",
					"root.parameters.messages.items.content.items.tool_use_id",
					"root.parameters.messages.items.content.items.content",
					"root.parameters.messages.items.content.items.name",
					"root.parameters.messages.items.content.items.id",
					"root.parameters.systemPrompt",
					"root.parameters.model"
				]
			},
			"context":{
				"appName":"callables",
				"resourceVersion":166,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NmnYY-1",
			"id":"88S0T",
			"index":0,
			"inputs":{
				"automationId":"67de97fcf8210b1464da34d2",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"messages":{
						"source":"{{ RA2Aq.outputs.messages }}",
						"ua:type":"mappedArray",
						"items":{
							"role":"{{ RA2Aq.outputs.messages[0].role }}",
							"content":{
								"source":"{{ RA2Aq.outputs.messages[0].content }}",
								"ua:type":"mappedArray",
								"items":{
									"type":"{{ RA2Aq.outputs.messages[0].content[0].type }}",
									"text":"{{ RA2Aq.outputs.messages[0].content[0].text }}",
									"image_url":{
										"url":"{{ RA2Aq.outputs.messages[0].content[0].image_url.url }}",
										"detail":"{{ RA2Aq.outputs.messages[0].content[0].image_url.detail }}"
									},
									"source":{
										"image_type":"{{ RA2Aq.outputs.messages[0].content[0].source.image_type }}",
										"media_type":"{{ RA2Aq.outputs.messages[0].content[0].source.media_type }}",
										"image_data":"{{ RA2Aq.outputs.messages[0].content[0].source.image_data }}",
										"detail":"{{ RA2Aq.outputs.messages[0].content[0].source.detail }}"
									},
									"tool_use_id":"{{ RA2Aq.outputs.messages[0].content[0].tool_use_id }}",
									"content":"{{ RA2Aq.outputs.messages[0].content[0].content }}",
									"name":"{{ RA2Aq.outputs.messages[0].content[0].name }}",
									"id":"{{ RA2Aq.outputs.messages[0].content[0].id }}",
									"input":"{{ RA2Aq.outputs.messages[0].content[0].input }}"
								}
							}
						}
					},
					"systemPrompt":"{{ RA2Aq.outputs.systemPrompt }}",
					"model":"{{ RA2Aq.outputs.model }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.input.tools_in_user_message",
					"root.parameters.input.messages.items.role",
					"root.parameters.input.messages.items.content",
					"root.parameters.input.messages.items.tool_calls.items.function.name",
					"root.parameters.input.messages.items.tool_calls.items.function.arguments",
					"root.parameters.input.add_generation_prompt",
					"root.parameters.input.tools.items.type",
					"root.parameters.input.tools.items.function.name",
					"root.parameters.input.tools.items.function.description",
					"root.parameters.input.tools.items.function.parameters"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":155,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NmnYY-1",
			"id":"zGLJx",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"payload":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"payload"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"input":{
							"type":"object",
							"properties":{
								"tools":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{
											"type":{
												"type":"string",
												"title":"Type"
											},
											"function":{
												"type":"object",
												"properties":{
													"name":{
														"type":"string",
														"title":"name"
													},
													"description":{
														"type":"string",
														"title":"description"
													},
													"parameters":{
														"type":"object",
														"title":"parameters"
													}
												},
												"additionalProperties":false
											}
										},
										"additionalProperties":false,
										"required":[]
									},
									"title":"tools"
								},
								"messages":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{
											"role":{
												"type":"string",
												"title":"role"
											},
											"content":{
												"type":"string",
												"title":"content"
											},
											"tool_calls":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"function":{
															"type":"object",
															"properties":{
																"name":{
																	"type":"string",
																	"title":"name"
																},
																"arguments":{
																	"type":"object",
																	"properties":{},
																	"title":"arguments",
																	"additionalProperties":false,
																	"required":[]
																}
															},
															"title":"function",
															"additionalProperties":false
														}
													},
													"additionalProperties":false
												},
												"title":"tool_calls"
											}
										},
										"additionalProperties":false
									},
									"title":"messages"
								}
							},
							"title":"input",
							"additionalProperties":false,
							"required":[]
						}
					},
					"additionalProperties":false
				},
				"compile_static":false,
				"code":"import java.time.LocalDate\nimport java.time.format.DateTimeFormatter\n\ndef convertToJson(obj) {\n    if (obj == null) {\n        return \"null\"\n    }\n    else if (obj instanceof Number || obj instanceof Boolean) {\n        // Numbers and booleans can be used as is\n        return obj.toString()\n    }\n    else if (obj instanceof String) {\n        // Escape quotes, backslashes, and control chars\n        def escaped = obj\n          .replace(\"\\\\\", \"\\\\\\\\\")\n          .replace(\"\\\"\", \"\\\\\\\"\")\n          .replace(\"\\n\", \"\\\\n\")\n          .replace(\"\\r\", \"\\\\r\")\n          .replace(\"\\t\", \"\\\\t\")\n        return \"\\\"${escaped}\\\"\"\n    }\n    else if (obj instanceof Map) {\n        if (obj.isEmpty()) {\n            // Empty map\n            return \"{}\"\n        }\n        // Build key-value pairs\n        def pairs = obj.collect { k, v ->\n            // Keys are strings\n            def escapedKey = k.toString()\n              .replace(\"\\\\\", \"\\\\\\\\\")\n              .replace(\"\\\"\", \"\\\\\\\"\")\n              .replace(\"\\n\", \"\\\\n\")\n              .replace(\"\\r\", \"\\\\r\")\n              .replace(\"\\t\", \"\\\\t\")\n            \"\\\"${escapedKey}\\\":${convertToJson(v)}\"\n        }\n        return \"{${pairs.join(\",\")}}\"\n    }\n    else if (obj instanceof Collection) {\n        if (obj.isEmpty()) {\n            // Empty collection\n            return \"[]\"\n        }\n        def items = obj.collect { e -> convertToJson(e) }\n        return \"[${items.join(\",\")}]\"\n    }\n    // If it doesn't match any known type, treat as string\n    def fallback = obj.toString()\n      .replace(\"\\\\\", \"\\\\\\\\\")\n      .replace(\"\\\"\", \"\\\\\\\"\")\n      .replace(\"\\n\", \"\\\\n\")\n      .replace(\"\\r\", \"\\\\r\")\n      .replace(\"\\t\", \"\\\\t\")\n    return \"\\\"${fallback}\\\"\"\n}\n\ndef convertToJsonIndentation(obj, int indentLevel = 0, int indentSpaces = 4) {\n    // Current level and next level indentation strings\n    def currentIndent = ' ' * (indentLevel * indentSpaces)\n    def nextIndent    = ' ' * ((indentLevel + 1) * indentSpaces)\n    \n    if (obj == null) {\n        return \"null\"\n    }\n    else if (obj instanceof Number || obj instanceof Boolean) {\n        // Numbers and booleans can be used as-is\n        return obj.toString()\n    }\n    else if (obj instanceof String) {\n        // Escape quotes, backslashes, and control characters\n        def escaped = obj\n            .replace(\"\\\\\", \"\\\\\\\\\")\n            .replace(\"\\\"\", \"\\\\\\\"\")\n            .replace(\"\\n\", \"\\\\n\")\n            .replace(\"\\r\", \"\\\\r\")\n            .replace(\"\\t\", \"\\\\t\")\n        return \"\\\"${escaped}\\\"\"\n    }\n    else if (obj instanceof Map) {\n        if (obj.isEmpty()) {\n            // Empty map\n            return \"{}\"\n        }\n        // Build key-value pairs, each on its own line\n        def pairs = obj.collect { k, v ->\n            // Escape map key\n            def escapedKey = k.toString()\n                .replace(\"\\\\\", \"\\\\\\\\\")\n                .replace(\"\\\"\", \"\\\\\\\"\")\n                .replace(\"\\n\", \"\\\\n\")\n                .replace(\"\\r\", \"\\\\r\")\n                .replace(\"\\t\", \"\\\\t\")\n            \"${nextIndent}\\\"${escapedKey}\\\": ${convertToJsonIndentation(v, indentLevel + 1, indentSpaces)}\"\n        }\n        // Join them with commas, and wrap in braces\n        return \"{\\n${pairs.join(\",\\n\")}\\n${currentIndent}}\"\n    }\n    else if (obj instanceof Collection) {\n        if (obj.isEmpty()) {\n            // Empty collection\n            return \"[]\"\n        }\n        // Each collection item on its own line\n        def items = obj.collect { e ->\n            \"${nextIndent}${convertToJsonIndentation(e, indentLevel + 1, indentSpaces)}\"\n        }\n        // Join them with commas, and wrap in brackets\n        return \"[\\n${items.join(\",\\n\")}\\n${currentIndent}]\"\n    }\n    // For any unrecognized type, fall back to string\n    def fallback = obj.toString()\n        .replace(\"\\\\\", \"\\\\\\\\\")\n        .replace(\"\\\"\", \"\\\\\\\"\")\n        .replace(\"\\n\", \"\\\\n\")\n        .replace(\"\\r\", \"\\\\r\")\n        .replace(\"\\t\", \"\\\\t\")\n    return \"\\\"${fallback}\\\"\"\n}\n\ndef bosToken            = input.getOrDefault(\"bos_token\", \"<|begin_of_text|>\")\ndef userDefinedTools    = input.get(\"tools\")\ndef toolsInUserMessage  = input.containsKey(\"tools_in_user_message\")\n                             ? input.tools_in_user_message\n                             : true\ndef dateString = input.get(\"date_string\") ?: LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"))\ndef messages            = (input.get(\"messages\") instanceof List) ? input.get(\"messages\") : []\ndef addGenerationPrompt = input.containsKey(\"add_generation_prompt\")\n                             ? input.add_generation_prompt\n                             : true\n\ndef tools = userDefinedTools\nif (!tools || !(tools instanceof List) || tools.isEmpty()) {\n  tools = null\n}\n\nString systemMessage = \"\"\nList newMessages = messages\n\nif (!newMessages.isEmpty() && newMessages[0].role == \"system\") {\n  // If the first message is system, we extract that content as the system message\n  def content = newMessages[0].content\n  if (content instanceof String) {\n    systemMessage = content.trim()\n  } else if (content instanceof List && !content.isEmpty()) {\n    def firstTextBlock = content.find { block -> block.type == \"text\" }\n    if (firstTextBlock) {\n      systemMessage = firstTextBlock.text.trim()\n    }\n  }\n  newMessages = newMessages.drop(1)\n}\nelse if (tools != null) {\n  systemMessage = \"You are a helpful assistant with tool calling capabilities. \" +\n                  \"Only reply with a tool call if the function exists in the library provided by the user. \" +\n                  \"If it doesn't exist, just reply directly in natural language. \" +\n                  \"When you receive a tool call response, use the output to format an answer to the original user question.\"\n}\n\nStringBuilder sb = new StringBuilder()\n\nif (bosToken) {\n  sb.append(bosToken)\n}\n\nsb.append(\"<|start_header_id|>system<|end_header_id|>\\n\\n\")\n\nsb.append(\"Cutting Knowledge Date: December 2023\\n\")\nsb.append(\"Today Date: \").append(dateString).append(\"\\n\\n\")\n\nif (tools != null) {\n  sb.append(\"When you receive a tool call response, use the output to format an answer to the orginal user question.\\n\\n\")\n}\n\nif (tools != null && !toolsInUserMessage) {\n  sb.append(\"\\nYou have access to the following functions. To call a function, please respond with JSON for a function call. \")\n     .append(\"Respond in the format {\\\"name\\\": function name, \\\"parameters\\\": dictionary of argument name and its value}. \")\n     .append(\"Do not use variables.\\n\")\n  tools.each { tool ->\n    sb.append(convertToJsonIndentation(tool)).append(\"\\n\")\n  }\n}\n\nif (systemMessage) {\n  sb.append(systemMessage)\n}\nsb.append(\"<|eot_id|>\")\n\nif (toolsInUserMessage && tools != null) {\n  if (!newMessages.isEmpty()) {\n    def firstMsg = newMessages[0]\n    def firstUserMsgContent = \"\"\n    if (firstMsg.content instanceof String) {\n      firstUserMsgContent = firstMsg.content.trim()\n    } else if (firstMsg.content instanceof List) {\n      firstMsg.content.each { segment ->\n        if (segment.type == \"text\") {\n          firstUserMsgContent += segment.text.trim()\n        }\n      }\n    }\n    newMessages = newMessages.drop(1)\n\n    sb.append(\"<|start_header_id|>user<|end_header_id|>\\n\\n\")\n      .append(\"Given the following functions, please respond with a JSON for a function call \")\n      .append(\"with its proper arguments that best answers the given prompt.\\n\\n\")\n      .append(\"Respond in the format {\\\"name\\\": function name, \\\"parameters\\\": dictionary of argument name and its value}. \")\n      .append(\"Do not use variables.\\n\\n\")\n\n    tools.each { tool ->\n      sb.append(convertToJsonIndentation(tool)).append(\"\\n\\n\")\n    }\n    sb.append(firstUserMsgContent).append(\"<|eot_id|>\")\n  }\n  else {\n    throw new RuntimeException(\"Cannot put tools in the first user message when there's no first user message!\")\n  }\n}\n\nnewMessages.each { msg ->\n  if (!(msg.role in [\"ipython\",\"tool\"]) && !msg.containsKey(\"tool_calls\")) {\n    sb.append(\"<|start_header_id|>\").append(msg.role).append(\"<|end_header_id|>\\n\\n\")\n    if (msg.content instanceof String) {\n      sb.append(msg.content.trim())\n    }\n    else if (msg.content instanceof List) {\n      msg.content.each { c ->\n        if (c.type == \"text\") {\n          sb.append(c.text.trim())\n        }\n      }\n    }\n    sb.append(\"<|eot_id|>\")\n  }\n  else if (msg.tool_calls instanceof List && msg.tool_calls.size() == 1) {\n    def callInfo = msg.tool_calls[0].function\n    sb.append(\"<|start_header_id|>assistant<|end_header_id|>\\n\\n\")\n      .append(\"{\\\"name\\\": \\\"\")\n      .append(callInfo.name)\n      .append(\"\\\", \\\"parameters\\\": \")\n      .append(convertToJson(callInfo.arguments))\n      .append(\"}\")\n      .append(\"<|eot_id|>\")\n  }\n  else if (msg.role in [\"tool\",\"ipython\"]) {\n    sb.append(\"<|start_header_id|>ipython<|end_header_id|>\\n\\n\")\n    if (msg.content instanceof String) {\n      def jsonObj = [ output: msg.content ]\n      sb.append(convertToJson(jsonObj))\n    }\n    else if (msg.content instanceof List) {\n      msg.content.each { seg ->\n        if (seg.type == \"text\") {\n          def jsonObj = [ output: seg.text ]\n          sb.append(convertToJson(jsonObj))\n        }\n      }\n    }\n    sb.append(\"<|eot_id|>\")\n  }\n  else if (msg.tool_calls instanceof List && msg.tool_calls.size() != 1) {\n    throw new RuntimeException(\"This model only supports single tool-calls at once!\")\n  }\n}\n\nif (addGenerationPrompt) {\n  sb.append(\"<|start_header_id|>assistant<|end_header_id|>\\n\\n\")\n}\n\nreturn [\n  \"payload\": [\n    \"prompt\": sb.toString(),\n    \"temperature\": 0,\n    \"top_p\": 1,\n    \"max_gen_len\": 2048\n  ]\n]",
				"parameters":{
					"input":{
						"messages":{
							"ua:type":"mappedArray",
							"items":{
								"tool_calls":{
									"ua:type":"mappedArray",
									"items":{
										"function":{
											"name":"{{ 88S0T.outputs.openaiMessages[0].tool_calls[0].function.name }}",
											"arguments":"{{ 88S0T.outputs.openaiMessages[0].tool_calls[0].function.arguments }}"
										}
									},
									"source":"{{ 88S0T.outputs.openaiMessages[0].tool_calls }}"
								},
								"role":"{{ 88S0T.outputs.openaiMessages[0].role }}",
								"content":"{{ 88S0T.outputs.openaiMessages[0].content }}"
							},
							"source":"{{ 88S0T.outputs.openaiMessages }}"
						},
						"tools":{
							"source":"{{ RA2Aq.outputs.tools }}",
							"ua:type":"mappedArray",
							"items":{
								"type":"{{ RA2Aq.outputs.tools[0].type }}",
								"function":{
									"name":"{{ RA2Aq.outputs.tools[0].function.name }}",
									"description":"{{ RA2Aq.outputs.tools[0].function.description }}",
									"parameters":"{{ RA2Aq.outputs.tools[0].function.parameters }}"
								}
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"LLAMA Payload",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":158,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NmnYY-1",
			"id":"OVF7r",
			"index":0,
			"inputs":{
				"result":{
					"payload":"{{ zGLJx.outputs.result.payload }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":false,
		"enableRunLogging":false,
		"enableVariableLogging":false,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"version":77
}