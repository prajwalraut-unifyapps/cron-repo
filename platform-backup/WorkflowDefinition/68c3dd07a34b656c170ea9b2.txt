{
	"appsUsed":[
		
	],
	"createdTime":1759606168650,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1759606169256,
		"deployedBy":33404,
		"deployedDefinitionId":"68e17599804b2727e75523da",
		"status":"DEPLOYED",
		"version":2,
		"workflowVersion":83
	},
	"edges":[
		{
			"fromNodeId":"n_0CC2a",
			"priority":0,
			"skip":false,
			"toNodeId":"_KxTZr",
			"type":"next"
		},
		{
			"fromNodeId":"_KxTZr",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Hl6Aq",
			"type":"next"
		},
		{
			"fromNodeId":"n_Hl6Aq",
			"priority":0,
			"skip":false,
			"toNodeId":"_ckVcY",
			"type":"next"
		},
		{
			"fromNodeId":"_ckVcY",
			"priority":0,
			"skip":false,
			"toNodeId":"n_2cHa3",
			"type":"next"
		},
		{
			"fromNodeId":"n_2cHa3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_EaJPX",
			"type":"next"
		}
	],
	"id":"68c3dd07a34b656c170ea9b2",
	"lastModifiedBy":30179,
	"lcName":"oman | pre-approval_filter",
	"modifiedTime":1760614869218,
	"name":"Oman | Pre-approval_filter",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":15,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_8LuYQ-1",
			"id":"n_0CC2a",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"columns":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"_pr_PreApprovalNumber":{
										"type":"integer",
										"title":"_pr_PreApprovalNumber"
									},
									"_pr_PatientName":{
										"type":"string",
										"title":"_pr_PatientName"
									},
									"_pr_DhamaniNumber":{
										"type":"string",
										"title":"_pr_DhamaniNumber"
									},
									"_pr_RequestNo":{
										"type":"integer",
										"title":"_pr_RequestNo"
									},
									"_pr_CreatedDate":{
										"type":"string",
										"title":"_pr_CreatedDate"
									},
									"_pr_BasicDiagnosis":{
										"type":"string",
										"title":"_pr_BasicDiagnosis"
									},
									"_pr_Status":{
										"type":"string",
										"title":"_pr_Status"
									},
									"_pr_primary_user_member_id":{
										"type":"string",
										"title":"_pr_primary_user_member_id"
									},
									"_pr_Remarks":{
										"type":"string",
										"title":"_pr_Remarks"
									},
									"_pr_ClaimedAmount":{
										"type":"integer",
										"title":"_pr_ClaimedAmount"
									},
									"_pr_ApprovedAmount":{
										"type":"integer",
										"title":"_pr_ApprovedAmount"
									},
									"_pr_HospitalName":{
										"type":"string",
										"title":"_pr_HospitalName"
									},
									"AR_Status":{
										"type":"string",
										"title":"AR Status"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"columns"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"primary_member_id"
					],
					"properties":{
						"Patientname":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Patientname"
						},
						"Status":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Status"
						},
						"Raiseddate":{
							"type":"string",
							"title":"Raiseddate"
						},
						"Search":{
							"type":"string",
							"title":"Search"
						},
						"primary_member_id":{
							"type":"string",
							"title":"Primary Member Id"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"analytics_by_unifyapps",
				"resourceVersion":15,
				"resourceName":"analytics_by_unifyapps_execute_query",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_8LuYQ-1",
			"id":"_KxTZr",
			"index":2,
			"inputs":{
				"outputSchema":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"columns":{
							"type":"object",
							"properties":{
								"_pr_MemberNo":{
									"type":"string",
									"title":"_pr_MemberNo"
								},
								"_pr_PreApprovalNumber":{
									"type":"integer",
									"title":"_pr_PreApprovalNumber"
								},
								"_pr_PatientName":{
									"type":"string",
									"title":"_pr_PatientName"
								},
								"_pr_DecisionBy":{
									"type":"string",
									"title":"_pr_DecisionBy"
								},
								"_pr_RequestNo":{
									"type":"integer",
									"title":"_pr_RequestNo"
								},
								"_pr_MemberIdHashed":{
									"type":"string",
									"title":"_pr_MemberIdHashed"
								},
								"_pr_SystemBenefit":{
									"type":"string",
									"title":"_pr_SystemBenefit"
								},
								"_pr_CreatedDate":{
									"type":"string",
									"title":"_pr_CreatedDate"
								},
								"_pr_BasicDiagnosis":{
									"type":"string",
									"title":"_pr_BasicDiagnosis"
								},
								"_pr_ExpAdmissionDate":{
									"type":"string",
									"title":"_pr_ExpAdmissionDate"
								},
								"id":{
									"type":"string",
									"title":"id"
								},
								"_pr_ServiceDescription":{
									"type":"string",
									"title":"_pr_ServiceDescription"
								},
								"_pr_ServiceType":{
									"type":"string",
									"title":"_pr_ServiceType"
								},
								"_pr_TransDate":{
									"type":"string",
									"title":"_pr_TransDate"
								},
								"_pr_Status":{
									"type":"string",
									"title":"_pr_Status"
								},
								"_pr_MemberId":{
									"type":"string",
									"title":"_pr_MemberId"
								},
								"_pr_ExtensionNumber":{
									"type":"integer",
									"title":"_pr_ExtensionNumber"
								},
								"_pr_OpdIpd":{
									"type":"string",
									"title":"_pr_OpdIpd"
								},
								"_pr_primary_user_member_id":{
									"type":"string",
									"title":"_pr_primary_user_member_id"
								},
								"_pr_ClaimedAmount":{
									"type":"number",
									"title":"_pr_ClaimedAmount"
								},
								"_pr_ApprovedAmount":{
									"type":"number",
									"title":"_pr_ApprovedAmount"
								},
								"_pr_HospitalName":{
									"type":"string",
									"title":"_pr_HospitalName"
								},
								"Remarks":{
									"type":"string",
									"title":"Remarks"
								},
								"DhamaniNumber":{
									"type":"string",
									"title":"Dhamani Number"
								},
								"AR_Status":{
									"type":"string",
									"title":"AR Status"
								}
							},
							"additionalProperties":false,
							"title":"columns",
							"required":[]
						}
					}
				},
				"query":"SELECT \nnp.* \nfrom ENTITY_oman_pre_approvals_list np\nWHERE 1=1\n  AND (\n    np._pr_primary_user_member_id = '{{ n_0CC2a.outputs.primary_member_id }}'\n  )\n  \n  AND (\n       '{{ n_0CC2a.outputs.Search }}' IS NULL\n    OR '{{ n_0CC2a.outputs.Search }}' = ''\n    OR LOWER(np._pr_PatientName)  LIKE LOWER('%{{ n_0CC2a.outputs.Search }}%')\n    OR LOWER(np._pr_Status )    LIKE LOWER('%{{ n_0CC2a.outputs.Search }}%')\n    OR LOWER(np._pr_HospitalName) LIKE LOWER('%{{ n_0CC2a.outputs.Search }}%')\n    OR LOWER(np._pr_RequestNo)  LIKE LOWER('%{{ n_0CC2a.outputs.Search }}%')\n    OR LOWER(np._pr_DhamaniNumber)  LIKE LOWER('%{{ n_0CC2a.outputs.Search }}%')\n    OR LOWER(np._pr_ClaimedAmount)  LIKE LOWER('%{{ n_0CC2a.outputs.Search }}%')\n    \n    \n    \n  );\n",
				"group":"ENTITY_REPORTING"
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Analytics by UnifyApps",
			"title":"Execute Analytics SQL Query",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				},
				"visibleOptionalFields":[
					"root.parameters.PatientName.items",
					"root.parameters.Status.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":18,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_8LuYQ-1",
			"id":"n_Hl6Aq",
			"index":3,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"Status":{
							"type":"string",
							"title":"Status"
						},
						"PatientName":{
							"type":"string",
							"title":"PatientName"
						},
						"PreApprovalNumber":{
							"type":"integer",
							"title":"PreApprovalNumber"
						},
						"DhamaniNumber":{
							"type":"string",
							"title":"DhamaniNumber"
						},
						"primary_user_member_id":{
							"type":"string",
							"title":"primary_user_member_id"
						},
						"ApprovedAmount":{
							"type":"integer",
							"title":"ApprovedAmount"
						},
						"Remarks":{
							"type":"string",
							"title":"Remarks"
						},
						"CreatedDate":{
							"type":"string",
							"title":"CreatedDate"
						},
						"ClaimedAmount":{
							"type":"integer",
							"title":"ClaimedAmount"
						},
						"HospitalName":{
							"type":"string",
							"title":"HospitalName"
						},
						"BasicDiagnosis":{
							"type":"string",
							"title":"BasicDiagnosis"
						},
						"RequestNo":{
							"type":"integer",
							"title":"RequestNo"
						},
						"AR_Status":{
							"type":"string",
							"title":"AR Status"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"raised_date":{
							"type":"string",
							"title":"Raised Date"
						},
						"PatientName":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Patient Name"
						},
						"Status":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Status"
						},
						"result":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Result"
						},
						"HospitalName":{
							"type":"string",
							"title":"Hospital Name"
						},
						"BasicDiagnosis":{
							"type":"string",
							"title":"Basic Diagnosis"
						}
					}
				},
				"code":"/***********************\n * 1) Flexible input pickers\n ***********************/\ndef pickVar = { names ->\n  for (n in names) if (binding?.hasVariable(n)) return binding.getVariable(n)\n  def vars = binding?.getVariables() instanceof Map ? binding.getVariables() : [:]\n  for (e in vars.entrySet()) if (e.value instanceof Map) for (n in names) if (e.value.containsKey(n)) return e.value[n]\n  return null\n}\n\ndef dataIn = pickVar([\"oman_pre_approvals_list\",\"result\",\"data\",\"dataObj\",\"payload\",\"body\",\"params\",\"Data\"])\n\n/***********************\n * 1b) Read patient/status robustly from input (prefer dataIn map)\n ***********************/\ndef readFromInputOrBinding = { names ->\n  if (dataIn instanceof Map) {\n    for (n in names) {\n      if (dataIn.containsKey(n) && dataIn[n] != null) return dataIn[n]\n    }\n  }\n  return pickVar(names)\n}\n\ndef createdDate  = readFromInputOrBinding([\"created_date\",\"CreatedDate\",\"raised_date\",\"rangeOption\",\"range\",\"option\",\"RaisedDate\"])\ndef patientNames = readFromInputOrBinding([\"patientname\",\"Patientname\",\"PatientName\",\"patient_names\",\"PatientNames\",\"patient_name\",\"Patient_Name\",\"Patient_Names\"])\ndef statusList   = readFromInputOrBinding([\"status\",\"Status\",\"StatusList\",\"status_list\",\"Status_List\"])\n\n/////////////////////////\n/* 2) Early exit if no data */\n/////////////////////////\nif (dataIn == null) return []\n\n/***********************\n * 3) Tiny helpers (no imports)\n ***********************/\ndef stripQuotes = { s -> s?.replaceAll(/^\"(.*)\"$/, '$1')?.replaceAll(/^'(.*)'$/, '$1') }\n\n/** Normalize names from ALL CAPS to Title Case */\ndef normalizeNameCase = { String name ->\n  if (!name) return name\n  def trimmed = name.trim()\n  if (trimmed.isEmpty()) return trimmed\n  \n  def words = trimmed.split(/\\s+/)\n  def normalized = words.collect { word ->\n    if (word.isEmpty()) return word\n    \n    def letters = word.replaceAll(/[^a-zA-Z]/, '')\n    if (letters.isEmpty()) return word\n    def isAllCaps = letters.toUpperCase() == letters && letters.toLowerCase() != letters\n    \n    if (!isAllCaps) return word\n    \n    def lowerWord = word.toLowerCase()\n    \n    if (lowerWord in ['al', 'bin', 'bint', 'ibn', 'de', 'van', 'von', 'der', 'el', 'mc', 'mac']) {\n      return lowerWord\n    }\n    \n    if (word.contains('-')) {\n      return word.toLowerCase().split('-').collect { part ->\n        part.isEmpty() ? part : part.substring(0, 1).toUpperCase() + part.substring(1)\n      }.join('-')\n    }\n    \n    lowerWord.substring(0, 1).toUpperCase() + lowerWord.substring(1)\n  }\n  \n  return normalized.join(' ')\n}\n\n/** Parse [\"a\",\"b\"] or [a,b] without JsonSlurper */\ndef parseArrayString = { v ->\n  if (v == null) return []\n  if (v instanceof Collection) return v.collect { it?.toString() }\n  def s = v.toString().trim()\n  if (!s.startsWith(\"[\") || !s.endsWith(\"]\")) return []\n  def m = (s =~ /\"(.*?)\"|'(.*?)'/)\n  def toks = []\n  m.each { _, g1, g2 -> toks << (g1 ?: g2) }\n  if (!toks.isEmpty()) return toks\n  def inner = s.substring(1, s.length() - 1)\n  inner.split(/\\s*,\\s*/).findAll { it != null && it.trim() }.collect { stripQuotes(it.trim()) }\n}\n\ndef parseObjectGeneric = { String obj ->\n  String o = obj?.trim() ?: \"\"\n  if (!o.startsWith(\"{\") || !o.endsWith(\"}\")) return [:]\n  def map = [:]\n  def arrRe = (o =~ /\"([^\"]+)\"\\s*:\\s*(\\[[^\\]]*\\])/); arrRe.each { mm -> map[mm[1]] = parseArrayString(mm[2]) }\n  def strRe = (o =~ /\"([^\"]+)\"\\s*:\\s*\"([^\"]*)\"/);   strRe.each { mm -> if (!map.containsKey(mm[1])) map[mm[1]] = mm[2] }\n  def numRe = (o =~ /\"([^\"]+)\"\\s*:\\s*([-]?\\d+(?:\\.\\d+)?)/)\n  numRe.each { mm -> if (!map.containsKey(mm[1])) map[mm[1]] = (mm[2].contains('.') ? Double.parseDouble(mm[2]) : Long.parseLong(mm[2])) }\n  def boolRe = (o =~ /\"([^\"]+)\"\\s*:\\s*((?i:true|false))/)\n  boolRe.each { mm -> if (!map.containsKey(mm[1])) map[mm[1]] = mm[2].equalsIgnoreCase(\"true\") }\n  map\n}\n\ndef parseDocList = { v ->\n  if (v == null) return []\n  if (v instanceof Collection) return v as List\n  def s = v.toString().trim()\n  if (!s.startsWith(\"[\") || !s.endsWith(\"]\")) return []\n  def out = []; (s =~ /\\{[^}]*\\}/).each { b -> out << parseObjectGeneric(b[0]) }; out\n}\n\n/***********************\n * 4) Normalizers (no JsonSlurper)\n ***********************/\ndef normalizeToArray = { value ->\n  if (value == null) return []\n  if (value instanceof Collection) return value.collect { it?.toString()?.trim() }.findAll { it }\n  if (value instanceof String) {\n    def str = value.trim()\n    if (str.startsWith(\"[\") && str.endsWith(\"]\")) {\n      def toks = parseArrayString(str)\n      return toks.collect { it?.toString()?.trim() }.findAll { it }\n    } else {\n      return [str]\n    }\n  }\n  return [value.toString().trim()].findAll { it }\n}\n\ndef patientNameArray = normalizeToArray(patientNames)\ndef statusArray      = normalizeToArray(statusList)\n\n/***********************\n * 5) Data cleanup / field resolution\n ***********************/\ndef getActualValueForField = { fieldName, record ->\n  def fieldMapping = [\n    \"PatientName\":        [\"PatientName\", \"patient_name\", \"name\", \"_pr_PatientName\"],\n    \"Patientname\":        [\"PatientName\", \"patient_name\", \"name\", \"_pr_PatientName\"],\n    \"Status\":             [\"Status\", \"status\", \"approval_status\", \"_pr_Status\"],\n    \"CreatedDate\":        [\"CreatedDate\", \"TransDate\", \"created_date\", \"_pr_CreatedDate\"],\n    \"created_date\":       [\"CreatedDate\", \"TransDate\", \"created_date\", \"_pr_CreatedDate\"],\n    \"ServiceType\":        [\"ServiceType\", \"service_type\", \"_pr_ServiceType\"],\n    \"ServiceDescription\": [\"ServiceDescription\", \"service_description\", \"_pr_ServiceDescription\"],\n    \"HospitalName\":       [\"HospitalName\", \"hospital_name\", \"_pr_HospitalName\"],\n    \"MemberNo\":           [\"MemberNo\", \"member_no\", \"_pr_MemberNo\"],\n    \"PreApprovalNumber\":  [\"PreApprovalNumber\", \"pre_approval_number\", \"_pr_PreApprovalNumber\"],\n    \"RequestNo\":          [\"RequestNo\", \"request_no\", \"_pr_RequestNo\"],\n    \"ApprovedAmount\":     [\"ApprovedAmount\", \"approved_amount\", \"_pr_ApprovedAmount\"],\n    \"ClaimedAmount\":      [\"ClaimedAmount\", \"claimed_amount\", \"_pr_ClaimedAmount\"]\n  ]\n  def possibleFields = fieldMapping[fieldName] ?: [fieldName]\n  for (def pf : possibleFields) {\n    def value = record[pf]\n    if (value != null && value != \"null\" && !(value instanceof List && value.isEmpty())) return value\n  }\n  if (fieldName.toLowerCase().contains(\"name\")) {\n    for (def nf : [\"PatientName\", \"patient_name\", \"name\", \"Name\"]) {\n      def v = record[nf]; if (v != null && v != \"null\" && !(v instanceof List && v.isEmpty())) return v\n    }\n  }\n  if (fieldName.toLowerCase().contains(\"date\")) {\n    for (def df : [\"_pr_CreatedDate\",\"CreatedDate\",\"TransDate\",\"ExpAdmissionDate\",\"created_date\",\"trans_date\"]) {\n      def v = record[df]; if (v != null && v != \"null\" && !(v instanceof List && v.isEmpty())) return v\n    }\n  }\n  if (fieldName.toLowerCase().contains(\"status\")) return \"\"\n  return \"\"\n}\n\ndef transformRecord = { record ->\n  if (!(record instanceof Map)) return record\n  def transformed = [:]\n  record.each { key, value ->\n    if (key.startsWith(\"__\")) return\n    if (value instanceof List) {\n      if (value.isEmpty()) {\n        def actual = getActualValueForField(key, record)\n        transformed[key] = actual ?: \"\"\n      } else if (value.size() == 1) {\n        transformed[key] = value[0]\n      } else {\n        transformed[key] = value.collect { it?.toString() }\n      }\n    } else if (value == \"null\" || value == null) {\n      def actual = getActualValueForField(key, record)\n      transformed[key] = actual ?: \"\"\n    } else {\n      transformed[key] = value\n    }\n  }\n  return transformed\n}\n\n/***********************\n * 6) Build normalized container\n ***********************/\nboolean isList = dataIn instanceof List\nMap norm = null\n\nif (isList) {\n  norm = [objects: (List) dataIn]\n} else if (dataIn instanceof Map) {\n  if (dataIn.containsKey('columns') && dataIn.columns instanceof List) {\n    norm = [metadata: dataIn.metadata, objects: dataIn.columns]\n  } else if (dataIn.containsKey('result') && dataIn.result instanceof List) {\n    norm = [metadata: dataIn.metadata, objects: dataIn.result]\n  } else if (dataIn.containsKey('objects') && dataIn.objects instanceof List) {\n    norm = [metadata: dataIn.metadata, objects: dataIn.objects]\n  } else {\n    norm = [objects: []]\n  }\n}\n\nif (norm == null) return []\n\n/***********************\n * 7) Date parsing utility (for sorting)\n ***********************/\ndef TZ = java.time.ZoneId.of(\"Asia/Muscat\")\ndef now = java.time.ZonedDateTime.now(TZ)\n\ndef parseToZoned = { String s ->\n  if (!s) return null\n  s = s.trim()\n  try { return java.time.OffsetDateTime.parse(s).atZoneSameInstant(TZ) } catch (Throwable ignore) {}\n  try {\n    def fmt = java.time.format.DateTimeFormatter.ofPattern(\"yyyy-MM-dd['T']HH:mm[:ss][.SSS]\")\n    return java.time.LocalDateTime.parse(s, fmt).atZone(TZ)\n  } catch (Throwable ignore) {}\n  try { return java.time.LocalDate.parse(s).atStartOfDay(TZ) } catch (Throwable ignore) {}\n  return null\n}\n\n/***********************\n * 8) Name / Status matching\n ***********************/\ndef matchesPatientName = { record, nameArray ->\n  if (nameArray.isEmpty()) return true\n  def cols = (record.columns instanceof Map) ? record.columns : record\n  def patientName = cols._pr_PatientName ?: cols.PatientName ?: cols.patient_name ?: cols.name ?: \"\"\n  if (!patientName) return false\n  def recordName = patientName.toString().toLowerCase()\n  def tokens = nameArray.collect { it?.toString()?.toLowerCase()?.trim() }.findAll { it && it.size() >= 3 }\n  return tokens.any { recordName.contains(it) }\n}\n\ndef canonicalStatus = { s -> s?.toString()?.trim()?.toLowerCase()?.replaceAll(\"\\\\s+\", \"\") }\n\ndef matchesStatus = { record, statusFilter ->\n  if (statusFilter.isEmpty()) return true\n  def cols = (record.columns instanceof Map) ? record.columns : record\n  def recordStatus = cols._pr_Status ?: cols.Status ?: cols.status ?: \"\"\n  if (!recordStatus) return false\n  def rs = canonicalStatus(recordStatus)\n  def set = statusFilter.collect { canonicalStatus(it) } as Set\n  return set.contains(rs)\n}\n\n/***********************\n * 9) Transform + normalize all records FIRST\n ***********************/\ndef converted = new ArrayList(Math.max(norm.objects.size(),1))\nfor (def o : norm.objects) {\n  if (!(o instanceof Map)) continue\n  def transformedRecord = transformRecord(o)\n  def cols = (transformedRecord.columns instanceof Map) ? transformedRecord.columns : transformedRecord\n  if (!(cols instanceof Map)) continue\n\n  if (cols.grants instanceof String && cols.grants.startsWith(\"[\")) cols.grants = parseArrayString(cols.grants)\n  if (cols._pr_DocumentList instanceof String && cols._pr_DocumentList.startsWith(\"[\")) cols._pr_DocumentList = parseDocList(cols._pr_DocumentList)\n\n  [\"_pr_PatientName\", \"PatientName\", \"patient_name\", \"name\", \"Patientname\"].each { field ->\n    if (cols.containsKey(field) && cols[field]) {\n      def val = cols[field]\n      if (val instanceof String) {\n        cols[field] = normalizeNameCase(val)\n      } else if (val != null) {\n        cols[field] = normalizeNameCase(val.toString())\n      }\n    }\n  }\n  \n  [\"_pr_HospitalName\", \"HospitalName\", \"hospital_name\"].each { field ->\n    if (cols.containsKey(field) && cols[field]) {\n      def val = cols[field]\n      if (val instanceof String) {\n        cols[field] = normalizeNameCase(val)\n      } else if (val != null) {\n        cols[field] = normalizeNameCase(val.toString())\n      }\n    }\n  }\n  \n  [\"_pr_BasicDiagnosis\", \"BasicDiagnosis\", \"basic_diagnosis\"].each { field ->\n    if (cols.containsKey(field) && cols[field]) {\n      def val = cols[field]\n      if (val instanceof String) {\n        cols[field] = normalizeNameCase(val)\n      } else if (val != null) {\n        cols[field] = normalizeNameCase(val.toString())\n      }\n    }\n  }\n\n  if (cols.containsKey('deleted')) {\n    def delVal = cols.deleted\n    if (delVal == true || delVal == \"true\" || delVal?.toString()?.toLowerCase() == \"true\") continue\n  }\n\n  def processedRecord = [ columns: cols ]\n\n  if (!matchesPatientName(processedRecord, patientNameArray)) continue\n  if (!matchesStatus(processedRecord, statusArray)) continue\n\n  converted << processedRecord\n}\n\n/***********************\n * 10) SORT IMMEDIATELY after filtering (before date range)\n * This ensures consistent ordering on every refresh\n ***********************/\nconverted.sort { a, b ->\n  def colsA = a.columns\n  def colsB = b.columns\n  \n  def dateA = (colsA._pr_CreatedDate ?: colsA.CreatedDate)?.toString()\n  def dateB = (colsB._pr_CreatedDate ?: colsB.CreatedDate)?.toString()\n  \n  def tsA = parseToZoned(dateA)\n  def tsB = parseToZoned(dateB)\n  \n  // Primary sort: newest first (descending)\n  if (tsA && tsB) {\n    def cmp = tsB.compareTo(tsA)\n    if (cmp != 0) return cmp\n  } else if (tsA) {\n    return -1  // Records with dates come before null dates\n  } else if (tsB) {\n    return 1\n  }\n  \n  // Secondary sort: by PreApprovalNumber or RequestNo for stability\n  def idA = (colsA._pr_PreApprovalNumber ?: colsA.PreApprovalNumber ?: colsA._pr_RequestNo ?: colsA.RequestNo)?.toString() ?: \"\"\n  def idB = (colsB._pr_PreApprovalNumber ?: colsB.PreApprovalNumber ?: colsB._pr_RequestNo ?: colsB.RequestNo)?.toString() ?: \"\"\n  \n  return idB.compareTo(idA)\n}\n\n/***********************\n * 11) Shape-preserving return helper\n ***********************/\ndef returnConvertedSameShape = { objs, summary ->\n  if (isList) return objs\n  return [ summary: summary, metadata: norm.metadata, objects: objs ]\n}\n\n/***********************\n * 12) Date range filtering (after sorting)\n ***********************/\ndef makeSummary = { createdDateValue, fromDate, toDate, beforeCount, afterNameStatus, matched ->\n  [\n    created_date: (createdDateValue ?: \"all\"),\n    patientNames: patientNameArray,\n    statusList: statusArray,\n    timezone   : TZ.toString(),\n    fromDate   : (fromDate ? fromDate.toString() : null),\n    toDate     : (toDate ? toDate.toString() : null),\n    totalRowsBeforeFiltering          : beforeCount,\n    totalRowsAfterNameStatusFiltering : afterNameStatus,\n    matchedRows                       : matched\n  ]\n}\n\nif (createdDate == null || createdDate.toString().trim().isEmpty()) {\n  def summary = makeSummary(null, null, now, norm.objects.size(), converted.size(), converted.size())\n  return returnConvertedSameShape(converted, summary)\n}\n\ndef opt = createdDate.toString().trim().toLowerCase()\ndef from = null\nswitch (opt) {\n  case \"all\":\n    def summary = makeSummary(\"all\", null, now, norm.objects.size(), converted.size(), converted.size())\n    return returnConvertedSameShape(converted, summary)\n  case [\"past 15 days\",\"last 15 days\"]:\n    from = now.minusDays(15); break\n  case [\"past 1 month\",\"past one month\",\"last 1 month\",\"last month\"]:\n    from = now.minusMonths(1); break\n  case [\"past 3 months\",\"past three months\",\"last 3 months\"]:\n    from = now.minusMonths(3); break\n  default:\n    def summary2 = makeSummary(\"all (unrecognized: ${opt})\", null, now, norm.objects.size(), converted.size(), converted.size())\n    return returnConvertedSameShape(converted, summary2)\n}\n\ndef filtered = []\nfor (def w : converted) {\n  def cols = (w.columns instanceof Map) ? w.columns : null\n  if (!cols) continue\n  def lu = (cols._pr_CreatedDate ?: cols.CreatedDate)?.toString()\n  def ts = parseToZoned(lu)\n  if (ts && !ts.isBefore(from)) filtered << w\n}\n\n/***********************\n * 13) Final return (filtered is already sorted)\n ***********************/\ndef summary3 = makeSummary(opt, from, now, norm.objects.size(), converted.size(), filtered.size())\nreturn returnConvertedSameShape(filtered, summary3)",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"raised_date":"{{ n_0CC2a.outputs.Raiseddate }}",
					"result":"{{ _KxTZr.outputs.objects }}",
					"HospitalName":"{{ _KxTZr.outputs.objects[0].columns._pr_HospitalName }}",
					"PatientName":{
						"source":"{{ n_0CC2a.outputs.Patientname }}",
						"ua:type":"mappedArray",
						"items":"{{ n_0CC2a.outputs.Patientname[0] }}"
					},
					"Status":{
						"source":"{{ n_0CC2a.outputs.Status }}",
						"ua:type":"mappedArray",
						"items":"{{ n_0CC2a.outputs.Status[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				},
				"visibleOptionalFields":[
					"root.parameters.patient_name.items",
					"root.parameters.status.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":15,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_8LuYQ-1",
			"id":"_ckVcY",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"columns":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"_pr_ApprovedAmount":{
										"type":"integer",
										"title":"_pr_ApprovedAmount"
									},
									"_pr_BasicDiagnosis":{
										"type":"string",
										"title":"_pr_BasicDiagnosis"
									},
									"_pr_ClaimedAmount":{
										"type":"integer",
										"title":"_pr_ClaimedAmount"
									},
									"_pr_CreatedDate":{
										"type":"string",
										"title":"_pr_CreatedDate"
									},
									"_pr_DecisionBy":{
										"type":"string",
										"title":"_pr_DecisionBy"
									},
									"_pr_DhamaniNumber":{
										"type":"string",
										"title":"_pr_DhamaniNumber"
									},
									"_pr_ExpAdmissionDate":{
										"type":"string",
										"title":"_pr_ExpAdmissionDate"
									},
									"_pr_ExtensionNumber":{
										"type":"integer",
										"title":"_pr_ExtensionNumber"
									},
									"_pr_HospitalName":{
										"type":"string",
										"title":"_pr_HospitalName"
									},
									"_pr_MemberId":{
										"type":"string",
										"title":"_pr_MemberId"
									},
									"_pr_MemberIdHashed":{
										"type":"string",
										"title":"_pr_MemberIdHashed"
									},
									"_pr_MemberNo":{
										"type":"string",
										"title":"_pr_MemberNo"
									},
									"_pr_OpdIpd":{
										"type":"string",
										"title":"_pr_OpdIpd"
									},
									"_pr_PatientName":{
										"type":"string",
										"title":"_pr_PatientName"
									},
									"_pr_PreApprovalNumber":{
										"type":"integer",
										"title":"_pr_PreApprovalNumber"
									},
									"_pr_RequestNo":{
										"type":"integer",
										"title":"_pr_RequestNo"
									},
									"_pr_ServiceDescription":{
										"type":"string",
										"title":"_pr_ServiceDescription"
									},
									"_pr_ServiceType":{
										"type":"string",
										"title":"_pr_ServiceType"
									},
									"_pr_Status":{
										"type":"string",
										"title":"_pr_Status"
									},
									"_pr_SystemBenefit":{
										"type":"string",
										"title":"_pr_SystemBenefit"
									},
									"_pr_TransDate":{
										"type":"string",
										"title":"_pr_TransDate"
									},
									"_pr_primary_user_member_id":{
										"type":"string",
										"title":"_pr_primary_user_member_id"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"columns"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"result":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Result"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"/***********************\n * 1) Flexible input pickers\n ***********************/\ndef pickVar = { names ->\n  for (n in names) if (binding?.hasVariable(n)) return binding.getVariable(n)\n  def vars = binding?.getVariables() instanceof Map ? binding.getVariables() : [:]\n  for (e in vars.entrySet()) if (e.value instanceof Map)\n    for (n in names) if (e.value.containsKey(n)) return e.value[n]\n  return null\n}\n\ndef dataIn = pickVar([\"oman_pre_approvals_list\",\"result\",\"data\",\"dataObj\",\"payload\",\"body\",\"params\",\"Data\"])\n\n/***********************\n * 2) Normalize to objects list\n ***********************/\ndef norm = [:]\nif (dataIn instanceof Collection) {\n  norm.objects = dataIn\n} else if (dataIn instanceof Map && dataIn.objects instanceof Collection) {\n  norm.objects = dataIn.objects\n} else {\n  norm.objects = []\n}\n\n/***********************\n * 3) Deduplication with RequestNo composite key + PatientName preference\n ***********************/\ndef converted = new ArrayList(Math.max(norm.objects?.size() ?: 0,1))\ndef seenRecords = [:]\n\nfor (def o : norm.objects) {\n  if (!(o instanceof Map)) continue\n\n  // 👇 unwrap JSON object columns if present\n  def cols = (o.columns instanceof Map) ? o.columns : o\n  if (!(cols instanceof Map)) continue\n\n  // ✅ Composite key: RequestNo + ServiceDescription + MemberId + Status\n  def requestNo   = (cols._pr_RequestNo ?: cols.RequestNo ?: \"\").toString().trim().toLowerCase()\n  def service     = (cols._pr_ServiceDescription ?: cols.ServiceDescription ?: \"\").toString().trim().toLowerCase()\n  def member      = (cols._pr_MemberId ?: cols.MemberId ?: \"\").toString().trim().toLowerCase()\n  def status      = (cols._pr_Status ?: cols.Status ?: \"\").toString().trim().toLowerCase()\n\n  def uniqueKey = \"${requestNo}|${service}|${member}|${status}\"\n\n  // ✅ Skip deleted:true records\n  if (cols.deleted == true) {\n    println \"SKIPPING deleted record for key=${uniqueKey}\"\n    continue\n  }\n\n  if (uniqueKey && uniqueKey != \"|||\") {\n    def hasPatientName = cols._pr_PatientName != null && cols._pr_PatientName.toString().trim() != \"\"\n    def existingIndex = seenRecords[uniqueKey]\n\n    if (existingIndex == null) {\n      // ✅ Always keep the first record, even if nameless\n      seenRecords[uniqueKey] = converted.size()\n      converted << cols\n      println \"ADDED record key=${uniqueKey}, hasPatientName=${hasPatientName}\"\n    } else {\n      def existing = converted[existingIndex]\n      def existingHasName = existing._pr_PatientName != null && existing._pr_PatientName.toString().trim() != \"\"\n\n      if (hasPatientName && !existingHasName) {\n        println \"REPLACING nameless with named record for key=${uniqueKey}\"\n        converted[existingIndex] = cols\n      } else {\n        println \"SKIPPING duplicate for key=${uniqueKey}, PatientName=${cols._pr_PatientName}\"\n      }\n    }\n  } else {\n    println \"NO KEY → skipping record: PatientName=${cols._pr_PatientName}\"\n  }\n}\n\nprintln \"SUMMARY: Total kept=${converted.size()}, Unique keys=${seenRecords.size()}\"\n\n/***********************\n * 4) Return in expected structure\n ***********************/\nreturn [ columns: converted ?: [] ]\n",
				"parameters":{
					"result":"{{ _KxTZr.outputs.objects }}"
				}
			},
			"skip":true,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":18,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_8LuYQ-1",
			"id":"n_2cHa3",
			"index":5,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"columns":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"_pr_PreApprovalNumber":{
										"type":"integer",
										"title":"_pr_PreApprovalNumber"
									},
									"_pr_PatientName":{
										"type":"string",
										"title":"_pr_PatientName"
									},
									"_pr_DecisionBy":{
										"type":"string",
										"title":"_pr_DecisionBy"
									},
									"_pr_DhamaniNumber":{
										"type":"string",
										"title":"_pr_DhamaniNumber"
									},
									"_pr_RequestNo":{
										"type":"integer",
										"title":"_pr_RequestNo"
									},
									"_pr_CreatedDate":{
										"type":"string",
										"title":"_pr_CreatedDate"
									},
									"_pr_BasicDiagnosis":{
										"type":"string",
										"title":"_pr_BasicDiagnosis"
									},
									"_pr_Status":{
										"type":"string",
										"title":"_pr_Status"
									},
									"_pr_ExtensionNumber":{
										"type":"integer",
										"title":"_pr_ExtensionNumber"
									},
									"_pr_primary_user_member_id":{
										"type":"string",
										"title":"_pr_primary_user_member_id"
									},
									"_pr_ClaimedAmount":{
										"type":"integer",
										"title":"_pr_ClaimedAmount"
									},
									"_pr_ApprovedAmount":{
										"type":"integer",
										"title":"_pr_ApprovedAmount"
									},
									"_pr_HospitalName":{
										"type":"string",
										"title":"_pr_HospitalName"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"columns"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"PatientName":{
							"type":"string",
							"title":"Patient Name"
						},
						"HospitalName":{
							"type":"string",
							"title":"Hospital Name"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"code":"def normalizeText(input) {\n    if (!input) return input\n    return input\n        .trim()\n        .replaceAll(/\\s+/, \" \")\n        .toLowerCase()\n        .split(\" \")\n        .collect { it.capitalize() }\n        .join(\" \")\n}\n\ndef transform(data) {\n    if (!data?.result) {\n        return [columns: []]\n    }\n\n    def normalized = data.result.collect { row ->\n        def record = row.columns\n\n        def patient = record._pr_PatientName ? normalizeText(record._pr_PatientName) : null\n        def hospital = record._pr_HospitalName ? normalizeText(record._pr_HospitalName) : null\n\n        record + [\n            _pr_PatientName : patient,\n            _pr_HospitalName: hospital\n        ]\n    }\n\n    return [columns: normalized]\n}\n",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"HospitalName":"{{ _ckVcY.outputs.result.columns[0]._pr_HospitalName }}",
					"PatientName":"{{ _ckVcY.outputs.result.columns[0]._pr_PatientName }}"
				}
			},
			"skip":true,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":18,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_8LuYQ-1",
			"id":"n_EaJPX",
			"index":6,
			"inputs":{
				"result":{
					"columns":{
						"source":"{{ n_Hl6Aq.outputs.result.columns }}",
						"ua:type":"mappedArray",
						"items":{
							"_pr_PreApprovalNumber":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_PreApprovalNumber }}",
							"_pr_PatientName":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_PatientName }}",
							"_pr_RequestNo":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_RequestNo }}",
							"_pr_CreatedDate":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_CreatedDate }}",
							"_pr_BasicDiagnosis":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_BasicDiagnosis }}",
							"_pr_Status":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_Status }}",
							"_pr_primary_user_member_id":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_primary_user_member_id }}",
							"_pr_ClaimedAmount":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_ClaimedAmount }}",
							"_pr_ApprovedAmount":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_ApprovedAmount }}",
							"_pr_HospitalName":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_HospitalName }}",
							"_pr_DhamaniNumber":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_DhamaniNumber }}",
							"_pr_Remarks":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_Remarks }}",
							"AR_Status":"{{ n_Hl6Aq.outputs.result.columns[0]._pr_AR_Status }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":33404,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":84
}