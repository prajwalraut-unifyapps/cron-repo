{
	"appsUsed":[
		
	],
	"createdTime":1755674342150,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1758886303492,
		"deployedBy":-1,
		"deployedDefinitionId":"68d6799f3323d9309656dbc0",
		"status":"DEPLOYED",
		"version":50,
		"workflowVersion":69
	},
	"edges":[
		{
			"fromNodeId":"n_tjaC2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_RwVJO",
			"type":"next"
		},
		{
			"fromNodeId":"n_RwVJO",
			"priority":0,
			"skip":false,
			"toNodeId":"n_4vDve",
			"type":"next"
		},
		{
			"fromNodeId":"n_4vDve",
			"priority":0,
			"skip":false,
			"toNodeId":"n_3CGWt",
			"type":"next"
		},
		{
			"fromNodeId":"n_3CGWt",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ckNXN",
			"type":"next"
		},
		{
			"fromNodeId":"n_ckNXN",
			"priority":0,
			"skip":false,
			"toNodeId":"n_0QXFh",
			"type":"next"
		},
		{
			"fromNodeId":"n_0QXFh",
			"priority":0,
			"skip":false,
			"toNodeId":"n_5uu8y",
			"type":"next"
		},
		{
			"fromNodeId":"n_5uu8y",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8zF6x",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"68a31d74f388a247b294ac50",
	"lastModifiedBy":1,
	"lcName":"evaluation | text2sql | metric",
	"modifiedTime":1758963933864,
	"name":"Evaluation | Text2SQL | Metric",
	"nodes":[
		{
			"context":{
				"appName":"ai_evaluator_by_unifyapps",
				"resourceVersion":301,
				"resourceName":"ai_evaluator_by_unifyapps_trigger_metric_evaluation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_hE3Sg-1",
			"id":"n_tjaC2",
			"index":1,
			"inputs":{
				"setup":{
					"type":"object",
					"properties":{
						"input":{
							"type":"string"
						},
						"expected_output":{
							"type":"string"
						},
						"context":{
							"type":"string"
						},
						"expected_tools":{
							"type":"array",
							"items":{
								"type":"object"
							}
						},
						"actual_output":{
							"type":"string"
						},
						"retrieved_context":{
							"type":"string"
						},
						"tools_called":{
							"type":"array",
							"items":{
								"type":"object"
							}
						},
						"additional":{
							"type":"object",
							"additionalProperties":true
						}
					}
				}
			},
			"skip":false,
			"subTitle":"AI Evaluator by UnifyApps",
			"title":"Triggers LLM metrics evaluation",
			"trigger":{
				"type":"EVENT"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_hE3Sg-1",
			"id":"n_RwVJO",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"tools_called":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Tools Called"
						},
						"expected_output":{
							"type":"string",
							"title":"Expected Output"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"input":{
							"type":"string",
							"title":"Input"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"\n\n// // Extract the TOOLS_USED block using regex\n// def matcher = input =~ /\"TOOLS_USED\"\\s*:\\s*(\\[[^\\]]*\\])/\n// if (matcher.find()) {\n//     def toolsUsedRaw = matcher.group(1)\n\n//     // This is a string representation of a JSON array, e.g.:\n//     // [\"{\\\"type\\\":\\\"tool_use\\\",\\\"id\\\":\\\"4e6cd64c-fe8f-40fe-94b1\\\",\\\"name\\\":\\\"ExecuteSQL\\\",\\\"input\\\":{\\\"sql_query\\\":\\\"SELECT ...\\\"}}\"]\n//     // We'll extract all items (still as strings):\n//     def toolsUsedList = []\n//     // Remove leading/trailing square brackets and whitespace\n//     toolsUsedRaw = toolsUsedRaw[1..-2].trim()\n\n//     // Use regex to extract top-level comma-separated quoted strings\n//     toolsUsedRaw.split(/\"[\\s]*,[\\s]*\"/).each { item ->\n//         // Remove leading/trailing quotes and unescape characters\n//         item = item.replaceAll(/^\"+|\"+$/, '') // Remove outermost quotes\n//         item = item.replaceAll('\\\\\\\\([\"\\\\\\\\/bfnrt])', '$1') // Unescape some chars\n//         item = item.replaceAll('\\\\\\\\n', '\\n') // Unescape \\n\n\n//         // Optionally, further clean up (if double slashes remain)\n//         toolsUsedList << item\n//     }\n//     return [\"tools_called\" : toolsUsedList]\n// }else{\n//   return [\"tools_called\" : []]\n\n// }\n\n// 1. Extract the TOOLS_USED contents (stuff inside [ ... ])\ndef matcher = input =~ /\"TOOLS_USED\"\\s*:\\s*(\\[[^\\]]*\\])/\ndef toolsUsedList = []\nif (matcher.find()) {\n    def toolsUsedRaw = matcher.group(1)\n    // Minimal fix for outer array\n    toolsUsedRaw = toolsUsedRaw[1..-2].trim()\n    if(toolsUsedRaw) {\n        // Handles single or multiple tools (very basic, assumes no commas inside items except between tools)\n        def toolMatches = toolsUsedRaw.split('(?<!\\\\\\\\)\",\\\\s*\"')\n        toolMatches.each { item ->\n            // 2. Clean up each item so it's a proper JSON string (still in JSON syntax)\n            item = item.replaceAll(/^\"+|\"+$/, '') // remove leading/trailing quotes\n            item = item.replace('\\\\n', '\\n') // optional: replace literal \"\\n\" with newline\n            // 3. Extract fields: Only works for flat key:val or known nested 'input' object\n            def toolMap = [:]\n            // Top-level key-values:\n            def fieldMatcher = item =~ /\\\\\"(\\w+)\\\\\" *: *(\\\\\"[^\\\\\"]*\\\\\"|\\{[^}]*\\})/\n            fieldMatcher.findAll().each { m ->\n                def key = m[1]\n                def val = m[2]\n                if(val.startsWith('\\\"') && val.endsWith('\\\"')) {\n                    val = val.substring(1, val.length()-1)\n                }\n                // Handle simple nested object for \"input\"\n                if(key=='input' && val.startsWith('{') && val.endsWith('}')) {\n                    // extract subfields for input (very basic, only flat key:val)\n                    def inputMap = [:]\n                    def subFieldMatcher = val =~ /\\\\\"([^\\\\\"]+)\\\\\" *: *\\\\\"([^\\\\\"]*)\\\\\"/\n                    subFieldMatcher.findAll().each { sm ->\n                        inputMap[sm[1]] = sm[2].replace('\\\\n', '\\n')\n                    }\n                    toolMap[key] = inputMap\n                } else {\n                    toolMap[key] = val\n                }\n            }\n            toolsUsedList << toolMap\n        }\n    }\n}\n\n// Pretty print for clarity\ntoolsUsedList.each { toolMap ->\n    toolMap.each { k,v -> println \"  $k : $v\" }\n}\n\ndef matcher1 = input =~ /\"EXPECTED_OUTPUT\"\\s*:\\s*\"((?:\\\\.|[^\"\\\\])*)\"/\ndef expectedOutput = \"\"\nif (matcher1.find()) {\n    expectedOutput = matcher1.group(1)\n    // Unescape any escape sequences if necessary\n    expectedOutput = expectedOutput.replaceAll('\\\\\\\\n', '\\n').replaceAll('\\\\\\\\t', '\\t')\n} \n\nreturn [\"tools_called\" : toolsUsedList,\"expected_output\" : expectedOutput]",
				"parameters":{
					"input":"{{ n_tjaC2.outputs }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"utility_by_unifyapps_to_json_object",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_hE3Sg-1",
			"id":"n_4vDve",
			"index":3,
			"inputs":{
				"jsonSchema":{
					"type":"object",
					"properties":{
						"Input":{
							"type":"string",
							"title":"Input"
						},
						"Expected Output":{
							"type":"string",
							"title":"Expected Output"
						},
						"Context":{
							"type":"string",
							"title":"Context"
						},
						"Expected Tools":{
							"type":"array",
							"items":{
								"type":"object"
							},
							"title":"Expected Tools"
						},
						"Actual Output":{
							"type":"string",
							"title":"Actual Output"
						},
						"Tools Called":{
							"type":"array",
							"items":{
								"type":"object"
							},
							"title":"Tools Called"
						},
						"Additional":{
							"type":"object",
							"title":"Additional"
						}
					},
					"additionalProperties":false
				},
				"jsonString":"{{ n_tjaC2.outputs }}"
			},
			"skip":true,
			"subTitle":"Utility by UnifyApps",
			"title":"Deserialise string to JSON object",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.tools_called.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_hE3Sg-1",
			"id":"n_3CGWt",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"sql_query_generated":{
							"type":"string",
							"title":"Sql Query Generated"
						},
						"chart":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Chart"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"tools_called":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Tools Called"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"// def recent = tools_called.reverse().find { it.name == \"ExecuteSQL\" }\n// def sql = recent?.input?.sql_query\n// return [\"sql_query_generated\" : sql]\n\ndef recent = tools_called.reverse().find { \n    it.name.replaceAll(/^\\\\+\"|\\\\+\"$/, '') == \"ExecuteSQL\"\n}\ndef sql = recent?.input?.sql_query\nreturn [\"sql_query_generated\" : sql]",
				"parameters":{
					"tools_called":{
						"ua:type":"mappedArray",
						"source":"{{ n_RwVJO.outputs.result.tools_called }}",
						"items":"{{ n_RwVJO.outputs.result.tools_called[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":450,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_hE3Sg-1",
			"id":"n_ckNXN",
			"index":5,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"type":"object",
									"properties":{
										"type":{
											"type":"string",
											"title":"type"
										},
										"text":{
											"type":"string",
											"title":"text"
										}
									},
									"additionalProperties":false
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray",
					"items":{
						"type":"text",
						"text":"You are given two SQL queries:\nExpected SQL query:{{ n_RwVJO.outputs.result.expected_output }}\nGenerated SQL query:{{ n_3CGWt.outputs.result.sql_query_generated }}\nYour task is to rigorously evaluate how similar these two queries are, based strictly on the following criteria:\nDo they use the same tables? Do they reference the same columns? Do they have the same retrieval intent? (In other words: would they return the same results from the database under the same database state?)\nScore the similarity strictly on a scale of 1 to 5, where:\n5: Queries are functionally identical (same tables, columns, and intent—results will always match).\n3: Queries are somewhat similar (majority of tables and columns overlap, results generally similar but not always identical).\n1: Queries are substantially different (different tables and/or columns, different intent, results clearly different).\n[STRICTLY]Return only a single JSON object in the following format:\n{ \"explanation\" : \"Your detailed explanation here about the similarities/differences and justification for the score.\", \"sql_query_is_similar_score\": (integer score 1-5) }\nThe explanation should justify your score thoroughly."
					}
				},
				"ua:title":"content",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"content",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{
									"type":{
										"type":"string",
										"title":"type"
									},
									"text":{
										"type":"string",
										"title":"text"
									}
								}
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":464,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_hE3Sg-1",
			"id":"n_0QXFh",
			"index":6,
			"inputs":{
				"automationId":"66ac70650f725f5b425d12d8",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"logProbs":false,
					"responseFormat":{
						"type":"json_object"
					},
					"message":{
						"items":{
							"role":"user",
							"content":{
								"source":"{{ n_ckNXN.outputs.items }}",
								"ua:type":"mappedArray",
								"items":"{{ n_ckNXN.outputs.items[0] }}"
							}
						},
						"ua:type":"mappedArray"
					},
					"aiAgentId":"e_68812df92d83e05e15f4c0d1"
				}
			},
			"skip":false,
			"subTitle":"sql query comparison",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"utility_by_unifyapps_to_json_object",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_hE3Sg-1",
			"id":"n_5uu8y",
			"index":7,
			"inputs":{
				"jsonSchema":{
					"type":"object",
					"properties":{
						"explanation":{
							"type":"string",
							"title":"explanation"
						},
						"sql_query_is_similar_score":{
							"type":"integer",
							"title":"sql_query_is_similar_score"
						}
					},
					"additionalProperties":false
				},
				"jsonString":"{{ n_0QXFh.outputs.llmResponse }}"
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Deserialise string to JSON object",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"ai_evaluator_by_unifyapps",
				"resourceVersion":301,
				"resourceName":"ai_evaluator_by_unifyapps_return_response_to_metric_evaluation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_hE3Sg-1",
			"id":"n_8zF6x",
			"index":8,
			"inputs":{
				"result":{
					"score":"{{ n_5uu8y.outputs.result.sql_query_is_similar_score }}",
					"reason":"{{ n_5uu8y.outputs.result.explanation }}"
				}
			},
			"skip":false,
			"subTitle":"AI Evaluator by UnifyApps",
			"title":"Respond to metric evaluation",
			"type":"STOP"
		}
	],
	"ownerUserId":0,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":false,
		"enableRunLogging":false,
		"enableVariableLogging":false,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":70
}