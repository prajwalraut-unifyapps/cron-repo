{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1760082008818,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760645930194,
		"deployedBy":1,
		"deployedDefinitionId":"68f1532a6ab2437612e79528",
		"status":"DEPLOYED",
		"version":11,
		"workflowVersion":33
	},
	"edges":[
		{
			"fromNodeId":"n_LQTKC",
			"priority":0,
			"skip":false,
			"toNodeId":"n_RtjNn",
			"type":"next"
		},
		{
			"fromNodeId":"n_RtjNn",
			"priority":0,
			"skip":false,
			"toNodeId":"n_zYCxO",
			"type":"next"
		},
		{
			"fromNodeId":"n_zYCxO",
			"name":"success",
			"priority":0,
			"skip":false,
			"toNodeId":"n_apmBP",
			"type":"next"
		},
		{
			"fromNodeId":"n_apmBP",
			"priority":0,
			"skip":false,
			"toNodeId":"n_cnKJ4",
			"type":"next"
		},
		{
			"fromNodeId":"n_cnKJ4",
			"priority":0,
			"skip":false,
			"toNodeId":"n_HNnuw",
			"type":"next"
		},
		{
			"fromNodeId":"n_HNnuw",
			"priority":0,
			"skip":false,
			"toNodeId":"_zpJTM",
			"type":"loop"
		},
		{
			"fromNodeId":"_zpJTM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_0oA5N",
			"type":"next"
		},
		{
			"fromNodeId":"n_0oA5N",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"n_HNnuw",
			"type":"next"
		},
		{
			"fromNodeId":"n_HNnuw",
			"priority":0,
			"skip":false,
			"toNodeId":"n_TJKRZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_TJKRZ",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rYuMU",
			"type":"next"
		},
		{
			"fromNodeId":"n_zYCxO",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"n_hvdpI",
			"type":"error"
		},
		{
			"fromNodeId":"n_rYuMU",
			"priority":0,
			"skip":false,
			"toNodeId":"n_JMAAm",
			"type":"next"
		},
		{
			"fromNodeId":"n_hvdpI",
			"priority":0,
			"skip":false,
			"toNodeId":"n_JMAAm",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"VIEW_RUNS",
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"68e76e270e377b0bdc8c4a7f",
	"lastModifiedBy":1,
	"lcName":"[dt] retrieves the chat history api",
	"modifiedTime":1760703240551,
	"name":"[DT] Retrieves the chat history API",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{
						"response":[
							{}
						]
					}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":0,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_MPdFP-1",
			"id":"n_LQTKC",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"caseId":{
								"type":"string",
								"title":"Case Id"
							},
							"limit":{
								"type":"integer",
								"title":"Limit"
							},
							"offset":{
								"type":"integer",
								"title":"Offset"
							}
						},
						"additionalProperties":false,
						"required":[]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"namespaces":[],
						"body":{
							"type":"object",
							"properties":{
								"chatResult":{
									"type":"object",
									"properties":{
										"chat":{
											"type":"object",
											"properties":{
												"id":{
													"type":"string",
													"title":"id"
												},
												"createTime":{
													"type":"integer",
													"title":"createTime"
												},
												"updateTime":{
													"type":"integer",
													"title":"updateTime"
												},
												"messages":{
													"type":"array",
													"items":{
														"type":"object",
														"properties":{
															"citations":{
																"type":"array",
																"items":{
																	"type":"object",
																	"properties":{
																		"sourceDocument":{
																			"type":"object",
																			"properties":{
																				"id":{
																					"type":"string",
																					"title":"id"
																				},
																				"title":{
																					"type":"string",
																					"title":"title"
																				},
																				"url":{
																					"type":"string",
																					"title":"url"
																				},
																				"metadata":{
																					"type":"object",
																					"properties":{
																						"mimeType":{
																							"type":"string",
																							"title":"mimeType"
																						}
																					},
																					"title":"metadata",
																					"additionalProperties":false
																				}
																			},
																			"title":"sourceDocument",
																			"additionalProperties":false
																		},
																		"referenceRanges":{
																			"type":"array",
																			"items":{
																				"type":"object",
																				"properties":{
																					"snippets":{
																						"type":"array",
																						"items":{
																							"type":"object",
																							"properties":{
																								"text":{
																									"type":"string",
																									"title":"text"
																								},
																								"chunkNumber":{
																									"type":"integer",
																									"title":"chunkNumber"
																								}
																							},
																							"additionalProperties":false
																						},
																						"title":"snippets"
																					}
																				},
																				"additionalProperties":false
																			},
																			"title":"referenceRanges"
																		}
																	},
																	"additionalProperties":false
																},
																"title":"citations"
															},
															"fragments":{
																"type":"array",
																"items":{
																	"type":"object",
																	"properties":{
																		"structuredResults":{
																			"type":"array",
																			"items":{
																				"type":"object",
																				"properties":{
																					"document":{
																						"type":"object",
																						"properties":{
																							"id":{
																								"type":"string",
																								"title":"id"
																							},
																							"title":{
																								"type":"string",
																								"title":"title"
																							},
																							"url":{
																								"type":"string",
																								"title":"url"
																							},
																							"metadata":{
																								"type":"object",
																								"properties":{
																									"mimeType":{
																										"type":"string",
																										"title":"mimeType"
																									}
																								},
																								"title":"metadata",
																								"additionalProperties":false
																							}
																						},
																						"title":"document",
																						"additionalProperties":false
																					},
																					"referenceRanges":{
																						"type":"array",
																						"items":{
																							"type":"object",
																							"properties":{
																								"snippets":{
																									"type":"array",
																									"items":{
																										"type":"object",
																										"properties":{
																											"text":{
																												"type":"string",
																												"title":"text"
																											},
																											"chunkNumber":{
																												"type":"integer",
																												"title":"chunkNumber"
																											}
																										},
																										"additionalProperties":false
																									},
																									"title":"snippets"
																								}
																							},
																							"additionalProperties":false
																						},
																						"title":"referenceRanges"
																					}
																				},
																				"additionalProperties":false
																			},
																			"title":"structuredResults"
																		},
																		"text":{
																			"type":"string",
																			"title":"text"
																		},
																		"file":{
																			"type":"object",
																			"properties":{
																				"id":{
																					"type":"string",
																					"title":"id"
																				},
																				"url":{
																					"type":"string",
																					"title":"url"
																				},
																				"name":{
																					"type":"string",
																					"title":"name"
																				},
																				"metadata":{
																					"type":"object",
																					"properties":{
																						"mimeType":{
																							"type":"string",
																							"title":"mimeType"
																						}
																					},
																					"title":"metadata",
																					"additionalProperties":false
																				}
																			},
																			"title":"file",
																			"additionalProperties":false
																		}
																	},
																	"additionalProperties":false
																},
																"title":"fragments"
															},
															"messageId":{
																"type":"string",
																"title":"messageId"
															},
															"messageType":{
																"type":"string",
																"title":"messageType"
															},
															"createdTime":{
																"type":"integer",
																"title":"createdTime"
															},
															"caseId":{
																"type":"string",
																"title":"caseId"
															},
															"hasAttachments":{
																"type":"boolean",
																"title":"hasAttachments"
															},
															"additional":{
																"type":"object",
																"properties":{
																	"parentMessageId":{
																		"type":"string",
																		"title":"parentMessageId"
																	},
																	"IsDataRAGExecuted":{
																		"type":"boolean",
																		"title":"IsDataRAGExecuted"
																	},
																	"streamingInProgress":{
																		"type":"boolean",
																		"title":"streamingInProgress"
																	},
																	"parallelToolCallEnabled":{
																		"type":"boolean",
																		"title":"parallelToolCallEnabled"
																	},
																	"temporaryMessage":{
																		"type":"boolean",
																		"title":"temporaryMessage"
																	},
																	"streamingCompletionTime":{
																		"type":"integer",
																		"title":"streamingCompletionTime"
																	},
																	"internalMessageType":{
																		"type":"string",
																		"title":"internalMessageType"
																	},
																	"sql_output":{
																		"type":"string",
																		"title":"sql_output"
																	},
																	"messageDeliveryStatus":{
																		"type":"string",
																		"title":"messageDeliveryStatus"
																	},
																	"firstResponseMessageId":{
																		"type":"string",
																		"title":"firstResponseMessageId"
																	},
																	"firstResponseMessageTime":{
																		"type":"integer",
																		"title":"firstResponseMessageTime"
																	},
																	"responseTime":{
																		"type":"integer",
																		"title":"responseTime"
																	},
																	"ttsDetails":{
																		"type":"object",
																		"properties":{
																			"fileUrl":{
																				"type":"string",
																				"title":"fileUrl"
																			}
																		},
																		"additionalProperties":false,
																		"title":"ttsDetails",
																		"required":[]
																	}
																},
																"title":"additional",
																"additionalProperties":false,
																"required":[]
															},
															"fromCustomerUserId":{
																"type":"string",
																"title":"fromCustomerUserId"
															},
															"searchQueryId":{
																"type":"string",
																"title":"searchQueryId"
															}
														},
														"additionalProperties":false
													},
													"title":"messages"
												},
												"messageCount":{
													"type":"integer",
													"title":"Message Count"
												}
											},
											"title":"chat",
											"additionalProperties":false,
											"required":[]
										}
									},
									"title":"chatResult",
									"additionalProperties":false
								}
							},
							"additionalProperties":false
						}
					},
					{
						"status":400,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					},
					{
						"status":401,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					},
					{
						"status":403,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					},
					{
						"status":429,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					},
					{
						"status":500,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":395,
				"resourceName":"storage_by_unifyapps_get_record_by_id",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_MPdFP-1",
			"id":"n_RtjNn",
			"index":2,
			"inputs":{
				"object_type":"service_hub_case",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"translationsOption":"DEFAULT",
				"id":"{{ n_LQTKC.outputs.body.caseId }}",
				"readThroughSessionVariables":false
			},
			"skip":false,
			"subTitle":"Case details",
			"title":"Fetch record by ID",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":592,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"_MPdFP-1",
			"id":"n_zYCxO",
			"index":3,
			"inputs":{
				"automationId":"66ab98083d73300e63962287",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"caseId":"{{ n_LQTKC.outputs.body.caseId }}",
					"limit":"{{ n_LQTKC.outputs.body.limit }}",
					"offset":"{{ n_LQTKC.outputs.body.offset }}",
					"sortOrder":"ASC"
				}
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				},
				"timeoutConfig":{
					"enabled":false
				}
			},
			"skip":false,
			"subTitle":"Conversation details",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.convDetails.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":528,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_zYCxO@_MPdFP-1@success",
			"id":"n_apmBP",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"reversedConvDetails":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Reversed Conv Details"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"convDetails":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Conv Details"
						}
					}
				},
				"code":"if(binding.hasVariable('convDetails')) {\n  return [reversedConvDetails: convDetails.reverse()]\n}\n\nreturn [reversedConvDetails: []]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"convDetails":{
						"source":"{{ n_zYCxO.outputs.messages }}",
						"ua:type":"mappedArray",
						"items":"{{ n_zYCxO.outputs.messages[0] }}"
					}
				}
			},
			"skip":true,
			"subTitle":"Reverse conversation details list",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.messages.source",
					"root.messages.ua:type",
					"root.messages.items.messageId",
					"root.messages.items.messageType"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":520,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_zYCxO@_MPdFP-1@success",
			"id":"n_cnKJ4",
			"index":5,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"type":"object"
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"messages",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"messages",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{}
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Messages",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":463,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_zYCxO@_MPdFP-1@success",
			"id":"n_HNnuw",
			"index":6,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ n_zYCxO.outputs.messages }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For each loop",
			"type":"LOOP"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.convDetails.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":528,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_HNnuw@n_zYCxO@_MPdFP-1@success@l",
			"id":"_zpJTM",
			"index":7,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"modifiedMessage":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Modified Message",
							"required":[]
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"message":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Message"
						}
					}
				},
				"code":"if (!binding.hasVariable('message') || message == null) {\n  return [:]\n}\n\n/** ---------- helpers ---------- **/\n\n// From blocks -> collect message.message[*].data.citations\ndef collectBlockCitations = { List blocks ->\n  def cites = []\n  blocks?.each { b ->\n    if ((b?.blockType ?: '') == 'Citation') {\n      def c = b?.data?.citations\n      if (c instanceof List) cites.addAll(c)\n    }\n  }\n  cites\n}\n\n// Build snippets from chunkDetails -> [{ text, chunkNumber }]\ndef buildSnippets = { List chunkDetails ->\n  (chunkDetails instanceof List)\n    ? chunkDetails.collect { cd ->\n        def snip = [:]\n        if (cd?.chunkContent != null) snip.text = cd.chunkContent\n        if (cd?.chunkNumber  != null) snip.chunkNumber = cd.chunkNumber\n        snip\n      }.findAll { !it.isEmpty() }\n    : []\n}\n\n// Raw citation -> structuredResults item: { document:{...}, referenceRanges:[{snippets:[...]}] }\ndef mapCitationToStructuredResult = { Map c ->\n  if (!(c instanceof Map)) return null\n  def meta = [:]\n  if (c.fileType) meta.mimeType = c.fileType\n\n  def doc = [:]\n  if (c.uniqueEntityId)      doc.id = c.uniqueEntityId\n  else if (c.name)           doc.id = c.name\n  else if (c.referenceUrl)   doc.id = c.referenceUrl\n\n  if (c.title)          doc.title = c.title\n  else if (c.name)      doc.title = c.name\n  if (c.referenceUrl)  doc.url   = c.referenceUrl\n  if (!meta.isEmpty()) doc.metadata = meta\n\n  def snippets = buildSnippets(c.chunkDetails)\n  def sr = [ document: doc ]\n  if (snippets) sr.referenceRanges = [[ snippets: snippets ]]\n  sr\n}\n\n// Raw citation -> top-level citations item: { sourceDocument:{...}, referenceRanges:[{snippets:[...]}] }\ndef mapCitationToSourceDocument = { Map c ->\n  if (!(c instanceof Map)) return null\n  def meta = [:]\n  if (c.fileType) meta.mimeType = c.fileType\n\n  def src = [:]\n  if (c.uniqueEntityId)      src.id = c.uniqueEntityId\n  else if (c.name)           src.id = c.name\n  else if (c.referenceUrl)   src.id = c.referenceUrl\n\n  if (c.referenceUrl)  src.url   = c.referenceUrl\n  if (c.title)         src.title = c.title\n  else if (c.name)          src.title = c.name\n  if (!meta.isEmpty()) src.metadata = meta\n\n  def snippets = buildSnippets(c.chunkDetails)\n  def entry = [ sourceDocument: src ]\n  if (snippets) entry.referenceRanges = [[ snippets: snippets ]]\n  entry\n}\n\ndef addIfPresent = { Map dst, String key, def val ->\n  if (val != null) dst[key] = val\n}\n\n/** ---------- transform the single message object ---------- **/\n\n// Base fragment: text (from first block). No attachments here anymore.\ndef baseFrag = [:]\ndef textVal = (message?.message instanceof List && message.message)\n    ? message.message[0]?.data?.text\n    : null\nif (textVal) baseFrag.text = textVal\n\n// Build attachment fragments: one fragment per attachment with { file: { ... } }\ndef attachmentFrags = []\nif (message.attachments instanceof List && !message.attachments.isEmpty()) {\n  message.attachments.each { att ->\n    def meta = [:]\n    if (att?.mimeType) meta.mimeType = att.mimeType\n\n    def fileObj = [:]\n    if (att?.id)   fileObj.id   = att.id\n    if (att?.url)  fileObj.url  = att.url\n    if (att?.name) fileObj.name = att.name\n    if (!meta.isEmpty()) fileObj.metadata = meta\n\n    if (!fileObj.isEmpty()) {\n      attachmentFrags << [ file: fileObj ]\n    }\n  }\n}\n\n// Collect citations only from block-level as per contract\ndef blockCitations = collectBlockCitations(message.message as List)\n\ndef modifiedMessage = [:]\naddIfPresent(modifiedMessage, 'messageId',   message.messageId)\naddIfPresent(modifiedMessage, 'messageType', message.messageType)\n\n// Routing by message.additional.internalMessageType\nif (message?.additional instanceof Map\n    && message.additional.containsKey('internalMessageType')\n    && message.additional.internalMessageType == 'THOUGHT') {\n  // Put citations into baseFrag.structuredResults\n  if (blockCitations) {\n    def structuredResults = blockCitations\n      .collect { mapCitationToStructuredResult(it as Map) }\n      .findAll { it != null && it.document instanceof Map && !it.document.isEmpty() }\n    if (structuredResults) {\n      baseFrag.structuredResults = structuredResults\n    }\n  }\n} else if (!(message?.additional instanceof Map)\n           || !message.additional.containsKey('internalMessageType')\n           || message.additional.internalMessageType == null) {\n  // No internalMessageType -> top-level citations\n  if (blockCitations) {\n    def mapped = blockCitations\n      .collect { mapCitationToSourceDocument(it as Map) }\n      .findAll { it?.sourceDocument && !it.sourceDocument.isEmpty() }\n    if (mapped) modifiedMessage.citations = mapped\n  }\n} else {\n  // internalMessageType present and not \"THOUGHT\" -> treat like non-THOUGHT (top-level)\n  if (blockCitations) {\n    def mapped = blockCitations\n      .collect { mapCitationToSourceDocument(it as Map) }\n      .findAll { it?.sourceDocument && !it.sourceDocument.isEmpty() }\n    if (mapped) modifiedMessage.citations = mapped\n  }\n}\n\n// Assemble fragments: base (if any) + one per attachment\ndef fragments = []\nif (!baseFrag.isEmpty()) fragments << baseFrag\nif (attachmentFrags) fragments.addAll(attachmentFrags)\nif (fragments) modifiedMessage.fragments = fragments\n\n// Pass-through\naddIfPresent(modifiedMessage, 'caseId',             message.caseId)\naddIfPresent(modifiedMessage, 'additional',         (message.additional instanceof Map) ? new LinkedHashMap(message.additional) : message.additional)\naddIfPresent(modifiedMessage, 'hasAttachments',     message.hasAttachments)\naddIfPresent(modifiedMessage, 'fromCustomerUserId', message.fromCustomerUserId)\naddIfPresent(modifiedMessage, 'createdTime',        message.createdTime)\naddIfPresent(modifiedMessage, 'searchQueryId',      message.searchQueryId)\n\nreturn [ modifiedMessage: modifiedMessage ]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"message":"{{ n_HNnuw.outputs.item }}"
				}
			},
			"skip":false,
			"subTitle":"Modify message according to API",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemToAdd.fragments.items",
					"root.itemToAdd.citations.items"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":536,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_HNnuw@n_zYCxO@_MPdFP-1@success@l",
			"id":"n_0oA5N",
			"index":8,
			"inputs":{
				"itemToAdd":"{{ _zpJTM.outputs.result.modifiedMessage }}",
				"insertLocation":"END",
				"listName":"{{ n_cnKJ4.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Add modified message to list",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":858,
				"resourceName":"storage_by_unifyapps_count_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_zYCxO@_MPdFP-1@success",
			"id":"n_TJKRZ",
			"index":9,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"properties_caseId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ n_LQTKC.outputs.body.caseId }}"
							}
						},
						{
							"property":"properties_additional_internalMessageType",
							"filter":{
								"operator":"MISSING"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"service_hub_message"
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Count records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":0,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_zYCxO@_MPdFP-1@success",
			"id":"n_rYuMU",
			"index":10,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"set_cookies":[],
				"body":{
					"chatResult":{
						"chat":{
							"id":"{{ n_LQTKC.outputs.body.caseId }}",
							"createTime":"{{ n_RtjNn.outputs.createdTime }}",
							"updateTime":"{{ n_RtjNn.outputs.modifiedTime }}",
							"messageCount":"{{ n_TJKRZ.outputs.count }}",
							"messages":{
								"ua:type":"mappedArray",
								"source":"{{ n_cnKJ4.outputs.items }}",
								"items":"{{ n_cnKJ4.outputs.items[0] }}"
							}
						}
					}
				},
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":0,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_zYCxO@_MPdFP-1@error",
			"id":"n_hvdpI",
			"index":11,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"500_undefined",
				"status":500
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"stop"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_MPdFP-1",
			"id":"n_JMAAm",
			"index":12,
			"skip":false,
			"subTitle":"Stop",
			"title":"Stop",
			"type":"STOP"
		}
	],
	"ownerUserId":1,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":34
}