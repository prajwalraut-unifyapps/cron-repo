{
	"appsUsed":[
		
	],
	"createdTime":1752842408959,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1757441881304,
		"deployedBy":0,
		"deployedDefinitionId":"68c06f596bc3be145d7942f5",
		"status":"DEPLOYED",
		"version":28,
		"workflowVersion":48
	},
	"edges":[
		{
			"fromNodeId":"n_Z51Bw",
			"priority":0,
			"skip":false,
			"toNodeId":"n_elrEA",
			"type":"next"
		},
		{
			"fromNodeId":"n_elrEA",
			"priority":0,
			"skip":false,
			"toNodeId":"n_AQdGJ",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"68779ee170d33c2f9505623a",
	"lastModifiedBy":-1,
	"lcName":"text to workflow v2 | update dynamic schema",
	"modifiedTime":1758530331081,
	"name":"Text to Workflow v2 | Update Dynamic Schema",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":445,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_XLua9-1",
			"id":"n_Z51Bw",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"result":{
							"type":"string",
							"title":"result"
						}
					},
					"additionalProperties":false,
					"required":[
						"result"
					],
					"dynamic":true
				},
				"setup":{
					"type":"object",
					"properties":{
						"schema":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Schema"
						},
						"inputSchema":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Input Schema"
						},
						"workflowDefinition":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Workflow Definition"
						},
						"nodeID":{
							"type":"string",
							"title":"Node ID"
						}
					},
					"additionalProperties":false,
					"required":[
						"inputSchema",
						"workflowDefinition",
						"nodeID"
					]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":449,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_XLua9-1",
			"id":"n_elrEA",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"updatedWorkflowJson":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Updated Workflow Json"
						}
					},
					"additionalProperties":false,
					"required":[
						"updatedWorkflowJson"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"schema":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Schema"
						},
						"nodeID":{
							"type":"string",
							"title":"Node ID"
						},
						"workflowDefinition":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Workflow Definition"
						},
						"inputSchema":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Input Schema"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"/* Binding vars expected:\n *   workflowDefinition  (Map)\n *   nodeID | nodeId     (String)\n *   schema              (Map, optional)\n *   inputSchema         (Map, optional)\n */\n\ndef wf        = workflowDefinition ?: [:]\ndef targetId  = (this.binding.hasVariable('nodeID') ? nodeID : null) ?:\n                (this.binding.hasVariable('nodeId') ? nodeId : null)\n\nif (!wf?.nodes || !targetId) {\n    return [\n        updatedWorkflowDefinition: wf,\n        warning: \"Missing workflowDefinition.nodes or nodeID; nothing updated.\"\n    ]\n}\n\n/* locate node */\ndef node = wf.nodes.find { it?.id == targetId }\nif (!node) {\n    return [\n        updatedWorkflowDefinition: wf,\n        warning: \"No node found with id=${targetId}; nothing updated.\"\n    ]\n}\n\n/* deep merge helper: merge src into dest in place */\ndef deepMerge\ndeepMerge = { Map dest, Map src ->\n    src.each { k, v ->\n        if (dest[k] instanceof Map && v instanceof Map) {\n            deepMerge(dest[k] as Map, v as Map)\n        } else {\n            // replace scalar / list / non-map or create new\n            dest[k] = v\n        }\n    }\n    return dest\n}\n\n/* start merged with existing node.inputs (preserve) */\ndef merged = [:]\nif (node.inputs instanceof Map && !node.inputs.isEmpty()) {\n    merged.putAll(node.inputs)\n}\n\n/* overlay schema (if provided) */\nif (schema instanceof Map && !schema.isEmpty()) {\n    deepMerge(merged, schema)\n}\n\n/* overlay inputSchema (if provided) -- wins on conflicts */\nif (inputSchema instanceof Map && !inputSchema.isEmpty()) {\n    deepMerge(merged, inputSchema)\n}\n\n/* assign merged inputs back to node */\nnode.inputs = merged\n\n/* done */\nreturn [\n    updatedWorkflowDefinition: wf\n]",
				"parameters":{
					"schema":"{{ n_Z51Bw.outputs.schema }}",
					"nodeID":"{{ n_Z51Bw.outputs.nodeID }}",
					"workflowDefinition":"{{ n_Z51Bw.outputs.workflowDefinition }}",
					"inputSchema":"{{ n_Z51Bw.outputs.inputSchema }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":455,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_XLua9-1",
			"id":"n_AQdGJ",
			"index":3,
			"inputs":{
				"result":{
					"result":"{{ n_elrEA.outputs.result }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":166068,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":50
}