{
	"appsUsed":[
		
	],
	"createdTime":1760695518438,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760695518574,
		"deployedBy":569,
		"deployedDefinitionId":"68f214de9155c365736580e2",
		"status":"DEPLOYED",
		"version":1,
		"workflowVersion":38
	},
	"edges":[
		{
			"fromNodeId":"n_vlZAI",
			"priority":0,
			"skip":false,
			"toNodeId":"n_K4q3Q",
			"type":"next"
		},
		{
			"fromNodeId":"n_K4q3Q",
			"priority":0,
			"skip":false,
			"toNodeId":"n_XO1Ky",
			"type":"next"
		},
		{
			"fromNodeId":"n_XO1Ky",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"n_AJ2Rm",
			"type":"next"
		},
		{
			"fromNodeId":"n_XO1Ky",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sMmRX",
			"type":"if"
		},
		{
			"fromNodeId":"n_AJ2Rm",
			"priority":0,
			"skip":false,
			"toNodeId":"n_sMmRX",
			"type":"next"
		},
		{
			"fromNodeId":"n_sMmRX",
			"priority":0,
			"skip":false,
			"toNodeId":"_LxKRL",
			"type":"next"
		},
		{
			"fromNodeId":"_LxKRL",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@1",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_FblxH",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@2",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@2",
			"priority":0,
			"skip":false,
			"toNodeId":"_afoFu",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@3",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@3",
			"priority":0,
			"skip":false,
			"toNodeId":"_0Nrh5",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"4",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@4",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@4",
			"priority":0,
			"skip":false,
			"toNodeId":"_GPMzX",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"5",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@5",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@5",
			"priority":0,
			"skip":false,
			"toNodeId":"n_qqqFW",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"6",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@6",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@6",
			"priority":0,
			"skip":false,
			"toNodeId":"n_dSaEq",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"7",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@7",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@7",
			"priority":0,
			"skip":false,
			"toNodeId":"n_uZfgn",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"8",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@8",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@8",
			"priority":0,
			"skip":false,
			"toNodeId":"n_aySnX",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"9",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@9",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@9",
			"priority":0,
			"skip":false,
			"toNodeId":"n_196Fn",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"10",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@10",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@10",
			"priority":0,
			"skip":false,
			"toNodeId":"n_lcOIX",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"11",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@11",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@11",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tdDAi",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"12",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KAwph@12",
			"type":"branch"
		},
		{
			"fromNodeId":"n_KAwph@12",
			"priority":0,
			"skip":false,
			"toNodeId":"n_hpe3J",
			"type":"next"
		},
		{
			"fromNodeId":"n_FblxH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"_afoFu",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"_0Nrh5",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"_GPMzX",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_qqqFW",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_dSaEq",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_uZfgn",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_aySnX",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_196Fn",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_lcOIX",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_tdDAi",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_hpe3J",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_KAwph",
			"name":"default",
			"priority":0,
			"skip":false,
			"toNodeId":"n_CZwPZ",
			"type":"branch"
		}
	],
	"id":"689a5d82570eff00080eb1e8",
	"lastModifiedBy":39713,
	"lcName":"[virtu-buddy-allocation-fn] virtu-buddy-allocation-fn",
	"modifiedTime":1760698056960,
	"name":"[virtu-Buddy-Allocation-fn] virtu-Buddy-Allocation-fn",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{
						"request":{},
						"response":[
							{},
							{},
							{},
							{},
							{},
							{},
							{},
							{},
							{},
							{},
							{},
							{},
							{}
						]
					}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":8,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VVPM9-1",
			"id":"n_vlZAI",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"queryParams":{
						"type":"object",
						"properties":{
							"resourseRequestNumber":{
								"type":"string",
								"title":"Resourse Request Number"
							},
							"code":{
								"type":"string",
								"title":"Code"
							}
						},
						"additionalProperties":false,
						"required":[]
					},
					"headers":{
						"type":"object",
						"properties":{
							"authorization":{
								"type":"string",
								"title":"Authorization",
								"format":"skip"
							}
						},
						"additionalProperties":false,
						"required":[]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"200 - Success",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":401,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"401 - Unauthorized",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":403,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"403 - foridden",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":404,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"404 - not found",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":408,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"408 - request timeout",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":400,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"400 - bad request",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":429,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"429 - too many request",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":500,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"500 - internal server error",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":501,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"501 - not implemented",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":502,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"502 - bad gateway",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":503,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"503 - service unavailable",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":504,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"504 - Gateway Timeout",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":505,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"name":"505 - http version not supported",
						"body":{
							"type":"object"
						},
						"namespaces":[]
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":875,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VVPM9-1",
			"id":"n_K4q3Q",
			"index":2,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"payload":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Payload"
						}
					},
					"required":[
						"payload"
					]
				}
			},
			"inputs":{
				"payload":"{{ n_vlZAI.outputs.body }}"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"payload":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Payload"
						}
					},
					"required":[
						"payload"
					]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":767,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VVPM9-1",
			"id":"n_XO1Ky",
			"index":3,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_K4q3Q.outputs.payload }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":802,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_XO1Ky@_VVPM9-1@n",
			"id":"n_AJ2Rm",
			"index":4,
			"inputs":{
				"variables":[
					{
						"source":"{{ n_K4q3Q.outputs.payload }}",
						"value":"{}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":765,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_VVPM9-1",
			"id":"n_sMmRX",
			"index":5,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"statusCode",
						"error"
					],
					"properties":{
						"statusCode":{
							"type":"string",
							"title":"Status Code"
						},
						"error":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Error"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"TokenGenerateURL",
						"ClientId",
						"GrantType",
						"ClientSecret",
						"VirtusaRRSubKey",
						"VirtusaTokenSubKey",
						"DataverseUrl",
						"DataverseTable",
						"GetAllocatedBuddyUrl",
						"GetAllocatedBuddyToken",
						"EmployeeApiForHireDateUrl",
						"EmployeeApiSubKey",
						"AllocationDayCount",
						"ManagerType",
						"ManagerTerminationDayCount",
						"BuddyCountForAManager",
						"resourseRequestNumber",
						"accessToken",
						"payload",
						"requestResourceNumber",
						"DataverseTokenUrl",
						"DataverseClientId",
						"DataverseGrantType",
						"DataVerseClientSecret",
						"DataverseScope"
					],
					"properties":{
						"TokenGenerateURL":{
							"type":"string",
							"title":"Token Generate URL"
						},
						"ClientId":{
							"type":"string",
							"title":"Client Id"
						},
						"GrantType":{
							"type":"string",
							"title":"Grant Type"
						},
						"ClientSecret":{
							"type":"string",
							"title":"Client Secret"
						},
						"VirtusaRRSubKey":{
							"type":"string",
							"title":"Virtusa RR Sub Key"
						},
						"VirtusaTokenSubKey":{
							"type":"string",
							"title":"Virtusa Token Sub Key"
						},
						"DataverseUrl":{
							"type":"string",
							"title":"Dataverse Url"
						},
						"DataverseTable":{
							"type":"string",
							"title":"Dataverse Table"
						},
						"GetAllocatedBuddyUrl":{
							"type":"string",
							"title":"Get Allocated Buddy Url"
						},
						"GetAllocatedBuddyToken":{
							"type":"string",
							"title":"Get Allocated Buddy Token"
						},
						"EmployeeApiForHireDateUrl":{
							"type":"string",
							"title":"Employee Api For Hire Date Url"
						},
						"EmployeeApiSubKey":{
							"type":"string",
							"title":"Employee Api Sub Key"
						},
						"AllocationDayCount":{
							"type":"string",
							"title":"Allocation Day Count"
						},
						"ManagerType":{
							"type":"string",
							"title":"Manager Type"
						},
						"ManagerTerminationDayCount":{
							"type":"string",
							"title":"Manager Termination Day Count"
						},
						"BuddyCountForAManager":{
							"type":"string",
							"title":"Buddy Count For A Manager"
						},
						"resourseRequestNumber":{
							"type":"string",
							"title":"Resourse Request Number"
						},
						"accessToken":{
							"type":"string",
							"title":"Access Token"
						},
						"payload":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Payload"
						},
						"requestResourceNumber":{
							"type":"string",
							"title":"Request Resource Number"
						},
						"DataverseTokenUrl":{
							"type":"string",
							"title":"Dataverse Token Url"
						},
						"DataverseClientId":{
							"type":"string",
							"title":"Dataverse Client Id"
						},
						"DataverseGrantType":{
							"type":"string",
							"title":"Dataverse Grant Type"
						},
						"DataVerseClientSecret":{
							"type":"string",
							"title":"Dataverse Client Secret"
						},
						"DataverseScope":{
							"type":"string",
							"title":"Dataverse Scope"
						}
					}
				},
				"configurationMode":"MANUAL",
				"code":"import urllib3\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\nimport requests\nimport logging\nimport os\nimport json\nfrom datetime import datetime, timedelta\n\ndef getAllBuddeis(*args, **kwargs):\n\n    if len(args) == 3:\n\n        payload, repeatEmployee, accessToken = args\n    # try:\n        #Assign Values  \n        getAllocatedBuddyUrl = GetAllocatedBuddyUrl\n        getAllocatedBuddyToken = GetAllocatedBuddyToken\n        employeeApiForHireDateUrl = EmployeeApiForHireDateUrl\n        employeeApiSubKey = EmployeeApiSubKey\n        allocationDayCount = AllocationDayCount\n        managerType = ManagerType\n        managerTerminationDayCount = ManagerTerminationDayCount\n        buddyCountForAManager = BuddyCountForAManager\n        rotationLoop=int(0)\n        eligibleBuddyNumbers = []\n        errorsOccured = []\n        responseReturn = []\n        hiringCount = 0\n        terminationDays = datetime.today() + timedelta(days=int(managerTerminationDayCount))\n        \n        payloadJson = payload.json() \n        #Value attribute not found\n        if \"value\" in payloadJson :\n          payLoadCount = len(payloadJson[\"value\"])\n          #check value attribute \n          if payLoadCount > 0 :\n            for employee in payloadJson[\"value\"]:\n              #Check empnumber in payload\n              if \"baa_buddynumber\" in payloadJson [\"value\"] [rotationLoop] :\n                empNumber = payloadJson [\"value\"] [rotationLoop] [\"baa_buddynumber\"]\n                #Check here that manager is on notice period\n                if empNumber not in repeatEmployee:\n                  empName = payloadJson [\"value\"] [rotationLoop] [\"baa_employeename\"]\n                  empEmail = payloadJson [\"value\"] [rotationLoop] [\"baa_email\"]\n                  requestBodySend = {\"PersonNumber\": str(empNumber),\n                                     \"ManagerType\": managerType}\n                  #requestBodySend = {\"Person number\": str(5002615)}\n                  requestBodySendJson = json.dumps(requestBodySend)\n                  \n                  # Check all allocated employees for this buddy number From Dhanushika Akka's API\n                  responseBuddy = getQualifiedBuddyCount(getAllocatedBuddyUrl,accessToken,requestBodySendJson,getAllocatedBuddyToken)\n                  # logging.info(responseBuddy.status_code)\n                  if responseBuddy.status_code ==200: \n                    responseBuddyJson = responseBuddy.json() \n                    if \"title\" in (responseBuddyJson) : \n                      if responseBuddyJson[\"o:errorDetails\"][0][\"o:errorCode\"] == \"29140\":\n                        \n                        eligibleBuddyNumbers.clear()\n                        eligibleBuddyNumbers.append(\"Please update buddy person number in the buddy pool\")\n                        responseReturn.append(False)\n                        responseReturn.append(eligibleBuddyNumbers)\n                        return responseReturn\n                    else:  \n                      \n                        \n                        logging.info(\"oni onmi oni\")\n                        logging.info(responseBuddyJson)\n                        logging.info(\"oni onmi oni\")\n                        terminationDate = responseBuddyJson[\"TerminationDate\"]\n                        terminateDateFormat=\"\"\n                        if terminationDate is not None :\n                          termitionHireFormat=datetime.fromisoformat(terminationDate)\n                          terminateDateFormat = termitionHireFormat.replace(tzinfo=None)\n                        \n                        \n                        if terminationDate == None or terminateDateFormat > terminationDays  :\n                            # logging.info(responseBuddy.text)\n                            buddyCount = len(responseBuddyJson[\"Reportee\"])\n                            #Check Assigned employee count is > 5 using dhanushika akka's API\n                            if buddyCount >= 5 :\n                              for buddyData in responseBuddyJson[\"Reportee\"] :\n                                  \n                              \n                                  if hiringCount < 5:\n                                    #Check Hiring date is greater\n                                      newBuddynum = str(buddyData[\"PersonNumber\"])\n                                      url = employeeApiForHireDateUrl+newBuddynum+\"/seniorityDatesDetails\"\n                                              \n                                      workerResponse = getHireDate(url, accessToken, employeeApiSubKey) \n                                      days = datetime.today() - timedelta(days=int(allocationDayCount))\n                                      #logging.info(workerResponse.text)\n                                      \n                                      #Check Hiring date response status\n                                      if workerResponse.status_code == 200 :\n                                        try:\n                                            logging.info(\"Menna load eka\")\n                                            logging.info(workerResponse.json())\n                                            logging.info(\"Menna load eka\")\n                                            assignmentHire = (workerResponse.json())[0][\"seniorityDatesDetails\"][0][\"enterpriceHireDate\"]\n                                            \n                                            assignmentHireFormat=datetime.fromisoformat(assignmentHire)\n                                            hireDate = assignmentHireFormat.replace(tzinfo=None)\n                                            logging.info(\"Hoyana eka\")\n                                            logging.info(hireDate)\n                                            logging.info(\"Hoyana eka\")\n                                            if hireDate > days : #>\n                                              hiringCount=hiringCount+1\n                                          \n                                        except IndexError:  \n                                          eligibleBuddyNumbers.clear()\n                                          eligibleBuddyNumbers.append(\"Please Check Employee || Seniorty Details Missing\")\n                                          responseReturn.append(False)\n                                          responseReturn.append(eligibleBuddyNumbers)\n                                          return responseReturn\n                                      elif workerResponse.status_code == 500 :\n                                        \n                                        eligibleBuddyNumbers.clear()\n                                        eligibleBuddyNumbers.append(\"Internal Server Error\")\n                                        responseReturn.append(False)\n                                        responseReturn.append(eligibleBuddyNumbers)\n                                        return responseReturn\n                                      elif workerResponse.status_code == 401 :\n                                            logging.info(\"401 in\")\n                                            eligibleBuddyNumbers.clear()\n                                            eligibleBuddyNumbers.append(\"Unauthorized. Access token is missing or invalid.\")\n                                            responseReturn.append(False)\n                                            responseReturn.append(eligibleBuddyNumbers)\n                                            return responseReturn\n                                      elif  workerResponse.status_code == 403 : \n                                        logging.info(\"403 in\")\n                                        eligibleBuddyNumbers.clear()\n                                        eligibleBuddyNumbers.append(\"access to the requested resource is forbidden.\")\n                                        responseReturn.append(False)\n                                        responseReturn.append(eligibleBuddyNumbers)\n                                        return responseReturn\n                                      elif workerResponse.status_code == 429 :   \n                                            logging.info(\"429 in\")\n                                            eligibleBuddyNumbers.clear()\n                                            eligibleBuddyNumbers.append(\"Too Many Requests\")\n                                            responseReturn.append(False)\n                                            responseReturn.append(eligibleBuddyNumbers)\n                                            return responseReturn\n              \n                                  else :\n                                    \n                                    logging.info(\"count exceed\")\n                                    #hiringCount=0\n                                    break\n                                \n                                    \n                              if hiringCount<5:\n                                logging.info(\"hiring count\" + str(hiringCount))\n                                personArray = {\n                                \"personNumber\" : empNumber,\n                                \"displayName\"  : empName,\n                                \"emailAddress\" : empEmail\n                                }\n                                eligibleBuddyNumbers.append(personArray)\n                              else:\n                                repeatEmployee.append(empNumber)  \n                              logging.info(hiringCount) \n                              hiringCount=0      \n                              logging.info(\"check loop\")\n                            # If buddy has no more than 5 allocated employees\n                            elif buddyCount < 5 :\n                              personArray = {\n                                \"personNumber\" : empNumber,\n                                \"displayName\"  : empName,\n                                \"emailAddress\" : empEmail  \n                                }\n                              eligibleBuddyNumbers.append(personArray)\n                          \n                  elif responseBuddy.status_code == 500 :\n                    logging.info(\"500 in\")\n                    eligibleBuddyNumbers.clear()\n                    eligibleBuddyNumbers.append(\"Internal Server Error\")\n                    responseReturn.append(False)\n                    responseReturn.append(eligibleBuddyNumbers)\n                    return responseReturn\n                    \n                  elif responseBuddy.status_code == 401 :\n                    logging.info(\"401 in\")\n                    eligibleBuddyNumbers.clear()\n                    eligibleBuddyNumbers.append(\"Unauthorized. Access token is missing or invalid.\")\n                    responseReturn.append(False)\n                    responseReturn.append(eligibleBuddyNumbers)\n                    return responseReturn\n                  elif  responseBuddy.status_code == 403 : \n                    logging.info(\"401 in\")\n                    eligibleBuddyNumbers.clear()\n                    eligibleBuddyNumbers.append(\"access to the requested resource is forbidden.\")\n                    responseReturn.append(False)\n                    responseReturn.append(eligibleBuddyNumbers)\n                    return responseReturn\n                  rotationLoop=rotationLoop+1\n                else:  \n                  rotationLoop=rotationLoop+1\n        else:\n                  \n            eligibleBuddyNumbers.clear()\n            eligibleBuddyNumbers.append(\"Attribute error in Dataverse || value\")\n            responseReturn.append(False)\n            responseReturn.append(eligibleBuddyNumbers)\n            return responseReturn\n          \n      \n        responseReturn.append(True)    \n        responseReturn.append(eligibleBuddyNumbers) \n        responseReturn.append(repeatEmployee)                                                       \n        logging.info(eligibleBuddyNumbers)\n        return responseReturn    \n      #except requests.exceptions.ConnectionError:\n      #   eligibleBuddyNumbers.clear()\n      #   eligibleBuddyNumbers.append(\"Connection Error Occured\")\n      #   responseReturn.append(False)\n      #   responseReturn.append(eligibleBuddyNumbers)\n      #   return responseReturn\n\n  \n      # except ValueError:\n\n      #   eligibleBuddyNumbers.clear()\n      #   eligibleBuddyNumbers.append(\"Expected Values Not Received\")\n      #   responseReturn.append(False)\n      #   responseReturn.append(eligibleBuddyNumbers)\n      #   return responseReturn\n\n\n      \n\n      # except:\n      #   eligibleBuddyNumbers.clear()\n      #   eligibleBuddyNumbers.append(\"Internal Error Occured From Dataverse\")\n      #   responseReturn.append(False)\n      #   responseReturn.append(eligibleBuddyNumbers)\n      #   return responseReturn\n        \n\n\n        # We only consider mentees, not RR\n        # We not consider open external vacancies\n        #If manager already raised resignation - ignore (On notice Period)\n       \n\n    elif len(args) == 6:\n\n        tier, serviceLine, sbu, atc, account, accessToken = args\n        \n        logging.info(tier)\n        logging.info(sbu)\n        logging.info(serviceLine)\n        logging.info(atc)\n        logging.info(account)\n        logging.info(type(sbu))\n        repeatEmployee=[]\n        \n\n        url = DataverseTokenUrl\n        clientId = DataverseClientId\n        grantType = DataverseGrantType\n        clientSecret = DataVerseClientSecret\n        scope = DataverseScope\n        virtusaRRSubKey = VirtusaRRSubKey\n        virtusaTokenSubKey = VirtusaTokenSubKey\n      \n        \n\n        data = \"client_id=\" + clientId  +\"&\"+ \"grant_type=\"+ grantType +\"&\"+ \"client_secret=\"+clientSecret + \"&\" + \"scope=\"+scope\n        \n        response=getAcessTokenForRR(url, data, virtusaTokenSubKey)\n        logging.info(f\"response token : {response.text}\")\n        acc_To=response.json()\n        acc=(acc_To)[\"access_token\"]\n        tokenType=(acc_To)[\"token_type\"]\n        dataverseUrl = DataverseUrl\n        dataverseTable = DataverseTable\n        \n\n        query = \"\"\n\n\n        if tier == \"Tier 5\":\n            query = \"$filter=((baa_tier eq 'Tier 0') or (baa_tier eq 'Tier 1') or (baa_tier eq 'Tier 2') or (baa_tier eq 'Tier 3') or (baa_tier eq 'Tier 4')) and  (baa_sbu eq '\"+(str(sbu) if sbu is not None else '')+\"') and (baa_atc eq '\"+atc+\"') and (baa_account eq '\"+account+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n        if tier == \"Tier 4\" :\n            query = \"$filter=((baa_tier eq 'Tier 0') or (baa_tier eq 'Tier 1') or (baa_tier eq 'Tier 2') or (baa_tier eq 'Tier 3')) and  (baa_sbu eq '\"+(str(sbu) if sbu is not None else '')+\"') and (baa_atc eq '\"+atc+\"') and (baa_account eq '\"+account+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n\n        elif tier == \"Tier 3\" :\n             query = \"$filter=((baa_tier eq 'Tier 0') or (baa_tier eq 'Tier 1') or (baa_tier eq 'Tier 2')) and  (baa_sbu eq '\"+(str(sbu) if sbu is not None else '')+\"') and (baa_atc eq '\"+atc+\"') and (baa_account eq '\"+account+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"     \n       \n        elif tier == \"Tier 2\" :\n             query = \"$filter=((baa_tier eq 'Tier 0') or (baa_tier eq 'Tier 1') ) and  (baa_sbu eq '\"+(str(sbu) if sbu is not None else '')+\"') and (baa_atc eq '\"+atc+\"') and (baa_account eq '\"+account+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n        elif tier == \"Tier 1\" :\n             query = \"$filter=((baa_tier eq 'Tier 0') ) and  (baa_sbu eq '\"+(str(sbu) if sbu is not None else '')+\"') and (baa_atc eq '\"+atc+\"') and (baa_account eq '\"+account+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"     \n        elif tier == \"Tier 0\" :\n            query = \"$filter=((baa_tier eq 'Tier 0') ) and  (baa_sbu eq '\"+(str(sbu) if sbu is not None else '')+\"') and (baa_atc eq '\"+atc+\"') and (baa_account eq '\"+account+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n\n        # logging.info(response.text)\n\n        if response.status_code==200:\n\n            # query = \"$filter=(baa_tier eq '\"+(str(tier) if tier is not None else 'Tier Not Assigned')+\"') and (baa_sbu eq '\"+(str(sbu) if sbu is not None else 'Project Not Assigned')+\"') and (baa_atc eq '\"+(str(atc) if atc is not None else 'ATC Not Assigned')+\"') and (baa_account eq '\"+(str(account) if account is not None else 'Project Account Not Assigned')+\"') and (baa_serviceline eq '\"+(str(serviceLine) if serviceLine is not None else 'ServiceLine Not Assigned')+\"')\"\n            #query = \"$filter=((baa_tier eq 'Tier 3') ) and  (baa_sbu eq '\"+(str(sbu) if sbu is not None else '')+\"') and (baa_atc eq '\"+atc+\"') and (baa_account eq '\"+account+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            responseForBudies = getQualifiedBuddies(dataverseUrl, acc, tokenType, dataverseTable,query)\n            \n            logging.info(f\"error find : {responseForBudies.text}\")\n            responseForBudiesJson = responseForBudies.json()\n            logging.info(query)\n            logging.info(responseForBudies.text)    \n            if responseForBudies.status_code==200:\n                logging.info(responseForBudies.text)\n\n                if \"value\" in responseForBudiesJson :\n                    responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n                    if responseForBudiesCount > 0 :\n\n                        responseGetAllocatedBuddyResponse = getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n                        responseBool=responseGetAllocatedBuddyResponse[0]\n                        responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n                        # repeatEmployee=responseGetAllocatedBuddyResponse[2]\n                        logging.info(responseGetAllocatedBuddyResponse[0])\n                        logging.info(responseGetAllocatedBuddyResponse[1])\n                        # logging.info(responseGetAllocatedBuddyResponse[2])\n\n                        if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n\n                            resBody = {\n                                \"success\" : \"false\",\n                                \"statusCode\" : \"400\",\n                                \"personNumber\": [],\n                                \"error\":[{ \n                                    \n                                    \"errorMessage\":\"Eligible buddies not found\" \n\n                                        }]\n                                    \n                                        }\n                            resBodySend = json.dumps(resBody, indent=4)\n                            return resBodySend \n\n                        elif len(responseGetAllocatedBuddy)>0 and responseBool==True: \n                         \n\n                                                                                                                              \n\n                            resBody = {\n                                \"success\" : \"true\",\n                                \"statusCode\" : \"200\",\n                \n                                \"personNumber\": responseGetAllocatedBuddy,\n\n                                \"error\":[{ \n                                    \n\n                                }]\n                        \n                                }\n                            resBodySend = json.dumps(resBody, indent=4)\n                            return resBodySend\n\n                        elif responseBool==False:    \n                            resBody = {\n                                    \"success\" : \"false\",\n                                    \"statusCode\" : \"400\",\n                                    \"personNumber\": [],\n                                    \"error\":[{ \n                                    \n                                        \"errorMessage\":responseGetAllocatedBuddy \n\n                                            }]\n                                    \n                                            }\n                            resBodySend = json.dumps(resBody, indent=4)\n                            return resBodySend\n\n\n\n\n                    else:    \n                        logging.info(\"Hithana place\")\n                        resBody = {\n                        \"success\" : \"false\",\n                        \"statusCode\" : \"400\",\n                        \"personNumber\": [],\n                        \"error\":[{ \n                            \n                            \"errorMessage\":\"Eligible buddies not found\" \n\n                                }]\n                            \n                                }\n                        resBodySend = json.dumps(resBody, indent=4)\n                        return resBodySend \n\n\n                ##\n                else :  \n                    resBody = {\n                        \"success\" : \"false\",\n                        \"statusCode\" : \"400\",\n                        \"personNumber\": [],\n\n                        \"error\":[{ \n                            \n                            \"errorMessage\":\"Attribute error in Dataverse || value\" \n\n                                }]\n                            \n                                }\n                    resBodySend = json.dumps(resBody, indent=4)\n                    return resBodySend  \n\n\n\n            \n            #4 condition condition\n            # query = \"$filter=(baa_sbu eq '\"+(str(sbu) if sbu is not None else 'Project Not Assigned')+\"') and (baa_atc eq '\"+atc+\"') and (baa_account eq '\"+(str(account) if account is not None else 'Project Account Not Assigned')+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            # responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            # responseForBudiesJson = responseForBudies.json()\n            \n            # logging.info(query)\n            # logging.info(responseForBudies.text)    \n            # if responseForBudies.status_code==200:\n            #   logging.info(responseForBudies.text)\n\n            #   if \"value\" in responseForBudiesJson :\n                \n            #     responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #     if responseForBudiesCount > 0 :\n\n            #         responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #         responseBool=responseGetAllocatedBuddyResponse[0]\n            #         responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #         repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #         logging.info(responseGetAllocatedBuddyResponse[0])\n            #         logging.info(responseGetAllocatedBuddyResponse[1])\n            #         logging.info(responseGetAllocatedBuddyResponse[2])\n                    \n            #         #Check for 3 conditions when hiring date condition failed\n            #         if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n\n                        \n            #             query = \"$filter=(baa_account eq '\"+(str(account) if account is not None else 'Project Account Not Assigned')+\"') and (baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #             responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #             responseForBudiesJson = responseForBudies.json()\n            #             logging.info(responseForBudies.text)\n\n            #             if responseForBudies.status_code==200:\n            #                 if \"value\" in responseForBudiesJson :\n            #                     responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                     if responseForBudiesCount > 0 :\n            #                         responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                         logging.info(responseGetAllocatedBuddyResponse)\n            #                         responseBool=responseGetAllocatedBuddyResponse[0]\n            #                         responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                         repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                         logging.info(responseGetAllocatedBuddyResponse[0])\n            #                         logging.info(responseGetAllocatedBuddyResponse[1])\n            #                         logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                         if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n            #                             query = \"$filter=(baa_sbu eq '\"+(str(sbu) if sbu is not None else 'Project Not Assigned')+\"') and (baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                             responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                             responseForBudiesJson = responseForBudies.json()\n            #                             logging.info(responseForBudies.text)\n\n            #                             if responseForBudies.status_code==200:\n            #                                 if \"value\" in responseForBudiesJson :\n            #                                     responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                     if responseForBudiesCount > 0 :\n            #                                         responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                         logging.info(responseGetAllocatedBuddyResponse)\n            #                                         responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                         responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                         repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                         logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                         logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                         logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                         if len(responseGetAllocatedBuddy) == 0 and responseBool==True:\n\n            #                                             query = \"$filter=(baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                                             responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                                             responseForBudiesJson = responseForBudies.json()\n            #                                             logging.info(responseForBudies.text)\n\n            #                                             if responseForBudies.status_code==200:\n            #                                                 if \"value\" in responseForBudiesJson :\n            #                                                     responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                                     if responseForBudiesCount > 0 :\n            #                                                         responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                                         logging.info(responseGetAllocatedBuddyResponse)\n            #                                                         responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                                         responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                                         repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                                         if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n    \n\n            #                                                             resBody = {\n            #                                                             \"success\" : \"false\",\n            #                                                             \"statusCode\" : \"400\",\n            #                                                             \"personNumber\": [],\n            #                                                             \"error\":[{ \n                                                                            \n            #                                                                 \"errorMessage\":\"Eligible buddies not found\" \n\n            #                                                                     }]\n                                                                            \n            #                                                                     }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend  \n\n\n\n            #                                                         elif len(responseGetAllocatedBuddy)>0 and responseBool==True:    \n\n            #                                                              #Success Response For 2 Conditions                                                      \n\n            #                                                             resBody = {\n            #                                                                 \"success\" : \"true\",\n            #                                                                 \"statusCode\" : \"200\",\n                                                                \n            #                                                                 \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                                 \"error\":[{ \n                                                                                    \n\n            #                                                                 }]\n                                                                        \n            #                                                                 }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend\n\n            #                                                         elif responseBool==False:     \n            #                                                             resBody = {\n            #                                                                 \"success\" : \"false\",\n            #                                                                 \"statusCode\" : \"400\",\n            #                                                                 \"personNumber\": [],\n            #                                                                 \"error\":[{ \n                                                                                \n            #                                                                     \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                                         }]\n                                                                                \n            #                                                                         }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend\n\n            #                                             #\n            #                                             elif responseForBudies.status_code==400:  \n            #                                                 resBody = {\n            #                                                     \"success\" : \"false\",\n            #                                                     \"statusCode\" : \"400\",\n            #                                                     \"personNumber\": [],\n\n            #                                                     \"error\":[{ \n                                                                    \n            #                                                         \"errorMessage\":\"Please Check Query For Dataverse\" \n\n            #                                                             }]\n                                                                    \n            #                                                             }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend                      \n                                                    \n\n            #                                             elif responseForBudies.status_code==500:  \n            #                                                 resBody = {\n            #                                                     \"success\" : \"false\",\n            #                                                     \"statusCode\" : \"400\",\n            #                                                     \"personNumber\": [],\n\n            #                                                     \"error\":[{ \n                                                                    \n            #                                                         \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n            #                                                             }]\n                                                                    \n            #                                                             }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend\n\n\n\n            #                                         elif len(responseGetAllocatedBuddy)>0 and responseBool==True:\n\n            #                                              #Success Response For 3 Conditions\n\n            #                                                 resBody = {\n            #                                                     \"success\" : \"true\",\n            #                                                     \"statusCode\" : \"200\",\n                                                    \n            #                                                     \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                     \"error\":[{ \n                                                                        \n\n            #                                                     }]\n                                                            \n            #                                                     }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend\n                                                    \n\n            #                                         elif responseBool==False:\n            #                                             resBody = {\n            #                                                 \"success\" : \"false\",\n            #                                                 \"statusCode\" : \"400\",\n            #                                                 \"personNumber\": [],\n            #                                                 \"error\":[{ \n                                                                \n            #                                                     \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                         }]\n                                                                \n            #                                                         }\n            #                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                             return resBodySend\n\n\n            #                             # \n            #                             elif responseForBudies.status_code==400:  \n            #                                 resBody = {\n            #                                     \"success\" : \"false\",\n            #                                     \"statusCode\" : \"400\",\n            #                                     \"personNumber\": [],\n\n            #                                     \"error\":[{ \n                                                    \n            #                                         \"errorMessage\":\"Please Check Query For Dataverse\" \n\n            #                                             }]\n                                                    \n            #                                             }\n            #                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                 return resBodySend                      \n                                    \n\n            #                             elif responseForBudies.status_code==500:  \n            #                                 resBody = {\n            #                                     \"success\" : \"false\",\n            #                                     \"statusCode\" : \"400\",\n            #                                     \"personNumber\": [],\n\n            #                                     \"error\":[{ \n                                                    \n            #                                         \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n            #                                             }]\n                                                    \n            #                                             }\n            #                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                 return resBodySend\n                                    \n            #                         elif len(responseGetAllocatedBuddy)>0 and responseBool==True:\n            #                         #Success Response For 3 Conditions\n\n            #                             resBody = {\n            #                                 \"success\" : \"true\",\n            #                                 \"statusCode\" : \"200\",\n                                \n            #                                 \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                 \"error\":[{ \n                                                    \n\n            #                                 }]\n                                        \n            #                                 }\n            #                             resBodySend = json.dumps(resBody, indent=4)\n            #                             return resBodySend\n                                    \n            #                         elif responseBool==False:\n            #                             resBody = {\n            #                                 \"success\" : \"false\",\n            #                                 \"statusCode\" : \"400\",\n            #                                 \"personNumber\": [],\n            #                                 \"error\":[{ \n                                                \n            #                                     \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                         }]\n                                                \n            #                                         }\n            #                             resBodySend = json.dumps(resBody, indent=4)\n            #                             return resBodySend \n\n            #                     # Check 3 another(2)\n            #                     else:\n            #                                 query = \"$filter=(baa_sbu eq '\"+(str(sbu) if sbu is not None else 'Project Not Assigned')+\"') and (baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                                 responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                                 responseForBudiesJson = responseForBudies.json()\n            #                                 logging.info(responseForBudies.text)\n\n            #                                 if responseForBudies.status_code==200:\n            #                                     if \"value\" in responseForBudiesJson :\n            #                                         responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                         if responseForBudiesCount > 0 :\n            #                                             responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                             logging.info(responseGetAllocatedBuddyResponse)\n            #                                             responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                             responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                             repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                             logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                             logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                             logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                             if len(responseGetAllocatedBuddy) == 0 and responseBool==True:\n\n            #                                                 query = \"$filter=(baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                                                 responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                                                 responseForBudiesJson = responseForBudies.json()\n            #                                                 logging.info(responseForBudies.text)\n\n            #                                                 if responseForBudies.status_code==200:\n            #                                                     if \"value\" in responseForBudiesJson :\n            #                                                         responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                                         if responseForBudiesCount > 0 :\n            #                                                             responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                                             logging.info(responseGetAllocatedBuddyResponse)\n            #                                                             responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                                             responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                                             repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                                             logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                                             logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                                             logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                                             if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n        \n\n            #                                                                 resBody = {\n            #                                                                 \"success\" : \"false\",\n            #                                                                 \"statusCode\" : \"400\",\n            #                                                                 \"personNumber\": [],\n            #                                                                 \"error\":[{ \n                                                                                \n            #                                                                     \"errorMessage\":\"Eligible buddies not found\" \n\n            #                                                                         }]\n                                                                                \n            #                                                                         }\n            #                                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                                 return resBodySend  \n\n\n\n            #                                                             elif len(responseGetAllocatedBuddy)>0 and responseBool==True:    \n\n            #                                                                 #Success Response For 2 Conditions                                                      \n\n            #                                                                 resBody = {\n            #                                                                     \"success\" : \"true\",\n            #                                                                     \"statusCode\" : \"200\",\n                                                                    \n            #                                                                     \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                                     \"error\":[{ \n                                                                                        \n\n            #                                                                     }]\n                                                                            \n            #                                                                     }\n            #                                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                                 return resBodySend\n\n            #                                                             elif responseBool==False:    \n            #                                                                 resBody = {\n            #                                                                     \"success\" : \"false\",\n            #                                                                     \"statusCode\" : \"400\",\n            #                                                                     \"personNumber\": [],\n            #                                                                     \"error\":[{ \n                                                                                    \n            #                                                                         \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                                             }]\n                                                                                    \n            #                                                                             }\n            #                                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                                 return resBodySend\n\n            #                                                 #\n            #                                                 elif responseForBudies.status_code==400:  \n            #                                                     resBody = {\n            #                                                         \"success\" : \"false\",\n            #                                                         \"statusCode\" : \"400\",\n            #                                                         \"personNumber\": [],\n\n            #                                                         \"error\":[{ \n                                                                        \n            #                                                             \"errorMessage\":\"Please Check Query For Dataverse\" \n\n            #                                                                 }]\n                                                                        \n            #                                                                 }\n            #                                                     resBodySend = json.dumps(resBody, indent=4)\n            #                                                     return resBodySend                      \n                                                        \n\n            #                                                 elif responseForBudies.status_code==500:  \n            #                                                     resBody = {\n            #                                                         \"success\" : \"false\",\n            #                                                         \"statusCode\" : \"400\",\n            #                                                         \"personNumber\": [],\n\n            #                                                         \"error\":[{ \n                                                                        \n            #                                                             \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n            #                                                                 }]\n                                                                        \n            #                                                                 }\n            #                                                     resBodySend = json.dumps(resBody, indent=4)\n            #                                                     return resBodySend\n\n\n\n            #                                             elif len(responseGetAllocatedBuddy)>0 and responseBool==True:\n\n            #                                                 #Success Response For 3 Conditions\n\n            #                                                     resBody = {\n            #                                                         \"success\" : \"true\",\n            #                                                         \"statusCode\" : \"200\",\n                                                        \n            #                                                         \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                         \"error\":[{ \n                                                                            \n\n            #                                                         }]\n                                                                \n            #                                                         }\n            #                                                     resBodySend = json.dumps(resBody, indent=4)\n            #                                                     return resBodySend\n                                                        \n\n            #                                             elif responseBool==False:\n            #                                                 resBody = {\n            #                                                     \"success\" : \"false\",\n            #                                                     \"statusCode\" : \"400\",\n            #                                                     \"personNumber\": [],\n            #                                                     \"error\":[{ \n                                                                    \n            #                                                         \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                             }]\n                                                                    \n            #                                                             }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend\n\n\n            #                                         #3(2) No data from query\n\n\n            #                                             query = \"$filter=(baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                                             responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                                             responseForBudiesJson = responseForBudies.json()\n            #                                             logging.info(responseForBudies.text)\n\n            #                                             if responseForBudies.status_code==200:\n            #                                                 if \"value\" in responseForBudiesJson :\n            #                                                     responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                                     if responseForBudiesCount > 0 :\n            #                                                         responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                                         logging.info(responseGetAllocatedBuddyResponse)\n            #                                                         responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                                         responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                                         repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                                         if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n    \n\n            #                                                             resBody = {\n            #                                                             \"success\" : \"false\",\n            #                                                             \"statusCode\" : \"400\",\n            #                                                             \"personNumber\": [],\n            #                                                             \"error\":[{ \n                                                                            \n            #                                                                 \"errorMessage\":\"Eligible buddies not found\" \n\n            #                                                                     }]\n                                                                            \n            #                                                                     }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend  \n\n\n\n            #                                                         elif len(responseGetAllocatedBuddy)>0 and responseBool==True:    \n\n            #                                                             #Success Response For 2 Conditions                                                      \n\n            #                                                             resBody = {\n            #                                                                 \"success\" : \"true\",\n            #                                                                 \"statusCode\" : \"200\",\n                                                                \n            #                                                                 \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                                 \"error\":[{ \n                                                                                    \n\n            #                                                                 }]\n                                                                        \n            #                                                                 }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend\n\n            #                                                         elif responseBool==False:    \n            #                                                             resBody = {\n            #                                                                 \"success\" : \"false\",\n            #                                                                 \"statusCode\" : \"400\",\n            #                                                                 \"personNumber\": [],\n            #                                                                 \"error\":[{ \n                                                                                \n            #                                                                     \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                                         }]\n                                                                                \n            #                                                                         }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend\n                                                                \n\n            #                                                     else :\n\n            #                                                             resBody = {\n            #                                                             \"success\" : \"false\",\n            #                                                             \"statusCode\" : \"400\",\n            #                                                             \"personNumber\": [],\n            #                                                             \"error\":[{ \n                                                                            \n            #                                                                 \"errorMessage\":\"Eligible buddies not found\" \n\n            #                                                                     }]\n                                                                            \n            #                                                                     }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend \n\n            #                                             #\n            #                                             elif responseForBudies.status_code==400:  \n            #                                                 resBody = {\n            #                                                     \"success\" : \"false\",\n            #                                                     \"statusCode\" : \"400\",\n            #                                                     \"personNumber\": [],\n\n            #                                                     \"error\":[{ \n                                                                    \n            #                                                         \"errorMessage\":\"Please Check Query For Dataverse\" \n\n            #                                                             }]\n                                                                    \n            #                                                             }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend                      \n                                                    \n\n            #                                             elif responseForBudies.status_code==500:  \n            #                                                 resBody = {\n            #                                                     \"success\" : \"false\",\n            #                                                     \"statusCode\" : \"400\",\n            #                                                     \"personNumber\": [],\n\n            #                                                     \"error\":[{ \n                                                                    \n            #                                                         \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n            #                                                             }]\n                                                                    \n            #                                                             }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend\n                                            \n\n            #                                 #\n            #                                 elif responseForBudies.status_code==400:  \n            #                                     resBody = {\n            #                                         \"success\" : \"false\",\n            #                                         \"statusCode\" : \"400\",\n            #                                         \"personNumber\": [],\n\n            #                                         \"error\":[{ \n                                                        \n            #                                             \"errorMessage\":\"Please Check Query For Dataverse\" \n\n            #                                                 }]\n                                                        \n            #                                                 }\n            #                                     resBodySend = json.dumps(resBody, indent=4)\n            #                                     return resBodySend                      \n                                        \n\n            #                                 elif responseForBudies.status_code==500:  \n            #                                     resBody = {\n            #                                         \"success\" : \"false\",\n            #                                         \"statusCode\" : \"400\",\n            #                                         \"personNumber\": [],\n\n            #                                         \"error\":[{ \n                                                        \n            #                                             \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n            #                                                 }]\n                                                        \n            #                                                 }\n            #                                     resBodySend = json.dumps(resBody, indent=4)\n            #                                     return resBodySend\n                       \n                       \n                       \n            #             #\n            #             elif responseForBudies.status_code==400:  \n            #                 resBody = {\n            #                     \"success\" : \"false\",\n            #                     \"statusCode\" : \"400\",\n            #                     \"personNumber\": [],\n\n            #                     \"error\":[{ \n                                    \n            #                         \"errorMessage\":\"Please Check Query For Dataverse\" \n\n            #                             }]\n                                    \n            #                             }\n            #                 resBodySend = json.dumps(resBody, indent=4)\n            #                 return resBodySend                      \n                    \n\n            #             elif responseForBudies.status_code==500:  \n            #                 resBody = {\n            #                 \"success\" : \"false\",\n            #                 \"statusCode\" : \"400\",\n            #                 \"personNumber\": [],\n\n            #                 \"error\":[{ \n                                \n            #                     \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n            #                         }]\n                                \n            #                         }\n            #                 resBodySend = json.dumps(resBody, indent=4)\n            #                 return resBodySend\n\n\n            #        #Success Response For 4 Conditions\n            #         elif len(responseGetAllocatedBuddy) >0 and responseBool==True :\n            #             resBody = {\n            #                 \"success\" : \"true\",\n            #                 \"statusCode\" : \"200\",\n                \n            #                 \"personNumber\": responseGetAllocatedBuddy,\n\n            #                 \"error\":[{ \n                                    \n\n            #                 }]\n                        \n            #                 }\n            #             resBodySend = json.dumps(resBody, indent=4)\n            #             return resBodySend\n\n            #         elif responseBool==False:\n            #             resBody = {\n            #                 \"success\" : \"false\",\n            #                 \"statusCode\" : \"400\",\n            #                 \"personNumber\": [],\n            #                 \"error\":[{ \n                                \n            #                     \"errorMessage\":responseGetAllocatedBuddy \n\n            #                         }]\n                                \n            #                         }\n            #             resBodySend = json.dumps(resBody, indent=4)\n            #             return resBodySend  \n\n\n            #     #4 conditions failed\n            #     if responseForBudiesCount == 0 :\n            #         #3 condition condition\n                      \n            #             query = \"$filter=(baa_account eq '\"+(str(account) if account is not None else 'Project Account Not Assigned')+\"') and (baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #             responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #             responseForBudiesJson = responseForBudies.json()\n            #             logging.info(responseForBudies.text)\n\n            #             if responseForBudies.status_code==200:\n            #                 if \"value\" in responseForBudiesJson :\n            #                     responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                     if responseForBudiesCount > 0 :\n            #                         responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                         logging.info(responseGetAllocatedBuddyResponse)\n            #                         responseBool=responseGetAllocatedBuddyResponse[0]\n            #                         responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                         repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                         logging.info(responseGetAllocatedBuddyResponse[0])\n            #                         logging.info(responseGetAllocatedBuddyResponse[1])\n            #                         logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                         if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n\n            #                             query = \"$filter=(baa_sbu eq '\"+(str(sbu) if sbu is not None else 'Project Not Assigned')+\"') and (baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                             responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                             responseForBudiesJson = responseForBudies.json()\n            #                             logging.info(responseForBudies.text)\n\n            #                             if responseForBudies.status_code==200:\n            #                                 if \"value\" in responseForBudiesJson :\n            #                                     responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                     if responseForBudiesCount > 0 :\n            #                                         responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                         logging.info(responseGetAllocatedBuddyResponse)\n            #                                         responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                         responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                         repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                         logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                         logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                         logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                         if len(responseGetAllocatedBuddy) == 0 and responseBool==True:\n\n            #                                             query = \"$filter=(baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                                             responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                                             responseForBudiesJson = responseForBudies.json()\n            #                                             logging.info(responseForBudies.text)\n\n            #                                             if responseForBudies.status_code==200:\n            #                                                 if \"value\" in responseForBudiesJson :\n            #                                                     responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                                     if responseForBudiesCount > 0 :\n            #                                                         responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                                         logging.info(responseGetAllocatedBuddyResponse)\n            #                                                         responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                                         responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                                         repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                                         if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n    \n\n            #                                                             resBody = {\n            #                                                             \"success\" : \"false\",\n            #                                                             \"statusCode\" : \"400\",\n            #                                                             \"personNumber\": [],\n            #                                                             \"error\":[{ \n                                                                            \n            #                                                                 \"errorMessage\":\"Eligible buddies not found\" \n\n            #                                                                     }]\n                                                                            \n            #                                                                     }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend  \n\n\n\n            #                                                         elif len(responseGetAllocatedBuddy)>0 and responseBool==True:    \n\n            #                                                              #Success Response For 2 Conditions                                                      \n\n            #                                                             resBody = {\n            #                                                                 \"success\" : \"true\",\n            #                                                                 \"statusCode\" : \"200\",\n                                                                \n            #                                                                 \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                                 \"error\":[{ \n                                                                                    \n\n            #                                                                 }]\n                                                                        \n            #                                                                 }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend\n\n            #                                                         elif responseBool==False:    \n            #                                                             resBody = {\n            #                                                                 \"success\" : \"false\",\n            #                                                                 \"statusCode\" : \"400\",\n            #                                                                 \"personNumber\": [],\n            #                                                                 \"error\":[{ \n                                                                                \n            #                                                                     \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                                         }]\n                                                                                \n            #                                                                         }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend\n            #                                             #\n\n            #                                             elif responseForBudies.status_code==400:  \n            #                                                 resBody = {\n            #                                                     \"success\" : \"false\",\n            #                                                     \"statusCode\" : \"400\",\n            #                                                     \"personNumber\": [],\n\n            #                                                     \"error\":[{ \n                                                                    \n            #                                                         \"errorMessage\":\"Please Check Query For Dataverse\" \n\n            #                                                             }]\n                                                                    \n            #                                                             }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend                      \n                                                    \n\n            #                                             elif responseForBudies.status_code==500:  \n            #                                                 resBody = {\n            #                                                     \"success\" : \"false\",\n            #                                                     \"statusCode\" : \"400\",\n            #                                                     \"personNumber\": [],\n\n            #                                                     \"error\":[{ \n                                                                    \n            #                                                         \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n            #                                                             }]\n                                                                    \n            #                                                             }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend\n                                                    \n\n\n\n            #                                         elif len(responseGetAllocatedBuddy)>0 and responseBool==True:\n\n            #                                              #Success Response For 3 Conditions\n\n            #                                                 resBody = {\n            #                                                     \"success\" : \"true\",\n            #                                                     \"statusCode\" : \"200\",\n                                                    \n            #                                                     \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                     \"error\":[{ \n                                                                        \n\n            #                                                     }]\n                                                            \n            #                                                     }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend\n                                                    \n\n            #                                         elif responseBool==False:\n            #                                             resBody = {\n            #                                                 \"success\" : \"false\",\n            #                                                 \"statusCode\" : \"400\",\n            #                                                 \"personNumber\": [],\n            #                                                 \"error\":[{ \n                                                                \n            #                                                     \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                         }]\n                                                                \n            #                                                         }\n            #                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                             return resBodySend\n\n            #                             #\n\n            #                             elif responseForBudies.status_code==400:  \n            #                                 resBody = {\n            #                                     \"success\" : \"false\",\n            #                                     \"statusCode\" : \"400\",\n            #                                     \"personNumber\": [],\n\n            #                                     \"error\":[{ \n                                                    \n            #                                         \"errorMessage\":\"Please Check Query For Dataverse\" \n\n            #                                             }]\n                                                    \n            #                                             }\n            #                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                 return resBodySend                      \n                                    \n\n            #                             elif responseForBudies.status_code==500:  \n            #                                 resBody = {\n            #                                     \"success\" : \"false\",\n            #                                     \"statusCode\" : \"400\",\n            #                                     \"personNumber\": [],\n\n            #                                     \"error\":[{ \n                                                    \n            #                                         \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n            #                                             }]\n                                                    \n            #                                             }\n            #                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                 return resBodySend\n\n                                    \n            #                         elif len(responseGetAllocatedBuddy)>0 and responseBool==True:\n            #                         #Success Response For 3 Conditions\n\n            #                             resBody = {\n            #                                 \"success\" : \"true\",\n            #                                 \"statusCode\" : \"200\",\n                                \n            #                                 \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                 \"error\":[{ \n                                                    \n\n            #                                 }]\n                                        \n            #                                 }\n            #                             resBodySend = json.dumps(resBody, indent=4)\n            #                             return resBodySend\n                                    \n            #                         elif responseBool==False:\n            #                             resBody = {\n            #                                 \"success\" : \"false\",\n            #                                 \"statusCode\" : \"400\",\n            #                                 \"personNumber\": [],\n            #                                 \"error\":[{ \n                                                \n            #                                     \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                         }]\n                                                \n            #                                         }\n            #                             resBodySend = json.dumps(resBody, indent=4)\n            #                             return resBodySend \n\n            #                     # Check 3 another(2)\n            #                     if responseForBudiesCount == 0 :\n\n            #                                 query = \"$filter=(baa_sbu eq '\"+(str(sbu) if sbu is not None else 'Project Not Assigned')+\"') and (baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                                 responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                                 responseForBudiesJson = responseForBudies.json()\n            #                                 logging.info(responseForBudies.text)\n\n            #                                 if responseForBudies.status_code==200:\n            #                                     if \"value\" in responseForBudiesJson :\n            #                                         responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                         if responseForBudiesCount > 0 :\n            #                                             responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                             logging.info(responseGetAllocatedBuddyResponse)\n            #                                             responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                             responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                             repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                             logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                             logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                             logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                             if len(responseGetAllocatedBuddy) == 0 and responseBool==True:\n\n            #                                                 query = \"$filter=(baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                                                 responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                                                 responseForBudiesJson = responseForBudies.json()\n            #                                                 logging.info(responseForBudies.text)\n\n            #                                                 if responseForBudies.status_code==200:\n            #                                                     if \"value\" in responseForBudiesJson :\n            #                                                         responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                                         if responseForBudiesCount > 0 :\n            #                                                             responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                                             logging.info(responseGetAllocatedBuddyResponse)\n            #                                                             responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                                             responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                                             repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                                             logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                                             logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                                             logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                                             if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n        \n\n            #                                                                 resBody = {\n            #                                                                 \"success\" : \"false\",\n            #                                                                 \"statusCode\" : \"400\",\n            #                                                                 \"personNumber\": [],\n            #                                                                 \"error\":[{ \n                                                                                \n            #                                                                     \"errorMessage\":\"Eligible buddies not found\" \n\n            #                                                                         }]\n                                                                                \n            #                                                                         }\n            #                                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                                 return resBodySend  \n\n\n\n            #                                                             elif len(responseGetAllocatedBuddy)>0 and responseBool==True:    \n\n            #                                                                 #Success Response For 2 Conditions                                                      \n\n            #                                                                 resBody = {\n            #                                                                     \"success\" : \"true\",\n            #                                                                     \"statusCode\" : \"200\",\n                                                                    \n            #                                                                     \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                                     \"error\":[{ \n                                                                                        \n\n            #                                                                     }]\n                                                                            \n            #                                                                     }\n            #                                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                                 return resBodySend\n\n            #                                                             elif responseBool==False:    \n            #                                                                 resBody = {\n            #                                                                     \"success\" : \"false\",\n            #                                                                     \"statusCode\" : \"400\",\n            #                                                                     \"personNumber\": [],\n            #                                                                     \"error\":[{ \n                                                                                    \n            #                                                                         \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                                             }]\n                                                                                    \n            #                                                                             }\n            #                                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                                 return resBodySend\n\n                                                        \n\n\n\n            #                                             elif len(responseGetAllocatedBuddy)>0 and responseBool==True:\n\n            #                                                 #Success Response For 3 Conditions\n\n            #                                                     resBody = {\n            #                                                         \"success\" : \"true\",\n            #                                                         \"statusCode\" : \"200\",\n                                                        \n            #                                                         \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                         \"error\":[{ \n                                                                            \n\n            #                                                         }]\n                                                                \n            #                                                         }\n            #                                                     resBodySend = json.dumps(resBody, indent=4)\n            #                                                     return resBodySend\n                                                        \n\n            #                                             elif responseBool==False:\n            #                                                 resBody = {\n            #                                                     \"success\" : \"false\",\n            #                                                     \"statusCode\" : \"400\",\n            #                                                     \"personNumber\": [],\n            #                                                     \"error\":[{ \n                                                                    \n            #                                                         \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                             }]\n                                                                    \n            #                                                             }\n            #                                                 resBodySend = json.dumps(resBody, indent=4)\n            #                                                 return resBodySend\n\n                                                     \n            #                                         #3(2) No data from query\n            #                                         elif responseForBudiesCount==0 :\n            #                                             query = \"$filter=(baa_atc eq '\"+atc+\"') and (baa_serviceline eq '\"+serviceLine+\"')\"\n            #                                             responseForBudies = CurdForBuddies.getQualifiedBuddies(self, dataverseUrl, acc, tokenType, dataverseTable,query)\n            #                                             responseForBudiesJson = responseForBudies.json()\n            #                                             logging.info(responseForBudies.text)\n\n            #                                             if responseForBudies.status_code==200:\n            #                                                 if \"value\" in responseForBudiesJson :\n            #                                                     responseForBudiesCount = len(responseForBudiesJson[\"value\"]) \n            #                                                     if responseForBudiesCount > 0 :\n            #                                                         responseGetAllocatedBuddyResponse = GetAllocatedBuddy().getAllBuddeis(responseForBudies,repeatEmployee,accessToken)\n            #                                                         logging.info(responseGetAllocatedBuddyResponse)\n            #                                                         responseBool=responseGetAllocatedBuddyResponse[0]\n            #                                                         responseGetAllocatedBuddy=responseGetAllocatedBuddyResponse[1]\n            #                                                         repeatEmployee=responseGetAllocatedBuddyResponse[2]\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[0])\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[1])\n            #                                                         logging.info(responseGetAllocatedBuddyResponse[2])\n\n            #                                                         if len(responseGetAllocatedBuddy) == 0 and responseBool==True :\n    \n\n            #                                                             resBody = {\n            #                                                             \"success\" : \"false\",\n            #                                                             \"statusCode\" : \"400\",\n            #                                                             \"personNumber\": [],\n            #                                                             \"error\":[{ \n                                                                            \n            #                                                                 \"errorMessage\":\"Eligible buddies not found\" \n\n            #                                                                     }]\n                                                                            \n            #                                                                     }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend  \n\n\n\n            #                                                         elif len(responseGetAllocatedBuddy)>0 and responseBool==True:    \n\n            #                                                             #Success Response For 2 Conditions                                                      \n            #                                                             logging.info(\"ssssss\")\n            #                                                             resBody = {\n            #                                                                 \"success\" : \"true\",\n            #                                                                 \"statusCode\" : \"200\",\n                                                                \n            #                                                                 \"personNumber\": responseGetAllocatedBuddy,\n\n            #                                                                 \"error\":[{ \n                                                                                    \n\n            #                                                                 }]\n                                                                        \n            #                                                                 }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend\n\n            #                                                         elif responseBool==False:    \n            #                                                             resBody = {\n            #                                                                 \"success\" : \"false\",\n            #                                                                 \"statusCode\" : \"400\",\n            #                                                                 \"personNumber\": [],\n            #                                                                 \"error\":[{ \n                                                                                \n            #                                                                     \"errorMessage\":responseGetAllocatedBuddy \n\n            #                                                                         }]\n                                                                                \n            #                                                                         }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend\n                                                                \n\n            #                                                     else :\n            #                                                             logging.info(\"Hithana place\")\n            #                                                             resBody = {\n            #                                                             \"success\" : \"false\",\n            #                                                             \"statusCode\" : \"400\",\n            #                                                             \"personNumber\": [],\n            #                                                             \"error\":[{ \n                                                                            \n            #                                                                 \"errorMessage\":\"Eligible buddies not found\" \n\n            #                                                                     }]\n                                                                            \n            #                                                                     }\n            #                                                             resBodySend = json.dumps(resBody, indent=4)\n            #                                                             return resBodySend \n\n\n\n\n            #                                     else: \n\n            #                                         resBody = {\n            #                                             \"success\" : \"false\",\n            #                                             \"statusCode\" : \"400\",\n            #                                             \"personNumber\": [],\n            #                                             \"error\":[{ \n                                                            \n            #                                                 \"errorMessage\":\"Attribute error in Dataverse || value\" \n\n            #                                                     }]\n                                                            \n            #                                                     }\n            #                                         resBodySend = json.dumps(resBody, indent=4)\n            #                                         return resBodySend      \n            #                                 #    \n                                              \n            #                                 else:\n\n            #                                     resBody = {\n            #                                         \"success\" : \"false\",\n            #                                         \"statusCode\" : \"400\",\n                                    \n            #                                         \"personNumber\": [],\n\n            #                                         \"error\":[{ \n                                                        \n            #                                             \"errorMessage\":\"Dataverse Connection Error\" \n\n            #                                                 }]\n                                                        \n            #                                                 }\n\n            #                                     resBodySend = json.dumps(resBody, indent=4)\n            #                                     return resBodySend  \n            #             #\n            #             elif responseForBudies.status_code==400:  \n            #                 resBody = {\n            #                     \"success\" : \"false\",\n            #                     \"statusCode\" : \"400\",\n            #                     \"personNumber\": [],\n\n            #                     \"error\":[{ \n                                    \n            #                         \"errorMessage\":\"Please Check Query For Dataverse\" \n\n            #                             }]\n                                    \n            #                             }\n            #                 resBodySend = json.dumps(resBody, indent=4)\n            #                 return resBodySend                      \n                    \n\n            #             elif responseForBudies.status_code==500:  \n            #                 resBody = {\n            #                     \"success\" : \"false\",\n            #                     \"statusCode\" : \"400\",\n            #                     \"personNumber\": [],\n\n            #                     \"error\":[{ \n                                    \n            #                         \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n            #                             }]\n                                    \n            #                             }\n            #                 resBodySend = json.dumps(resBody, indent=4)\n            #                 return resBodySend\n            ############################################################\n            elif responseForBudies.status_code==400:  \n                resBody = {\n                    \"success\" : \"false\",\n                    \"statusCode\" : \"400\",\n                    \"personNumber\": [],\n\n                    \"error\":[{ \n                        \n                        \"errorMessage\":\"Please Check Query For Dataverse\" \n\n                            }]\n                        \n                            }\n                resBodySend = json.dumps(resBody, indent=4)\n                return resBodySend                      \n        \n\n            elif responseForBudies.status_code==500:  \n                resBody = {\n                    \"success\" : \"false\",\n                    \"statusCode\" : \"400\",\n                    \"personNumber\": [],\n\n                    \"error\":[{ \n                        \n                        \"errorMessage\":\"Internal Server Error From Dataverse\" \n\n                            }]\n                        \n                            }\n                resBodySend = json.dumps(resBody, indent=4)\n                return resBodySend    \n        \n            elif responseForBudies.status_code==401: \n\n                resBody = {\n                    \"success\" : \"false\",\n                    \"statusCode\" : \"400\",\n                    \"personNumber\": [],\n\n                    \"error\":[{ \n                        \n                        \"errorMessage\":\"Unauthorized. Access token is missing or invalid.\" \n\n                            }]\n                        \n                            }\n                resBodySend = json.dumps(resBody, indent=4)\n                return resBodySend\n\n            elif responseForBudies.status_code==403: \n\n                resBody = {\n                    \"success\" : \"false\",\n                    \"statusCode\" : \"400\",\n                    \"personNumber\": [],\n\n                    \"error\":[{ \n                        \n                        \"errorMessage\":\"access to the requested resource is forbidden.\" \n\n                            }]\n                        \n                            }\n                resBodySend = json.dumps(resBody, indent=4)\n                return resBodySend  \n\n            elif responseForBudies.status_code==429: \n\n                resBody = {\n                    \"success\" : \"false\",\n                    \"statusCode\" : \"400\",\n                    \"personNumber\": [],\n\n                    \"error\":[{ \n                        \n                        \"errorMessage\":\"Too Many Requests\" \n\n                            }]\n                        \n                            }\n                resBodySend = json.dumps(resBody, indent=4)\n                return resBodySend     \n\n            else : \n\n                 \n                resBody = {\n                    \"success\" : \"false\",\n                    \"statusCode\" : \"400\",\n                    \"personNumber\": [],\n\n                    \"error\":[{ \n                        \n                        \"errorMessage\":\"Internal Error Occured\" \n\n                            }]\n                        \n                            }\n                resBodySend = json.dumps(resBody, indent=4)\n                return resBodySend  \n        \n        #\n        elif responseForBudies.status_code==400:  \n                resBody = {\n                    \"success\" : \"false\",\n                    \"statusCode\" : \"400\",\n                    \"personNumber\": [],\n\n                    \"error\":[{ \n                        \n                        \"errorMessage\":\"Bad Request\" \n\n                            }]\n                        \n                            }\n                resBodySend = json.dumps(resBody, indent=4)\n                return resBodySend \n\n        elif responseForBudies.status_code==401: \n\n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"Unauthorized. Access token is missing or invalid.\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend \n\n        elif responseForBudies.status_code==403: \n\n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"access to the requested resource is forbidden.\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend      \n\n        elif responseForBudies.status_code==404:     \n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"Resource Not Found\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend    \n\n        elif responseForBudies.status_code==408:     \n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"Request Time Out\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend      \n\n        elif responseForBudies.status_code==429: \n\n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"Too Many Requests\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend   \n\n        elif responseForBudies.status_code==500:  \n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"Internal Server Error\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend \n\n        elif responseForBudies.status_code==502:     \n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"Bad Gateway\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend   \n\n        elif responseForBudies.status_code==503:     \n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"Requested Service Not Available\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend \n\n        elif responseForBudies.status_code==504:     \n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"Gateway Timeout\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend    \n\n        elif responseForBudies.status_code==505:     \n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"HTTP Version Not Support\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend   \n\n   \n\n        else : \n            resBody = {\n                \"success\" : \"false\",\n                \"statusCode\" : \"400\",\n                \"personNumber\": [],\n\n                \"error\":[{ \n                    \n                    \"errorMessage\":\"Internal Error Occured\" \n\n                        }]\n                    \n                        }\n            resBodySend = json.dumps(resBody, indent=4)\n            return resBodySend               \n\n    #   except requests.exceptions.ConnectionError:\n\n        sucResponse= {\n        \"success\" : \"false\",\n        \"statusCode\" : \"400\",\n        \"error\":[{\n\n        \"errorMessage\" : \"Connection Error Occured\"\n        }]\n                                            \n        }  \n\n\n        resBodySend = json.dumps(sucResponse, indent=4)\n        return resBodySend \n\n\n  \n    #   except ValueError:\n    #     sucResponse= {\n    #     \"success\" : \"false\",\n    #     \"statusCode\" : \"500\",\n    #     \"error\":[{\n\n    #     \"errorMessage\" : \"Expected Values Not Received\"\n    #     }]\n                                            \n    #     }  \n\n\n        resBodySend = json.dumps(sucResponse, indent=4)\n        return resBodySend \n\n    #   except:\n    #     sucResponse= {\n    #     \"success\" : \"false\",\n    #     \"statusCode\" : \"500\",\n    #     \"error\":[{\n\n    #     \"errorMessage\" : \"Internal Error Occured\"\n    #     }]\n                                             \n    #     }  \n\n\n    #     resBodySend = json.dumps(sucResponse, indent=4)\n    #     return resBodySend \n\n        \n\n    else:\n        raise TypeError(\"Invalid arguments passed to getAllBuddeis()\")\n\n\n# GET_ALLOCATED_BUDDY --> GETALLBUDDY\n\n# ENCODE PARAM\n\ndef encodeParamForDataverse(recievedString):\n\n    preString = str(recievedString)\n    encodeString = \"\"\n    for ch in recievedString:\n     if ch=='&':\n      encodeString=encodeString+\"%26\"\n     elif ch=='$':\n        encodeString=encodeString+\"%24\"\n     elif ch=='+': \n         encodeString=encodeString+\"%2B\" \n     elif ch==',':    \n         encodeString=encodeString+\"%2C\" \n     elif ch=='/':    \n         encodeString=encodeString+\"%2F\"\n     elif ch==':':    \n         encodeString=encodeString+\"%3A\"\n     elif ch==';':\n        encodeString=encodeString+\"%3B\"  \n     elif ch=='=':\n        encodeString=encodeString+\"%3D\"   \n     elif ch=='?':\n        encodeString=encodeString+\"%3F\"\n     elif ch=='@':\n        encodeString=encodeString+\"%40\"       \n     else:\n      encodeString=encodeString+ch\n    \n    return str(encodeString)  \n\n# GET ACCESS TOKEN\ndef getAcessTokenForRR(url,dataBody,virtusaRRSubKey): \n      \n     headers = {\"Ocp-Apim-Subscription-Key\": virtusaRRSubKey,\"REST-Framework-Version\": \"4\"}\n     response = requests.post(url,data=dataBody,headers=headers,verify=False)\n      \n     return response\n\n\ndef getQualifiedBuddies(dataverseUrl,access_token,tokenType,dataverseTable,query) :\n\n     headers = {\"Authorization\" : tokenType+\" \"+access_token}\n     url = dataverseUrl+dataverseTable+\"?\"+ query\n    # logging.info(url)\n\n     response = requests.request(\"Get\",url,headers=headers,verify=False)\n      \n     return response\n\n\ndef getQualifiedBuddyCount(url,accessToken,requestBodySend,subKey) :\n     #logging.info(\"Athule inne\")\n     headers = {\"Authorization\": accessToken,\"Ocp-Apim-Subscription-Key\": subKey,\"REST-Framework-Version\": \"4\"}\n    \n     logging.info(\"deeeeeeeeeeeeeeee\")\n     logging.info(requestBodySend)\n     logging.info(\"deeeeeeeeeeeeeeee\")\n\n     response = requests.request(\"POST\",url,data=requestBodySend,headers=headers,verify=False)\n     \n     #logging.info(response.text)\n      \n     return response\n\ndef getHireDate(url,accessToken,subKey) :\n\n     headers = {\"Authorization\": accessToken,\"Ocp-Apim-Subscription-Key\": subKey,\"REST-Framework-Version\": \"4\"}\n    \n     response = requests.request(\"GET\",url,headers=headers,verify=False)\n     #logging.info(\"Athule inne\")\n     #logging.info(response.text)\n      \n     return response\n\n\n\n# Execute Main Logic\n\ndef run_main_logic(request_data, accessToken, request_method, resourseRequestNumber):\n    try:\n        rrNumber = \"\"\n        if request_method == \"GET\":\n            rrNumber = resourseRequestNumber\n            if not rrNumber:\n                sucResponse = {\"success\": \"false\", \"statusCode\": \"500\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Unable To Find ResourseRequestNumber\"}]}\n                return sucResponse, 200\n        \n        elif request_method == \"POST\":\n            requestBody = request_data\n            eligibleBuddyNumbers = []\n            data = f\"client_id={ClientId}&grant_type={GrantType}&client_secret={ClientSecret}\"\n            response = getAcessTokenForRR(TokenGenerateURL, data, VirtusaTokenSubKey)\n            if response.status_code == 200:\n                if \"tier\" in requestBody:\n                    if \"practice\" in requestBody:\n                        if \"projectSBUSegment\" in requestBody:\n                            if \"workingATC\" in requestBody:\n                                if \"projectAccount\" in requestBody:\n                                    if (requestBody)[\"tier\"] is not None:\n                                        if (requestBody)[\"practice\"] is not None:\n                                            if (requestBody)[\"workingATC\"] is not None:\n                                                workingAtc = (requestBody)[\"workingATC\"]\n                                                practice = (requestBody)[\"practice\"]\n                                                tier = (requestBody)[\"tier\"]\n                                                sbu = None\n                                                account = None\n                                                tier_encoded = encodeParamForDataverse(tier)\n                                                serviceLine_encoded = encodeParamForDataverse(practice)\n                                                if (requestBody)[\"projectSBUSegment\"] is not None:\n                                                    sbu = encodeParamForDataverse((requestBody)[\"projectSBUSegment\"])\n                                                atc = encodeParamForDataverse(workingAtc)\n                                                if (requestBody)[\"projectAccount\"] is not None:\n                                                    account = encodeParamForDataverse((requestBody)[\"projectAccount\"])\n                                                responseEligibleBuddies_str = getAllBuddeis(tier_encoded, serviceLine_encoded, sbu, atc, account, accessToken)\n                                                return json.loads(responseEligibleBuddies_str), 200\n                                            else:\n                                                resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : WorkingAtc is missing\"}]}\n                                                return resBody, 400\n                                        else:\n                                            resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : Practice is missing\"}]}\n                                            return resBody, 400\n                                    else:\n                                        resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : Tier is missing\"}]}\n                                        return resBody, 400\n                                else:\n                                    resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : ProjectAccount attribute is missing\"}]}\n                                    return resBody, 400\n                            else:\n                                resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : WorkATC attribute is missing\"}]}\n                                return resBody, 400\n                        else:\n                            resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : SBU attribute is missing\"}]}\n                            return resBody, 400\n                    else:\n                        resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : Project attribute is missing\"}]}\n                        return resBody, 400\n                else:\n                    resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : Tier attribute is missing\"}]}\n                    return resBody, 400\n\n            elif response.status_code in [400, 401, 403, 404, 408, 429, 500, 502, 503, 504, 505]:\n                error_messages = {400: \"Bad Request\", 401: \"Unauthorized. Access token is missing or invalid.\", 403: \"access to the requested resource is forbidden.\", 404: \"Resource Not Found\", 408: \"Request Time Out\", 429: \"Too Many Requests\", 500: \"Internal Server Error\", 502: \"Bad Gateway\", 503: \"Requested Service Not Available\", 504: \"Gateway Timeout\", 505: \"HTTP Version Not Support\"}\n                resBody = {\"success\": \"false\", \"statusCode\": str(response.status_code), \"personNumber\": [], \"error\": [{\"errorMessage\": error_messages.get(response.status_code, \"Internal Error Occured\")}]}\n                return resBody, response.status_code\n            else:\n                resBody = {\"success\": \"false\", \"statusCode\": \"500\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Internal Error Occured\"}]}\n                return resBody, 500\n                \n    except requests.exceptions.ConnectionError:\n        sucResponse = {\"success\": \"false\", \"statusCode\": \"400\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Connection Error Occured\"}]}\n        return sucResponse, 400\n    except (ValueError, KeyError):\n        sucResponse = {\"success\": \"false\", \"statusCode\": \"500\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Expected Values Not Received\"}]}\n        return sucResponse, 500\n    except Exception:\n        sucResponse = {\"success\": \"false\", \"statusCode\": \"500\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Internal Error Occured\"}]}\n        return sucResponse, 500\n\nresult, status = run_main_logic(payload, accessToken, \"POST\", resourseRequestNumber)\n\n# print(result)",
				"imports":[
					"requests"
				],
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"VirtusaTokenSubKey":"{{ __ENV__.outputs.VirtusaTokenSubKey_Buddy }}",
					"VirtusaRRSubKey":"{{ __ENV__.outputs.VirtusaRRSubKey }}",
					"ClientSecret":"{{ __ENV__.outputs.ClientSecret_Virtubuddy }}",
					"ClientId":"{{ __ENV__.outputs.ClientId_Virtubuddy }}",
					"GrantType":"{{ __ENV__.outputs.GrantType_Virtu_buddy }}",
					"TokenGenerateURL":"{{ __ENV__.outputs.TokenGenerateURL }}",
					"DataverseUrl":"{{ __ENV__.outputs.DataverseUrl }}",
					"DataverseTable":"{{ __ENV__.outputs.DataverseTable }}",
					"GetAllocatedBuddyUrl":"{{ __ENV__.outputs.GetAllocatedBuddyUrl }}",
					"GetAllocatedBuddyToken":"{{ __ENV__.outputs.GetAllocatedBuddyToken }}",
					"EmployeeApiForHireDateUrl":"{{ __ENV__.outputs.EmployeeApiForHireDateUrl }}",
					"EmployeeApiSubKey":"{{ __ENV__.outputs.EmployeeApiSubKey }}",
					"AllocationDayCount":"{{ __ENV__.outputs.AllocationDayCount }}",
					"ManagerType":"{{ __ENV__.outputs.ManagerType }}",
					"ManagerTerminationDayCount":"{{ __ENV__.outputs.ManagerTerminationDayCount }}",
					"BuddyCountForAManager":"{{ __ENV__.outputs.BuddyCountForAManager }}",
					"resourseRequestNumber":"=IF(ISBLANK({{ n_vlZAI.outputs.queryParams.resourseRequestNumber }}),\"\", {{ n_vlZAI.outputs.queryParams.resourseRequestNumber }})",
					"requestResourceNumber":"=IF(LEN({{ n_vlZAI.outputs.queryParams.resourseRequestNumber }})=0, \"\", {{ n_vlZAI.outputs.queryParams.resourseRequestNumber }})",
					"accessToken":"=IF(ISBLANK({{ n_vlZAI.outputs.headers.authorization }}), \"\", {{ n_vlZAI.outputs.headers.authorization }})",
					"payload":"{{ n_K4q3Q.outputs.payload }}",
					"DataverseTokenUrl":"{{ __ENV__.outputs.DataVerseTokenUrl }}",
					"DataverseClientId":"{{ __ENV__.outputs.DataverseClientId }}",
					"DataverseGrantType":"{{ __ENV__.outputs.DataverseGrantType }}",
					"DataVerseClientSecret":"{{ __ENV__.outputs.DataVerseClientSecret }}",
					"DataverseScope":"{{ __ENV__.outputs.DataverseScope }}"
				}
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Code",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":765,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_VVPM9-1",
			"id":"_LxKRL",
			"index":6,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"statusCode",
						"error"
					],
					"properties":{
						"statusCode":{
							"type":"string",
							"title":"Status Code"
						},
						"error":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Error"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"TokenGenerateURL",
						"ClientId",
						"GrantType",
						"ClientSecret",
						"VirtusaRRSubKey",
						"VirtusaTokenSubKey",
						"DataverseUrl",
						"DataverseTable",
						"GetAllocatedBuddyUrl",
						"GetAllocatedBuddyToken",
						"EmployeeApiForHireDateUrl",
						"EmployeeApiSubKey",
						"AllocationDayCount",
						"ManagerType",
						"ManagerTerminationDayCount",
						"BuddyCountForAManager",
						"resourseRequestNumber",
						"accessToken",
						"payload",
						"requestResourceNumber",
						"DataverseTokenUrl",
						"DataverseClientId",
						"DataverseGrantType",
						"DataVerseClientSecret",
						"DataverseScope"
					],
					"properties":{
						"TokenGenerateURL":{
							"type":"string",
							"title":"Token Generate URL"
						},
						"ClientId":{
							"type":"string",
							"title":"Client Id"
						},
						"GrantType":{
							"type":"string",
							"title":"Grant Type"
						},
						"ClientSecret":{
							"type":"string",
							"title":"Client Secret"
						},
						"VirtusaRRSubKey":{
							"type":"string",
							"title":"Virtusa RR Sub Key"
						},
						"VirtusaTokenSubKey":{
							"type":"string",
							"title":"Virtusa Token Sub Key"
						},
						"DataverseUrl":{
							"type":"string",
							"title":"Dataverse Url"
						},
						"DataverseTable":{
							"type":"string",
							"title":"Dataverse Table"
						},
						"GetAllocatedBuddyUrl":{
							"type":"string",
							"title":"Get Allocated Buddy Url"
						},
						"GetAllocatedBuddyToken":{
							"type":"string",
							"title":"Get Allocated Buddy Token"
						},
						"EmployeeApiForHireDateUrl":{
							"type":"string",
							"title":"Employee Api For Hire Date Url"
						},
						"EmployeeApiSubKey":{
							"type":"string",
							"title":"Employee Api Sub Key"
						},
						"AllocationDayCount":{
							"type":"string",
							"title":"Allocation Day Count"
						},
						"ManagerType":{
							"type":"string",
							"title":"Manager Type"
						},
						"ManagerTerminationDayCount":{
							"type":"string",
							"title":"Manager Termination Day Count"
						},
						"BuddyCountForAManager":{
							"type":"string",
							"title":"Buddy Count For A Manager"
						},
						"resourseRequestNumber":{
							"type":"string",
							"title":"Resourse Request Number"
						},
						"accessToken":{
							"type":"string",
							"title":"Access Token"
						},
						"payload":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Payload"
						},
						"requestResourceNumber":{
							"type":"string",
							"title":"Request Resource Number"
						},
						"DataverseTokenUrl":{
							"type":"string",
							"title":"Dataverse Token Url"
						},
						"DataverseClientId":{
							"type":"string",
							"title":"Dataverse Client Id"
						},
						"DataverseGrantType":{
							"type":"string",
							"title":"Dataverse Grant Type"
						},
						"DataVerseClientSecret":{
							"type":"string",
							"title":"Dataverse Client Secret"
						},
						"DataverseScope":{
							"type":"string",
							"title":"Dataverse Scope"
						}
					}
				},
				"configurationMode":"MANUAL",
				"code":"import urllib3\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n\nimport requests\nimport logging\nimport os\nimport json\nfrom datetime import datetime, timedelta\n\n\n# GET ACCESS TOKEN\ndef getAcessTokenForRR(url,dataBody,virtusaRRSubKey): \n      \n     headers = {\"Ocp-Apim-Subscription-Key\": virtusaRRSubKey,\"REST-Framework-Version\": \"4\"}\n     response = requests.post(url,data=dataBody,headers=headers,verify=False)\n      \n     return response\n\n# Execute Main Logic\n\ndef run_main_logic(request_data, accessToken, request_method, resourseRequestNumber):\n    try:\n        rrNumber = \"\"\n        if request_method == \"GET\":\n            rrNumber = resourseRequestNumber\n            if not rrNumber:\n                sucResponse = {\"success\": \"false\", \"statusCode\": \"500\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Unable To Find ResourseRequestNumber\"}]}\n                return sucResponse, 200\n        \n        elif request_method == \"POST\":\n            requestBody = request_data\n            eligibleBuddyNumbers = []\n            data = f\"client_id={ClientId}&grant_type={GrantType}&client_secret={ClientSecret}\"\n            response = getAcessTokenForRR(TokenGenerateURL, data, VirtusaTokenSubKey)\n            if response.status_code == 200:\n                if \"tier\" in requestBody:\n                    if \"practice\" in requestBody:\n                        if \"projectSBUSegment\" in requestBody:\n                            if \"workingATC\" in requestBody:\n                                if \"projectAccount\" in requestBody:\n                                    if (requestBody)[\"tier\"] is not None:\n                                        if (requestBody)[\"practice\"] is not None:\n                                            if (requestBody)[\"workingATC\"] is not None:\n                                                workingAtc = (requestBody)[\"workingATC\"]\n                                                practice = (requestBody)[\"practice\"]\n                                                tier = (requestBody)[\"tier\"]\n                                                sbu = None\n                                                account = None\n                                                tier_encoded = encodeParamForDataverse(tier)\n                                                serviceLine_encoded = encodeParamForDataverse(practice)\n                                                if (requestBody)[\"projectSBUSegment\"] is not None:\n                                                    sbu = encodeParamForDataverse((requestBody)[\"projectSBUSegment\"])\n                                                atc = encodeParamForDataverse(workingAtc)\n                                                if (requestBody)[\"projectAccount\"] is not None:\n                                                    account = encodeParamForDataverse((requestBody)[\"projectAccount\"])\n                                                responseEligibleBuddies_str = getAllBuddeis(tier_encoded, serviceLine_encoded, sbu, atc, account, accessToken)\n                                                return json.loads(responseEligibleBuddies_str), 200\n                                            else:\n                                                resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : WorkingAtc is missing\"}]}\n                                                return resBody, 400\n                                        else:\n                                            resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : Practice is missing\"}]}\n                                            return resBody, 400\n                                    else:\n                                        resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : Tier is missing\"}]}\n                                        return resBody, 400\n                                else:\n                                    resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : ProjectAccount attribute is missing\"}]}\n                                    return resBody, 400\n                            else:\n                                resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : WorkATC attribute is missing\"}]}\n                                return resBody, 400\n                        else:\n                            resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : SBU attribute is missing\"}]}\n                            return resBody, 400\n                    else:\n                        resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : Project attribute is missing\"}]}\n                        return resBody, 400\n                else:\n                    resBody = {\"success\": \"false\", \"statusCode\": \"400\", \"error\": [{\"errorMessage\": \"Payload Error : Tier attribute is missing\"}]}\n                    return resBody, 400\n\n            elif response.status_code in [400, 401, 403, 404, 408, 429, 500, 502, 503, 504, 505]:\n                error_messages = {400: \"Bad Request\", 401: \"Unauthorized. Access token is missing or invalid.\", 403: \"access to the requested resource is forbidden.\", 404: \"Resource Not Found\", 408: \"Request Time Out\", 429: \"Too Many Requests\", 500: \"Internal Server Error\", 502: \"Bad Gateway\", 503: \"Requested Service Not Available\", 504: \"Gateway Timeout\", 505: \"HTTP Version Not Support\"}\n                resBody = {\"success\": \"false\", \"statusCode\": str(response.status_code), \"personNumber\": [], \"error\": [{\"errorMessage\": error_messages.get(response.status_code, \"Internal Error Occured\")}]}\n                return resBody, response.status_code\n            else:\n                resBody = {\"success\": \"false\", \"statusCode\": \"500\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Internal Error Occured\"}]}\n                return resBody, 500\n                \n    except requests.exceptions.ConnectionError:\n        sucResponse = {\"success\": \"false\", \"statusCode\": \"400\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Connection Error Occured\"}]}\n        return sucResponse, 400\n    except (ValueError, KeyError):\n        sucResponse = {\"success\": \"false\", \"statusCode\": \"500\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Expected Values Not Received\"}]}\n        return sucResponse, 500\n    except Exception:\n        sucResponse = {\"success\": \"false\", \"statusCode\": \"500\", \"personNumber\": [], \"error\": [{\"errorMessage\": \"Internal Error Occured\"}]}\n        return sucResponse, 500\n\nresult, status = run_main_logic(payload, accessToken, \"POST\", resourseRequestNumber)\n\n# print(result)",
				"imports":[
					"requests"
				],
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"TokenGenerateURL":"{{ __ENV__.outputs.TokenGenerateURL }}",
					"ClientId":"{{ __ENV__.outputs.ClientId_Virtubuddy }}",
					"GrantType":"{{ __ENV__.outputs.GrantType_Virtu_buddy }}",
					"ClientSecret":"{{ __ENV__.outputs.ClientSecret_Virtubuddy }}",
					"VirtusaRRSubKey":"{{ __ENV__.outputs.VirtusaRRSubKey }}",
					"VirtusaTokenSubKey":"{{ __ENV__.outputs.VirtusaTokenSubKey_Buddy }}",
					"DataverseUrl":"{{ __ENV__.outputs.DataverseUrl }}",
					"DataverseTable":"{{ __ENV__.outputs.DataverseTable }}",
					"GetAllocatedBuddyUrl":"{{ __ENV__.outputs.GetAllocatedBuddyUrl }}",
					"GetAllocatedBuddyToken":"{{ __ENV__.outputs.GetAllocatedBuddyToken }}",
					"EmployeeApiForHireDateUrl":"{{ __ENV__.outputs.EmployeeApiForHireDateUrl }}",
					"EmployeeApiSubKey":"{{ __ENV__.outputs.EmployeeApiSubKey }}",
					"AllocationDayCount":"{{ __ENV__.outputs.AllocationDayCount }}",
					"ManagerType":"{{ __ENV__.outputs.ManagerType }}",
					"ManagerTerminationDayCount":"{{ __ENV__.outputs.ManagerTerminationDayCount }}",
					"BuddyCountForAManager":"{{ __ENV__.outputs.BuddyCountForAManager }}",
					"resourseRequestNumber":"=IF(ISBLANK({{ n_vlZAI.outputs.queryParams.resourseRequestNumber }}),\"\", {{ n_vlZAI.outputs.queryParams.resourseRequestNumber }})",
					"accessToken":"=IF(ISBLANK({{ n_vlZAI.outputs.headers.authorization }}), \"\", {{ n_vlZAI.outputs.headers.authorization }})",
					"payload":"{{ n_K4q3Q.outputs.payload }}",
					"requestResourceNumber":"=IF(LEN({{ n_vlZAI.outputs.queryParams.resourseRequestNumber }})=0, \"\", {{ n_vlZAI.outputs.queryParams.resourseRequestNumber }})",
					"DataverseTokenUrl":"{{ __ENV__.outputs.DataVerseTokenUrl }}",
					"DataverseClientId":"{{ __ENV__.outputs.DataverseClientId }}",
					"DataverseGrantType":"{{ __ENV__.outputs.DataverseGrantType }}",
					"DataVerseClientSecret":"{{ __ENV__.outputs.DataVerseClientSecret }}",
					"DataverseScope":"{{ __ENV__.outputs.DataverseScope }}"
				}
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Code",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"branch",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VVPM9-1",
			"id":"n_KAwph",
			"index":7,
			"inputs":{
				"branches":[
					{
						"id":"1",
						"inputs":{
							"name":"200",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"200"
										}
									},
									{
										"filters":[
											{
												"property":"{{ n_sMmRX.outputs.result.statusCode }}",
												"filter":{
													"operator":"EQUAL",
													"value":"400"
												}
											},
											{
												"property":"{{ n_sMmRX.outputs.result.error[0].errorMessage }}",
												"filter":{
													"operator":"EQUAL",
													"value":"Eligible buddies not found"
												}
											}
										],
										"operator":"AND"
									}
								],
								"operator":"OR"
							}
						}
					},
					{
						"id":"2",
						"inputs":{
							"name":"400",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"400"
										}
									},
									{
										"property":"{{ n_sMmRX.outputs.result.error[0].errorMessage }}",
										"filter":{
											"operator":"NOT_EQUAL",
											"value":"Eligible buddies not found"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"3",
						"inputs":{
							"name":"401",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"401"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"4",
						"inputs":{
							"name":"403",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"403"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"5",
						"inputs":{
							"name":"404",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"404"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"6",
						"inputs":{
							"name":"408",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"408"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"7",
						"inputs":{
							"name":"429",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"429"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"8",
						"inputs":{
							"name":"500",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"500"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"9",
						"inputs":{
							"name":"502",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"502"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"10",
						"inputs":{
							"name":"503",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"503"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"11",
						"inputs":{
							"name":"504",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"504"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"12",
						"inputs":{
							"name":"505",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_sMmRX.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"505"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"default"
					}
				]
			},
			"skip":false,
			"subTitle":"Branch",
			"title":"",
			"type":"BRANCH"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@1",
			"id":"n_KAwph@1",
			"index":8,
			"inputs":{
				"name":"200",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"200"
							}
						},
						{
							"filters":[
								{
									"property":"{{ n_sMmRX.outputs.result.statusCode }}",
									"filter":{
										"operator":"EQUAL",
										"value":"400"
									}
								},
								{
									"property":"{{ n_sMmRX.outputs.result.error[0].errorMessage }}",
									"filter":{
										"operator":"EQUAL",
										"value":"Eligible buddies not found"
									}
								}
							],
							"operator":"AND"
						}
					],
					"operator":"OR"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":16,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@1",
			"id":"n_FblxH",
			"index":9,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200 - Success",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@2",
			"id":"n_KAwph@2",
			"index":10,
			"inputs":{
				"name":"400",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"400"
							}
						},
						{
							"property":"{{ n_sMmRX.outputs.result.error[0].errorMessage }}",
							"filter":{
								"operator":"NOT_EQUAL",
								"value":"Eligible buddies not found"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":16,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@2",
			"id":"_afoFu",
			"index":11,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"400_400 - bad request",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":400
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@3",
			"id":"n_KAwph@3",
			"index":12,
			"inputs":{
				"name":"401",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"401"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":16,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@3",
			"id":"_0Nrh5",
			"index":13,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"401_401 - Unauthorized",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":401
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@4",
			"id":"n_KAwph@4",
			"index":14,
			"inputs":{
				"name":"403",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"403"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":16,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@4",
			"id":"_GPMzX",
			"index":15,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"403_403 - foridden",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":403
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@5",
			"id":"n_KAwph@5",
			"index":16,
			"inputs":{
				"name":"404",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"404"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":23,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@5",
			"id":"n_qqqFW",
			"index":17,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"404_404 - not found",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":404
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@6",
			"id":"n_KAwph@6",
			"index":18,
			"inputs":{
				"name":"408",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"408"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":23,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@6",
			"id":"n_dSaEq",
			"index":19,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"408_408 - request timeout",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":408
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@7",
			"id":"n_KAwph@7",
			"index":20,
			"inputs":{
				"name":"429",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"429"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":23,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@7",
			"id":"n_uZfgn",
			"index":21,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"429_429 - too many request",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":429
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@8",
			"id":"n_KAwph@8",
			"index":22,
			"inputs":{
				"name":"500",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"500"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":23,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@8",
			"id":"n_aySnX",
			"index":23,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"500_500 - internal server error",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":500
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@9",
			"id":"n_KAwph@9",
			"index":24,
			"inputs":{
				"name":"502",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"502"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":23,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@9",
			"id":"n_196Fn",
			"index":25,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"502_502 - bad gateway",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":502
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@10",
			"id":"n_KAwph@10",
			"index":26,
			"inputs":{
				"name":"503",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"503"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":23,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@10",
			"id":"n_lcOIX",
			"index":27,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"503_503 - service unavailable",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":503
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@11",
			"id":"n_KAwph@11",
			"index":28,
			"inputs":{
				"name":"504",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"504"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":23,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@11",
			"id":"n_tdDAi",
			"index":29,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"504_504 - Gateway Timeout",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":504
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@12",
			"id":"n_KAwph@12",
			"index":30,
			"inputs":{
				"name":"505",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_sMmRX.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"505"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":23,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_KAwph@_VVPM9-1@12",
			"id":"n_hpe3J",
			"index":31,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"505_505 - http version not supported",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":505
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":18,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VVPM9-1",
			"id":"n_CZwPZ",
			"index":32,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"501_501 - not implemented",
				"body":"{{ n_sMmRX.outputs.result }}",
				"status":501
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":569,
	"projectId":2036,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		"Azure Function"
	],
	"version":40
}